{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useState, useEffect, forwardRef, memo } from 'react';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useTheme } from '../../theme';\nvar loadingKeyframes = css.keyframes('loading', {\n  '0%': {\n    transform: 'rotate(0)'\n  },\n  '100%': {\n    transform: 'rotate(360deg)'\n  }\n});\nvar loadingCircleKeyframes = css.keyframes('loading-circle', {\n  '0%': {\n    strokeDashoffset: 600\n  },\n  '100%': {\n    strokeDashoffset: 0\n  }\n});\nvar outerClass = css({\n  animation: \"\".concat(loadingKeyframes, \" 2s linear infinite\")\n}).toString();\n\nvar innerClass = function innerClass(color) {\n  return css({\n    strokeDashoffset: 600,\n    strokeDasharray: 300,\n    strokeWidth: 12,\n    strokeMiterlimit: 10,\n    strokeLinecap: 'round',\n    animation: \"\".concat(loadingCircleKeyframes, \" 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite\"),\n    stroke: color,\n    fill: 'transparent'\n  }).toString();\n};\n\nvar Spinner = memo(forwardRef(function Spinner(_ref, ref) {\n  var _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? 0 : _ref$delay,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 40 : _ref$size,\n      props = _objectWithoutProperties(_ref, [\"delay\", \"size\"]);\n\n  var theme = useTheme();\n\n  var _useState = useState(delay === 0),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisible = _useState2[0],\n      setIsVisible = _useState2[1];\n\n  useEffect(function () {\n    var delayTimer = null;\n\n    if (delay > 0) {\n      delayTimer = setTimeout(function () {\n        setIsVisible(true);\n      }, delay);\n    }\n\n    return function () {\n      clearTimeout(delayTimer);\n    };\n  }, []);\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({\n    width: size,\n    height: size,\n    lineHeight: 0\n  }, props, {\n    ref: ref\n  }), React.createElement(Box, {\n    is: \"svg\",\n    className: outerClass,\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 150 150\"\n  }, React.createElement(Box, {\n    is: \"circle\",\n    className: innerClass(theme.spinnerColor),\n    cx: \"75\",\n    cy: \"75\",\n    r: \"60\"\n  })));\n}));\nSpinner.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {\n  /**\n   * Delay after which spinner should be visible.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * The size of the spinner.\n   */\n  size: PropTypes.number\n});\nexport default Spinner;","map":{"version":3,"sources":["../../../src/spinner/src/Spinner.js"],"names":["loadingKeyframes","transform","loadingCircleKeyframes","strokeDashoffset","outerClass","animation","innerClass","strokeDasharray","strokeWidth","strokeMiterlimit","strokeLinecap","stroke","fill","Spinner","memo","forwardRef","delay","size","props","theme","useTheme","isVisible","setIsVisible","useState","useEffect","delayTimer","setTimeout","clearTimeout","ref","Box","PropTypes","number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,IAAA,QAAA,OAAA;AACA,SAAA,GAAA,QAAA,QAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,GAAA,MAAA,QAAA;AACA,SAAA,QAAA,QAAA,aAAA;AAEA,IAAMA,gBAAgB,GAAG,GAAG,CAAH,SAAA,CAAA,SAAA,EAAyB;AAChD,QAAM;AACJC,IAAAA,SAAS,EAAE;AADP,GAD0C;AAIhD,UAAQ;AACNA,IAAAA,SAAS,EAAE;AADL;AAJwC,CAAzB,CAAzB;AASA,IAAMC,sBAAsB,GAAG,GAAG,CAAH,SAAA,CAAA,gBAAA,EAAgC;AAC7D,QAAM;AACJC,IAAAA,gBAAgB,EAAE;AADd,GADuD;AAI7D,UAAQ;AACNA,IAAAA,gBAAgB,EAAE;AADZ;AAJqD,CAAhC,CAA/B;AASA,IAAMC,UAAU,GAAG,GAAG,CAAC;AACrBC,EAAAA,SAAS,EAAA,GAAA,MAAA,CAAA,gBAAA,EAAA,qBAAA;AADY,CAAD,CAAH,CAAnB,QAAmB,EAAnB;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAA,KAAA,EAAK;AAAA,SACtB,GAAG,CAAC;AACFH,IAAAA,gBAAgB,EADd,GAAA;AAEFI,IAAAA,eAAe,EAFb,GAAA;AAGFC,IAAAA,WAAW,EAHT,EAAA;AAIFC,IAAAA,gBAAgB,EAJd,EAAA;AAKFC,IAAAA,aAAa,EALX,OAAA;AAMFL,IAAAA,SAAS,EAAA,GAAA,MAAA,CAAA,sBAAA,EANP,mDAMO,CANP;AAOFM,IAAAA,MAAM,EAPJ,KAAA;AAQFC,IAAAA,IAAI,EAAE;AARJ,GAAD,CAAH,CADsB,QACtB,EADsB;AAAxB,CAAA;;AAYA,IAAMC,OAAO,GAAGC,IAAI,CAClBC,UAAU,CAAC,SAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAA0D;AAAA,MAAA,UAAA,GAAA,IAAA,CAAvCC,KAAuC;AAAA,MAAvCA,KAAuC,GAAA,UAAA,KAAA,KAAA,CAAA,GAA/B,CAA+B,GAAA,UAAA;AAAA,MAAA,SAAA,GAAA,IAAA,CAA5BC,IAA4B;AAAA,MAA5BA,IAA4B,GAAA,SAAA,KAAA,KAAA,CAAA,GAArB,EAAqB,GAAA,SAAA;AAAA,MAAdC,KAAc,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,OAAA,EAAA,MAAA,CAAA,CAAA;;AACnE,MAAMC,KAAK,GAAGC,QAAd,EAAA;;AADmE,MAAA,SAAA,GAEjCG,QAAQ,CAACP,KAAK,KAFmB,CAEzB,CAFyB;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAE5DK,SAF4D,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAEjDC,YAFiD,GAAA,UAAA,CAAA,CAAA,CAAA;;AAInEE,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIC,UAAU,GAAd,IAAA;;AACA,QAAIT,KAAK,GAAT,CAAA,EAAe;AACbS,MAAAA,UAAU,GAAGC,UAAU,CAAC,YAAM;AAC5BJ,QAAAA,YAAY,CAAZA,IAAY,CAAZA;AADqB,OAAA,EAAvBG,KAAuB,CAAvBA;AAGD;;AAED,WAAO,YAAW;AAChBE,MAAAA,YAAY,CAAZA,UAAY,CAAZA;AADF,KAAA;AARO,GAAA,EAATH,EAAS,CAATA;;AAaA,MAAI,CAAJ,SAAA,EAAgB;AACd,WAAA,IAAA;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AAAK,IAAA,KAAK,EAAV,IAAA;AAAkB,IAAA,MAAM,EAAxB,IAAA;AAAgC,IAAA,UAAU,EAAE;AAA5C,GAAA,EAAA,KAAA,EAAA;AAA0D,IAAA,GAAG,EAAEI;AAA/D,GAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,IAAA,EAAE,EADJ,KAAA;AAEE,IAAA,SAAS,EAFX,UAAA;AAGE,IAAA,CAAC,EAHH,KAAA;AAIE,IAAA,CAAC,EAJH,KAAA;AAKE,IAAA,OAAO,EAAC;AALV,GAAA,EAOE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,IAAA,EAAE,EADJ,QAAA;AAEE,IAAA,SAAS,EAAEtB,UAAU,CAACa,KAAK,CAF7B,YAEuB,CAFvB;AAGE,IAAA,EAAE,EAHJ,IAAA;AAIE,IAAA,EAAE,EAJJ,IAAA;AAKE,IAAA,CAAC,EAAC;AALJ,GAAA,CAPF,CADF,CADF;AAtBJ,CACY,CADQ,CAApB;AA4CAN,OAAO,CAAPA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAIKgB,GAAG,CAJRhB,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAME;;;AAGAG,EAAAA,KAAK,EAAEc,SAAS,CATlBjB,MAAAA;;AAWE;;;AAGAI,EAAAA,IAAI,EAAEa,SAAS,CAACC;AAdlBlB,CAAAA,CAAAA;AAiBA,eAAA,OAAA","sourcesContent":["import React, { useState, useEffect, forwardRef, memo } from 'react'\nimport { css } from 'glamor'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useTheme } from '../../theme'\n\nconst loadingKeyframes = css.keyframes('loading', {\n  '0%': {\n    transform: 'rotate(0)'\n  },\n  '100%': {\n    transform: 'rotate(360deg)'\n  }\n})\n\nconst loadingCircleKeyframes = css.keyframes('loading-circle', {\n  '0%': {\n    strokeDashoffset: 600\n  },\n  '100%': {\n    strokeDashoffset: 0\n  }\n})\n\nconst outerClass = css({\n  animation: `${loadingKeyframes} 2s linear infinite`\n}).toString()\n\nconst innerClass = color =>\n  css({\n    strokeDashoffset: 600,\n    strokeDasharray: 300,\n    strokeWidth: 12,\n    strokeMiterlimit: 10,\n    strokeLinecap: 'round',\n    animation: `${loadingCircleKeyframes} 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite`,\n    stroke: color,\n    fill: 'transparent'\n  }).toString()\n\nconst Spinner = memo(\n  forwardRef(function Spinner({ delay = 0, size = 40, ...props }, ref) {\n    const theme = useTheme()\n    const [isVisible, setIsVisible] = useState(delay === 0)\n\n    useEffect(() => {\n      let delayTimer = null\n      if (delay > 0) {\n        delayTimer = setTimeout(() => {\n          setIsVisible(true)\n        }, delay)\n      }\n\n      return function() {\n        clearTimeout(delayTimer)\n      }\n    }, [])\n\n    if (!isVisible) {\n      return null\n    }\n\n    return (\n      <Box width={size} height={size} lineHeight={0} {...props} ref={ref}>\n        <Box\n          is=\"svg\"\n          className={outerClass}\n          x=\"0px\"\n          y=\"0px\"\n          viewBox=\"0 0 150 150\"\n        >\n          <Box\n            is=\"circle\"\n            className={innerClass(theme.spinnerColor)}\n            cx=\"75\"\n            cy=\"75\"\n            r=\"60\"\n          />\n        </Box>\n      </Box>\n    )\n  })\n)\n\nSpinner.propTypes = {\n  /**\n   * Composes the Box component as the base.\n   */\n  ...Box.propTypes,\n\n  /**\n   * Delay after which spinner should be visible.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * The size of the spinner.\n   */\n  size: PropTypes.number\n}\n\nexport default Spinner\n"]},"metadata":{},"sourceType":"module"}