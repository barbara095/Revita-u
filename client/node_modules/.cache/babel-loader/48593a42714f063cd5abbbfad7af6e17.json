{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport arrify from 'arrify';\nimport { Popover } from '../../popover';\nimport { Position } from '../../constants';\nimport { SearchIcon } from '../../icons';\nimport SelectMenuContent from './SelectMenuContent';\nimport OptionShapePropType from './OptionShapePropType';\nimport SelectedPropType from './SelectedPropType';\n\nvar noop = function noop() {};\n\nvar SelectMenu = memo(function SelectMenu(props) {\n  var title = props.title,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 240 : _props$width,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 248 : _props$height,\n      options = props.options,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,\n      _props$onDeselect = props.onDeselect,\n      onDeselect = _props$onDeselect === void 0 ? noop : _props$onDeselect,\n      onFilterChange = props.onFilterChange,\n      selected = props.selected,\n      _props$position = props.position,\n      position = _props$position === void 0 ? Position.BOTTOM_LEFT : _props$position,\n      hasTitle = props.hasTitle,\n      hasFilter = props.hasFilter,\n      _props$filterPlacehol = props.filterPlaceholder,\n      filterPlaceholder = _props$filterPlacehol === void 0 ? 'Filter...' : _props$filterPlacehol,\n      _props$filterIcon = props.filterIcon,\n      filterIcon = _props$filterIcon === void 0 ? SearchIcon : _props$filterIcon,\n      detailView = props.detailView,\n      emptyView = props.emptyView,\n      titleView = props.titleView,\n      _props$isMultiSelect = props.isMultiSelect,\n      isMultiSelect = _props$isMultiSelect === void 0 ? false : _props$isMultiSelect,\n      _props$closeOnSelect = props.closeOnSelect,\n      closeOnSelect = _props$closeOnSelect === void 0 ? false : _props$closeOnSelect,\n      rest = _objectWithoutProperties(props, [\"title\", \"width\", \"height\", \"options\", \"onSelect\", \"onDeselect\", \"onFilterChange\", \"selected\", \"position\", \"hasTitle\", \"hasFilter\", \"filterPlaceholder\", \"filterIcon\", \"detailView\", \"emptyView\", \"titleView\", \"isMultiSelect\", \"closeOnSelect\"]);\n\n  var selectedArray = useMemo(function () {\n    return arrify(selected);\n  }, [selected]);\n  return React.createElement(Popover, _extends({\n    minWidth: width,\n    position: position,\n    minHeight: height,\n    content: function content(_ref) {\n      var close = _ref.close;\n      return React.createElement(SelectMenuContent, {\n        width: width,\n        height: height,\n        options: options,\n        title: title,\n        hasFilter: hasFilter,\n        filterPlaceholder: filterPlaceholder,\n        filterIcon: filterIcon,\n        hasTitle: hasTitle,\n        isMultiSelect: isMultiSelect,\n        titleView: titleView,\n        listProps: {\n          onSelect: onSelect,\n          onDeselect: onDeselect,\n          onFilterChange: onFilterChange,\n          selected: selectedArray\n        },\n        close: close,\n        detailView: typeof detailView === 'function' ? detailView({\n          close: close\n        }) : detailView,\n        emptyView: typeof emptyView === 'function' ? emptyView({\n          close: close\n        }) : emptyView,\n        closeOnSelect: closeOnSelect\n      });\n    }\n  }, rest));\n});\nSelectMenu.propTypes = {\n  /**\n   * The title of the Select Menu.\n   */\n  title: PropTypes.string,\n\n  /**\n   * The width of the Select Menu.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The height of the Select Menu.\n   */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The options to show in the menu.\n   * [{ label: String, value: String | Number }]\n   */\n  options: PropTypes.arrayOf(OptionShapePropType),\n\n  /**\n   * Function that is called when an option is selected.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called when an option is deselected.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * The selected value/values.\n   */\n  selected: SelectedPropType,\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /**\n   * When true, show the title.\n   */\n  hasTitle: PropTypes.bool,\n\n  /**\n   * When true, show the filter.\n   */\n  hasFilter: PropTypes.bool,\n\n  /**\n   * The placeholder of the search filter.\n   */\n  filterPlaceholder: PropTypes.string,\n\n  /**\n   * The icon of the search filter.\n   */\n  filterIcon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Function that is called as the onChange() event for the filter.\n   */\n  onFilterChange: PropTypes.func,\n\n  /**\n   * The position of the Select Menu.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered on the right side of the Select Menu to give additional\n   * information when an option is selected.\n   */\n  detailView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered in the header section of the Select Menu to customize\n   * the header.\n   */\n  titleView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered instead of the options list when there are no options.\n   */\n  emptyView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /*\n   * When true, menu closes on option selection.\n   */\n  closeOnSelect: PropTypes.bool\n};\nexport default SelectMenu;","map":{"version":3,"sources":["../../../src/select-menu/src/SelectMenu.js"],"names":["noop","SelectMenu","memo","title","width","height","options","onSelect","onDeselect","onFilterChange","selected","position","Position","hasTitle","hasFilter","filterPlaceholder","filterIcon","detailView","emptyView","titleView","isMultiSelect","closeOnSelect","rest","props","selectedArray","useMemo","arrify","close","PropTypes","bool"],"mappings":"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","sourcesContent":["import React, { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport arrify from 'arrify'\nimport { Popover } from '../../popover'\nimport { Position } from '../../constants'\nimport { SearchIcon } from '../../icons'\nimport SelectMenuContent from './SelectMenuContent'\nimport OptionShapePropType from './OptionShapePropType'\nimport SelectedPropType from './SelectedPropType'\n\nconst noop = () => {}\n\nconst SelectMenu = memo(function SelectMenu(props) {\n  const {\n    title,\n    width = 240,\n    height = 248,\n    options,\n    onSelect = noop,\n    onDeselect = noop,\n    onFilterChange,\n    selected,\n    position = Position.BOTTOM_LEFT,\n    hasTitle,\n    hasFilter,\n    filterPlaceholder = 'Filter...',\n    filterIcon = SearchIcon,\n    detailView,\n    emptyView,\n    titleView,\n    isMultiSelect = false,\n    closeOnSelect = false,\n    ...rest\n  } = props\n\n  const selectedArray = useMemo(() => arrify(selected), [selected])\n\n  return (\n    <Popover\n      minWidth={width}\n      position={position}\n      minHeight={height}\n      content={({ close }) => (\n        <SelectMenuContent\n          width={width}\n          height={height}\n          options={options}\n          title={title}\n          hasFilter={hasFilter}\n          filterPlaceholder={filterPlaceholder}\n          filterIcon={filterIcon}\n          hasTitle={hasTitle}\n          isMultiSelect={isMultiSelect}\n          titleView={titleView}\n          listProps={{\n            onSelect,\n            onDeselect,\n            onFilterChange,\n            selected: selectedArray\n          }}\n          close={close}\n          detailView={\n            typeof detailView === 'function'\n              ? detailView({ close })\n              : detailView\n          }\n          emptyView={\n            typeof emptyView === 'function' ? emptyView({ close }) : emptyView\n          }\n          closeOnSelect={closeOnSelect}\n        />\n      )}\n      {...rest}\n    />\n  )\n})\n\nSelectMenu.propTypes = {\n  /**\n   * The title of the Select Menu.\n   */\n  title: PropTypes.string,\n\n  /**\n   * The width of the Select Menu.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The height of the Select Menu.\n   */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The options to show in the menu.\n   * [{ label: String, value: String | Number }]\n   */\n  options: PropTypes.arrayOf(OptionShapePropType),\n\n  /**\n   * Function that is called when an option is selected.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called when an option is deselected.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * The selected value/values.\n   */\n  selected: SelectedPropType,\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /**\n   * When true, show the title.\n   */\n  hasTitle: PropTypes.bool,\n\n  /**\n   * When true, show the filter.\n   */\n  hasFilter: PropTypes.bool,\n\n  /**\n   * The placeholder of the search filter.\n   */\n  filterPlaceholder: PropTypes.string,\n\n  /**\n   * The icon of the search filter.\n   */\n  filterIcon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Function that is called as the onChange() event for the filter.\n   */\n  onFilterChange: PropTypes.func,\n\n  /**\n   * The position of the Select Menu.\n   */\n  position: PropTypes.oneOf([\n    Position.TOP,\n    Position.TOP_LEFT,\n    Position.TOP_RIGHT,\n    Position.BOTTOM,\n    Position.BOTTOM_LEFT,\n    Position.BOTTOM_RIGHT\n  ]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered on the right side of the Select Menu to give additional\n   * information when an option is selected.\n   */\n  detailView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered in the header section of the Select Menu to customize\n   * the header.\n   */\n  titleView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered instead of the options list when there are no options.\n   */\n  emptyView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /*\n   * When true, menu closes on option selection.\n   */\n  closeOnSelect: PropTypes.bool\n}\n\nexport default SelectMenu\n"]},"metadata":{},"sourceType":"module"}