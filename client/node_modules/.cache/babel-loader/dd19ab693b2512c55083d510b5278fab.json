{"ast":null,"code":"/**\n * Helper function to conform to 8 (px) major scale.\n * @param {number} x — unitless number\n * @return {number} - unitless number\n * @example\n * majorScale(2) => 2*8 = 16\n * majorScale(4) => 4*8 = 32\n */\nexport default function majorScale(x) {\n  if (!Number.isInteger(x)) {\n    throw new TypeError(\"majorScale only accepts integers as input, instead \".concat(x, \" was passed.\"));\n  }\n\n  return x * 8;\n}","map":{"version":3,"sources":["../../../src/scales/src/majorScale.js"],"names":["Number","x"],"mappings":"AAAA;;;;;;;;AAQA,eAAe,SAAA,UAAA,CAAA,CAAA,EAAuB;AACpC,MAAI,CAACA,MAAM,CAANA,SAAAA,CAAL,CAAKA,CAAL,EAA0B;AACxB,UAAM,IAAA,SAAA,CAAA,sDAAA,MAAA,CAAA,CAAA,EAAN,cAAM,CAAA,CAAN;AAGD;;AAED,SAAOC,CAAC,GAAR,CAAA;AACD","sourcesContent":["/**\n * Helper function to conform to 8 (px) major scale.\n * @param {number} x — unitless number\n * @return {number} - unitless number\n * @example\n * majorScale(2) => 2*8 = 16\n * majorScale(4) => 4*8 = 32\n */\nexport default function majorScale(x) {\n  if (!Number.isInteger(x)) {\n    throw new TypeError(\n      `majorScale only accepts integers as input, instead ${x} was passed.`\n    )\n  }\n\n  return x * 8\n}\n"]},"metadata":{},"sourceType":"module"}