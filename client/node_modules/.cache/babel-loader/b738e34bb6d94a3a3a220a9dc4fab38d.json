{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { memo, forwardRef, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport { useTheme } from '../../theme';\nimport safeInvoke from '../../lib/safe-invoke';\n\nvar noop = function noop() {};\n\nvar MenuItem = memo(forwardRef(function MenuItem(props, ref) {\n  var _props$is = props.is,\n      is = _props$is === void 0 ? 'div' : _props$is,\n      children = props.children,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      secondaryText = props.secondaryText,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      icon = props.icon,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,\n      onKeyPress = props.onKeyPress,\n      disabled = props.disabled,\n      passthroughProps = _objectWithoutProperties(props, [\"is\", \"children\", \"appearance\", \"secondaryText\", \"intent\", \"icon\", \"onSelect\", \"onKeyPress\", \"disabled\"]);\n\n  var theme = useTheme();\n  var handleClick = useCallback(function (event) {\n    onSelect(event);\n  }, [onSelect]);\n  var handleKeyPress = useCallback(function (event) {\n    if (event.key === 'Enter' || event.key === ' ') {\n      onSelect(event);\n      event.preventDefault();\n    }\n\n    safeInvoke(onKeyPress, event);\n  }, [onSelect, onKeyPress]);\n  var themedClassName = theme.getMenuItemClassName(appearance, 'none');\n  var iconColor = intent === 'none' ? 'default' : intent;\n\n  if (disabled) {\n    iconColor = 'disabled';\n  }\n\n  var textColor = disabled ? theme.colors.icon.disabled : intent;\n  var secondaryTextColor = disabled ? textColor : 'muted';\n  var disabledProps = useMemo(function () {\n    return disabled ? {\n      backgroundColor: theme.colors.background.tint1,\n      cursor: 'not-allowed',\n      disabled: true,\n      onClick: null,\n      onKeyPress: null,\n      tabIndex: -1,\n      'aria-disabled': 'true',\n      'data-isselectable': 'false'\n    } : {};\n  }, [disabled]);\n  return React.createElement(Pane, _extends({\n    is: is,\n    role: \"menuitem\",\n    className: themedClassName,\n    onClick: handleClick,\n    onKeyPress: handleKeyPress,\n    height: icon ? 40 : 32,\n    tabIndex: 0,\n    \"data-isselectable\": \"true\",\n    display: \"flex\",\n    alignItems: \"center\",\n    ref: ref\n  }, disabledProps, passthroughProps), React.createElement(IconWrapper, {\n    icon: icon,\n    color: iconColor,\n    marginLeft: 16,\n    marginRight: -4,\n    size: 16,\n    flexShrink: 0\n  }), React.createElement(Text, {\n    color: textColor,\n    marginLeft: 16,\n    marginRight: 16,\n    flex: 1\n  }, children), secondaryText && React.createElement(Text, {\n    marginRight: 16,\n    color: secondaryTextColor\n  }, secondaryText));\n}));\nMenuItem.propTypes = {\n  /**\n   * Element type to use for the menu item.\n   * For example: `<MenuItem is={ReactRouterLink}>...</MenuItem>`\n   */\n  is: Box.propTypes.is,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * The Evergreen or custom icon before the label.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * The children of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Secondary text shown on the right.\n   */\n  secondaryText: PropTypes.node,\n\n  /**\n   * The default theme only supports one default appearance.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The intent of the menu item.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * Callback to invoke onkeypress\n   */\n  onKeyPress: PropTypes.func,\n\n  /**\n   * Flag to indicate whether the menu item is disabled or not\n   */\n  disabled: PropTypes.bool\n};\nexport default MenuItem;","map":{"version":3,"sources":["../../../src/menu/src/MenuItem.js"],"names":["noop","MenuItem","memo","forwardRef","is","children","appearance","secondaryText","intent","icon","onSelect","onKeyPress","disabled","passthroughProps","props","theme","useTheme","handleClick","useCallback","handleKeyPress","event","safeInvoke","themedClassName","iconColor","textColor","secondaryTextColor","disabledProps","useMemo","backgroundColor","cursor","onClick","tabIndex","ref","Box","PropTypes","bool"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useCallback, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { IconWrapper } from '../../icons/src/IconWrapper'\nimport { Pane } from '../../layers'\nimport { Text } from '../../typography'\nimport { useTheme } from '../../theme'\nimport safeInvoke from '../../lib/safe-invoke'\n\nconst noop = () => {}\n\nconst MenuItem = memo(\n  forwardRef(function MenuItem(props, ref) {\n    const {\n      is = 'div',\n      children,\n      appearance = 'default',\n      secondaryText,\n      intent = 'none',\n      icon,\n      onSelect = noop,\n      onKeyPress,\n      disabled,\n      ...passthroughProps\n    } = props\n\n    const theme = useTheme()\n\n    const handleClick = useCallback(\n      event => {\n        onSelect(event)\n      },\n      [onSelect]\n    )\n\n    const handleKeyPress = useCallback(\n      event => {\n        if (event.key === 'Enter' || event.key === ' ') {\n          onSelect(event)\n          event.preventDefault()\n        }\n\n        safeInvoke(onKeyPress, event)\n      },\n      [onSelect, onKeyPress]\n    )\n\n    const themedClassName = theme.getMenuItemClassName(appearance, 'none')\n\n    let iconColor = intent === 'none' ? 'default' : intent\n\n    if(disabled) {\n      iconColor = 'disabled'\n    }\n\n    const textColor = disabled ? theme.colors.icon.disabled : intent\n\n    const secondaryTextColor = disabled ? textColor : 'muted'\n\n    const disabledProps = useMemo(() => {\n      return disabled ? {\n        backgroundColor: theme.colors.background.tint1,\n        cursor: 'not-allowed',\n        disabled: true,\n        onClick: null,\n        onKeyPress: null,\n        tabIndex: -1,\n        'aria-disabled': 'true',\n        'data-isselectable': 'false'\n      } : {}\n    }, [disabled])\n\n    return (\n      <Pane\n        is={is}\n        role=\"menuitem\"\n        className={themedClassName}\n        onClick={handleClick}\n        onKeyPress={handleKeyPress}\n        height={icon ? 40 : 32}\n        tabIndex={0}\n        data-isselectable=\"true\"\n        display=\"flex\"\n        alignItems=\"center\"\n        ref={ref}\n        {...disabledProps}\n        {...passthroughProps}\n      >\n        <IconWrapper\n          icon={icon}\n          color={iconColor}\n          marginLeft={16}\n          marginRight={-4}\n          size={16}\n          flexShrink={0}\n        />\n        <Text color={textColor} marginLeft={16} marginRight={16} flex={1}>\n          {children}\n        </Text>\n        {secondaryText && (\n          <Text marginRight={16} color={secondaryTextColor}>\n            {secondaryText}\n          </Text>\n        )}\n      </Pane>\n    )\n  })\n)\n\nMenuItem.propTypes = {\n  /**\n   * Element type to use for the menu item.\n   * For example: `<MenuItem is={ReactRouterLink}>...</MenuItem>`\n   */\n  is: Box.propTypes.is,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * The Evergreen or custom icon before the label.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * The children of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Secondary text shown on the right.\n   */\n  secondaryText: PropTypes.node,\n\n  /**\n   * The default theme only supports one default appearance.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The intent of the menu item.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * Callback to invoke onkeypress\n   */\n  onKeyPress: PropTypes.func,\n\n  /**\n   * Flag to indicate whether the menu item is disabled or not\n   */\n  disabled: PropTypes.bool\n}\n\nexport default MenuItem\n"]},"metadata":{},"sourceType":"module"}