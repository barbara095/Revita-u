{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { memo, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nvar noop = function noop() {};\n\nvar ScrollbarSize = memo(function ScrollbarSize(_ref) {\n  var _ref$handleScrollbarS = _ref.handleScrollbarSize,\n      handleScrollbarSize = _ref$handleScrollbarS === void 0 ? noop : _ref$handleScrollbarS;\n  var innerRef = useRef();\n  var outerRef = useRef();\n\n  var _useState = useState({\n    innerWidth: null,\n    outerWidth: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      widths = _useState2[0],\n      setWidths = _useState2[1];\n\n  useEffect(function () {\n    var newWidths = {\n      innerWidth: null,\n      outerWidth: null\n    };\n\n    if (innerRef.current) {\n      newWidths.innerWidth = innerRef.current.getBoundingClientRect().width;\n    }\n\n    if (outerRef.current) {\n      newWidths.outerWidth = outerRef.current.getBoundingClientRect().width;\n    }\n\n    setWidths(newWidths);\n  }, []);\n  useEffect(function () {\n    if (widths.innerWidth && widths.outerWidth) {\n      handleScrollbarSize(widths.outerWidth - widths.innerWidth);\n    }\n  });\n  return React.createElement(\"div\", {\n    ref: outerRef,\n    \"aria-hidden\": true,\n    style: {\n      position: 'fixed',\n      top: -500,\n      left: -500,\n      width: 100,\n      overflowY: 'scroll'\n    }\n  }, React.createElement(\"div\", {\n    ref: innerRef\n  }));\n});\nScrollbarSize.propTypes = {\n  /**\n   * Returns the size of the scrollbar by creating a hidden fixed div.\n   */\n  handleScrollbarSize: PropTypes.func\n};\nexport default ScrollbarSize;","map":{"version":3,"sources":["../../../src/table/src/ScrollbarSize.js"],"names":["noop","ScrollbarSize","memo","handleScrollbarSize","innerRef","useRef","outerRef","widths","setWidths","useState","innerWidth","outerWidth","useEffect","newWidths","position","top","left","width","overflowY","PropTypes","func"],"mappings":";AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAnB,CAAA;;AAEA,IAAMC,aAAa,GAAGC,IAAI,CAAC,SAAA,aAAA,CAAA,IAAA,EAExB;AAAA,MAAA,qBAAA,GAAA,IAAA,CADDC,mBACC;AAAA,MADDA,mBACC,GAAA,qBAAA,KAAA,KAAA,CAAA,GADqBH,IACrB,GAAA,qBAAA;AACD,MAAMI,QAAQ,GAAGC,MAAjB,EAAA;AACA,MAAMC,QAAQ,GAAGD,MAAjB,EAAA;;AAFC,MAAA,SAAA,GAG2BI,QAAQ,CAAC;AAAEC,IAAAA,UAAU,EAAZ,IAAA;AAAoBC,IAAAA,UAAU,EAAE;AAAhC,GAAD,CAHnC;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAGMJ,MAHN,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAGcC,SAHd,GAAA,UAAA,CAAA,CAAA,CAAA;;AAKDI,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMC,SAAS,GAAG;AAAEH,MAAAA,UAAU,EAAZ,IAAA;AAAoBC,MAAAA,UAAU,EAAE;AAAhC,KAAlB;;AAEA,QAAIP,QAAQ,CAAZ,OAAA,EAAsB;AACpBS,MAAAA,SAAS,CAATA,UAAAA,GAAuBT,QAAQ,CAARA,OAAAA,CAAAA,qBAAAA,GAAvBS,KAAAA;AACD;;AAED,QAAIP,QAAQ,CAAZ,OAAA,EAAsB;AACpBO,MAAAA,SAAS,CAATA,UAAAA,GAAuBP,QAAQ,CAARA,OAAAA,CAAAA,qBAAAA,GAAvBO,KAAAA;AACD;;AAEDL,IAAAA,SAAS,CAATA,SAAS,CAATA;AAXO,GAAA,EAATI,EAAS,CAATA;AAcAA,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIL,MAAM,CAANA,UAAAA,IAAqBA,MAAM,CAA/B,UAAA,EAA4C;AAC1CJ,MAAAA,mBAAmB,CAACI,MAAM,CAANA,UAAAA,GAAoBA,MAAM,CAA9CJ,UAAmB,CAAnBA;AACD;AAHHS,GAAS,CAATA;AAMA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,GAAG,EADL,QAAA;AAEE,mBAFF,IAAA;AAGE,IAAA,KAAK,EAAE;AACLE,MAAAA,QAAQ,EADH,OAAA;AAELC,MAAAA,GAAG,EAAE,CAFA,GAAA;AAGLC,MAAAA,IAAI,EAAE,CAHD,GAAA;AAILC,MAAAA,KAAK,EAJA,GAAA;AAKLC,MAAAA,SAAS,EAAE;AALN;AAHT,GAAA,EAWE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,GAAG,EAAEd;AAAV,GAAA,CAXF,CADF;AA3BF,CAA0B,CAA1B;AA4CAH,aAAa,CAAbA,SAAAA,GAA0B;AACxB;;;AAGAE,EAAAA,mBAAmB,EAAEgB,SAAS,CAACC;AAJP,CAA1BnB;AAOA,eAAA,aAAA","sourcesContent":["import React, { memo, useRef, useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nconst noop = () => {}\n\nconst ScrollbarSize = memo(function ScrollbarSize({\n  handleScrollbarSize = noop\n}) {\n  const innerRef = useRef()\n  const outerRef = useRef()\n  const [widths, setWidths] = useState({ innerWidth: null, outerWidth: null })\n\n  useEffect(() => {\n    const newWidths = { innerWidth: null, outerWidth: null }\n\n    if (innerRef.current) {\n      newWidths.innerWidth = innerRef.current.getBoundingClientRect().width\n    }\n\n    if (outerRef.current) {\n      newWidths.outerWidth = outerRef.current.getBoundingClientRect().width\n    }\n\n    setWidths(newWidths)\n  }, [])\n\n  useEffect(() => {\n    if (widths.innerWidth && widths.outerWidth) {\n      handleScrollbarSize(widths.outerWidth - widths.innerWidth)\n    }\n  })\n\n  return (\n    <div\n      ref={outerRef}\n      aria-hidden\n      style={{\n        position: 'fixed',\n        top: -500,\n        left: -500,\n        width: 100,\n        overflowY: 'scroll'\n      }}\n    >\n      <div ref={innerRef} />\n    </div>\n  )\n})\n\nScrollbarSize.propTypes = {\n  /**\n   * Returns the size of the scrollbar by creating a hidden fixed div.\n   */\n  handleScrollbarSize: PropTypes.func\n}\n\nexport default ScrollbarSize\n"]},"metadata":{},"sourceType":"module"}