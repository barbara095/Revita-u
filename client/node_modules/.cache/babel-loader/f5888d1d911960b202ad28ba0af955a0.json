{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '../../typography';\nimport TableCell from './TableCell';\nvar ellipsis = {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n};\nvar TextTableCell = memo(forwardRef(function TextTableCell(props, ref) {\n  var children = props.children,\n      textProps = props.textProps,\n      _props$isNumber = props.isNumber,\n      isNumber = _props$isNumber === void 0 ? false : _props$isNumber,\n      placeholder = props.placeholder,\n      rest = _objectWithoutProperties(props, [\"children\", \"textProps\", \"isNumber\", \"placeholder\"]);\n\n  return React.createElement(TableCell, _extends({\n    ref: ref\n  }, rest), React.createElement(Text, _extends({\n    size: 300,\n    flex: \"1\"\n  }, ellipsis, isNumber ? {\n    fontFamily: 'mono'\n  } : {}, textProps), children));\n}));\nTextTableCell.propTypes = _objectSpread(_objectSpread({}, TableCell.propTypes), {}, {\n  /**\n   * Adds fontFamily: mono.\n   */\n  isNumber: PropTypes.bool,\n\n  /**\n   * Pass additional props to the Text component.\n   */\n  textProps: PropTypes.object\n});\nexport default TextTableCell;","map":{"version":3,"sources":["../../../src/table/src/TextTableCell.js"],"names":["ellipsis","overflow","textOverflow","whiteSpace","TextTableCell","memo","forwardRef","children","textProps","isNumber","placeholder","rest","props","ref","fontFamily","TableCell","PropTypes","object"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AACA,OAAA,SAAA,MAAA,aAAA;AAEA,IAAMA,QAAQ,GAAG;AACfC,EAAAA,QAAQ,EADO,QAAA;AAEfC,EAAAA,YAAY,EAFG,UAAA;AAGfC,EAAAA,UAAU,EAAE;AAHG,CAAjB;AAMA,IAAMC,aAAa,GAAGC,IAAI,CACxBC,UAAU,CAAC,SAAA,aAAA,CAAA,KAAA,EAAA,GAAA,EAAmC;AAAA,MAE1CC,QAF0C,GAOxCK,KAPwC,CAAA,QAAA;AAAA,MAG1CJ,SAH0C,GAOxCI,KAPwC,CAAA,SAAA;AAAA,MAAA,eAAA,GAOxCA,KAPwC,CAAA,QAAA;AAAA,MAI1CH,QAJ0C,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,eAAA;AAAA,MAK1CC,WAL0C,GAOxCE,KAPwC,CAAA,WAAA;AAAA,MAMvCD,IANuC,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,CAAA,CAAA;;AAS5C,SACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AAAW,IAAA,GAAG,EAAEE;AAAhB,GAAA,EAAA,IAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,IAAI,EADN,GAAA;AAEE,IAAA,IAAI,EAAC;AAFP,GAAA,EAAA,QAAA,EAIOJ,QAAQ,GAAG;AAAEK,IAAAA,UAAU,EAAE;AAAd,GAAH,GAJf,EAAA,EAAA,SAAA,CAAA,EAFJ,QAEI,CADF,CADF;AAVJ,CACY,CADc,CAA1B;AA0BAV,aAAa,CAAbA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAIKW,SAAS,CAJdX,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAME;;;AAGAK,EAAAA,QAAQ,EAAEO,SAAS,CATrBZ,IAAAA;;AAWE;;;AAGAI,EAAAA,SAAS,EAAEQ,SAAS,CAACC;AAdvBb,CAAAA,CAAAA;AAiBA,eAAA,aAAA","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text } from '../../typography'\nimport TableCell from './TableCell'\n\nconst ellipsis = {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}\n\nconst TextTableCell = memo(\n  forwardRef(function TextTableCell(props, ref) {\n    const {\n      children,\n      textProps,\n      isNumber = false,\n      placeholder,\n      ...rest\n    } = props\n\n    return (\n      <TableCell ref={ref} {...rest}>\n        <Text\n          size={300}\n          flex=\"1\"\n          {...ellipsis}\n          {...(isNumber ? { fontFamily: 'mono' } : {})}\n          {...textProps}\n        >\n          {children}\n        </Text>\n      </TableCell>\n    )\n  })\n)\n\nTextTableCell.propTypes = {\n  /**\n   * Composes the TableCell component as the base.\n   */\n  ...TableCell.propTypes,\n\n  /**\n   * Adds fontFamily: mono.\n   */\n  isNumber: PropTypes.bool,\n\n  /**\n   * Pass additional props to the Text component.\n   */\n  textProps: PropTypes.object\n}\n\nexport default TextTableCell\n"]},"metadata":{},"sourceType":"module"}