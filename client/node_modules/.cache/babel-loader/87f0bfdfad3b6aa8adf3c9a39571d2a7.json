{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { dimensions, spacing, position, layout } from 'ui-box';\nimport { Autocomplete } from '../../autocomplete';\nimport { TextInput } from '../../text-input';\nimport { IconButton } from '../../buttons';\nimport { CaretDownIcon } from '../../icons';\nvar Combobox = memo(function Combobox(props) {\n  var items = props.items,\n      selectedItem = props.selectedItem,\n      initialSelectedItem = props.initialSelectedItem,\n      itemToString = props.itemToString,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 240 : _props$width,\n      height = props.height,\n      onChange = props.onChange,\n      placeholder = props.placeholder,\n      inputProps = props.inputProps,\n      buttonProps = props.buttonProps,\n      _props$openOnFocus = props.openOnFocus,\n      openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,\n      autocompleteProps = props.autocompleteProps,\n      _props$isLoading = props.isLoading,\n      isLoading = _props$isLoading === void 0 ? false : _props$isLoading,\n      rest = _objectWithoutProperties(props, [\"items\", \"selectedItem\", \"initialSelectedItem\", \"itemToString\", \"width\", \"height\", \"onChange\", \"placeholder\", \"inputProps\", \"buttonProps\", \"openOnFocus\", \"autocompleteProps\", \"isLoading\"]);\n\n  var disabled = props.disabled || isLoading;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpenedByButton = _useState2[0],\n      setIsOpenedByButton = _useState2[1];\n\n  var handleStateChange = function handleStateChange(changes, stateAndHelpers) {\n    if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {\n      if (!changes.isOpen) {\n        setIsOpenedByButton(false);\n      }\n    }\n\n    if (autocompleteProps && typeof autocompleteProps.onStateChange === 'function') {\n      autocompleteProps.onStateChange(changes, stateAndHelpers);\n    }\n  };\n\n  return React.createElement(Autocomplete, _extends({\n    items: items,\n    selectedItem: selectedItem,\n    initialSelectedItem: initialSelectedItem,\n    itemToString: itemToString,\n    onChange: onChange,\n    isFilterDisabled: isOpenedByButton\n  }, autocompleteProps, {\n    onStateChange: handleStateChange\n  }), function (_ref) {\n    var getRef = _ref.getRef,\n        isShown = _ref.isShown,\n        openMenu = _ref.openMenu,\n        inputValue = _ref.inputValue,\n        getInputProps = _ref.getInputProps,\n        getToggleButtonProps = _ref.getToggleButtonProps,\n        clearSelection = _ref.clearSelection;\n    return React.createElement(Box, _extends({\n      ref: getRef,\n      display: \"inline-flex\",\n      width: width\n    }, rest), React.createElement(TextInput, _extends({\n      width: 0,\n      flex: 1,\n      height: height,\n      value: inputValue,\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      disabled: disabled\n    }, getInputProps(_objectSpread(_objectSpread({}, inputProps), {}, {\n      placeholder: placeholder,\n      onFocus: function onFocus() {\n        if (openOnFocus) openMenu();\n      },\n      onChange: function onChange(e) {\n        if (isOpenedByButton) {\n          setIsOpenedByButton(false);\n        }\n\n        if (e.target.value.trim() === '') {\n          // Prevent the selected item from sticking around\n          clearSelection();\n        }\n      }\n    })))), React.createElement(IconButton, _extends({\n      color: \"muted\",\n      icon: isLoading ? undefined : CaretDownIcon,\n      appearance: \"default\",\n      height: height,\n      marginLeft: -1,\n      paddingLeft: isLoading ? 12 : 0,\n      paddingRight: 0,\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n      disabled: disabled,\n      isLoading: isLoading\n    }, getToggleButtonProps(_objectSpread(_objectSpread({}, buttonProps), {}, {\n      onClick: function onClick() {\n        if (!isShown) {\n          setIsOpenedByButton(true);\n        }\n      }\n    })))));\n  });\n});\nCombobox.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * The options to show in the menu.\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected item when controlled.\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * Function called when value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * When true, open the autocomplete on focus.\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Default selected item when uncontrolled.\n   */\n  initialSelectedItem: PropTypes.any,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Properties forwarded to the input. Use with caution.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the button. Use with caution.\n   */\n  buttonProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the autocomplete component. Use with caution.\n   */\n  autocompleteProps: PropTypes.object,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * When true, show a loading spinner. This also disables the button.\n   */\n  isLoading: PropTypes.bool\n});\nexport default Combobox;","map":{"version":3,"sources":["../../../src/combobox/src/Combobox.js"],"names":["Combobox","memo","items","selectedItem","initialSelectedItem","itemToString","width","height","onChange","placeholder","inputProps","buttonProps","openOnFocus","autocompleteProps","isLoading","rest","props","disabled","isOpenedByButton","setIsOpenedByButton","useState","handleStateChange","Object","changes","getRef","isShown","openMenu","inputValue","getInputProps","getToggleButtonProps","clearSelection","onFocus","e","onClick","dimensions","spacing","position","layout","PropTypes","bool"],"mappings":"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","sourcesContent":["import React, { memo, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Box, { dimensions, spacing, position, layout } from 'ui-box'\nimport { Autocomplete } from '../../autocomplete'\nimport { TextInput } from '../../text-input'\nimport { IconButton } from '../../buttons'\nimport { CaretDownIcon } from '../../icons'\n\nconst Combobox = memo(function Combobox(props) {\n  const {\n    items,\n    selectedItem,\n    initialSelectedItem,\n    itemToString,\n    width = 240,\n    height,\n    onChange,\n    placeholder,\n    inputProps,\n    buttonProps,\n    openOnFocus = false,\n    autocompleteProps,\n    isLoading = false,\n    ...rest\n  } = props\n\n  const disabled = props.disabled || isLoading\n\n  const [isOpenedByButton, setIsOpenedByButton] = useState(false)\n\n  const handleStateChange = (changes, stateAndHelpers) => {\n    if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {\n      if (!changes.isOpen) {\n        setIsOpenedByButton(false)\n      }\n    }\n\n    if (\n      autocompleteProps &&\n      typeof autocompleteProps.onStateChange === 'function'\n    ) {\n      autocompleteProps.onStateChange(changes, stateAndHelpers)\n    }\n  }\n\n  return (\n    <Autocomplete\n      items={items}\n      selectedItem={selectedItem}\n      initialSelectedItem={initialSelectedItem}\n      itemToString={itemToString}\n      onChange={onChange}\n      isFilterDisabled={isOpenedByButton}\n      {...autocompleteProps}\n      onStateChange={handleStateChange}\n    >\n      {({\n        getRef,\n        isShown,\n        openMenu,\n        inputValue,\n        getInputProps,\n        getToggleButtonProps,\n        clearSelection\n      }) => (\n        <Box ref={getRef} display=\"inline-flex\" width={width} {...rest}>\n          <TextInput\n            width={0}\n            flex={1}\n            height={height}\n            value={inputValue}\n            borderTopRightRadius={0}\n            borderBottomRightRadius={0}\n            disabled={disabled}\n            {...getInputProps({\n              ...inputProps,\n              placeholder,\n              onFocus: () => {\n                if (openOnFocus) openMenu()\n              },\n              onChange: e => {\n                if (isOpenedByButton) {\n                  setIsOpenedByButton(false)\n                }\n\n                if (e.target.value.trim() === '') {\n                  // Prevent the selected item from sticking around\n                  clearSelection()\n                }\n              }\n            })}\n          />\n          <IconButton\n            color=\"muted\"\n            icon={isLoading ? undefined : CaretDownIcon}\n            appearance=\"default\"\n            height={height}\n            marginLeft={-1}\n            paddingLeft={isLoading ? 12 : 0}\n            paddingRight={0}\n            borderTopLeftRadius={0}\n            borderBottomLeftRadius={0}\n            disabled={disabled}\n            isLoading={isLoading}\n            {...getToggleButtonProps({\n              ...buttonProps,\n              onClick: () => {\n                if (!isShown) {\n                  setIsOpenedByButton(true)\n                }\n              }\n            })}\n          />\n        </Box>\n      )}\n    </Autocomplete>\n  )\n})\n\nCombobox.propTypes = {\n  /**\n   * Implements some APIs from ui-box.\n   */\n  ...dimensions.propTypes,\n  ...spacing.propTypes,\n  ...position.propTypes,\n  ...layout.propTypes,\n\n  /**\n   * The options to show in the menu.\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected item when controlled.\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * Function called when value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * When true, open the autocomplete on focus.\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Default selected item when uncontrolled.\n   */\n  initialSelectedItem: PropTypes.any,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Properties forwarded to the input. Use with caution.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the button. Use with caution.\n   */\n  buttonProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the autocomplete component. Use with caution.\n   */\n  autocompleteProps: PropTypes.object,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * When true, show a loading spinner. This also disables the button.\n   */\n  isLoading: PropTypes.bool\n}\n\nexport default Combobox\n"]},"metadata":{},"sourceType":"module"}