{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport { Heading } from '../../typography';\nimport { IconButton } from '../../buttons';\nimport { CrossIcon } from '../../icons';\nimport OptionsList from './OptionsList';\nimport OptionShapePropType from './OptionShapePropType';\n\nvar DefaultTitleView = function DefaultTitleView(_ref) {\n  var close = _ref.close,\n      title = _ref.title,\n      headerHeight = _ref.headerHeight;\n  return React.createElement(Pane, {\n    display: \"flex\",\n    alignItems: \"center\",\n    borderBottom: \"default\",\n    padding: 8,\n    height: headerHeight,\n    boxSizing: \"border-box\"\n  }, React.createElement(Pane, {\n    flex: \"1\",\n    display: \"flex\",\n    alignItems: \"center\"\n  }, React.createElement(Heading, {\n    size: 400\n  }, title)), React.createElement(IconButton, {\n    icon: CrossIcon,\n    appearance: \"minimal\",\n    height: 24,\n    onClick: close\n  }));\n};\n\nDefaultTitleView.displayName = \"DefaultTitleView\";\nDefaultTitleView.propTypes = {\n  close: PropTypes.func,\n  title: PropTypes.string,\n  headerHeight: PropTypes.number\n};\nvar emptyArray = [];\nvar SelectMenuContent = memo(function SelectMenuContent(props) {\n  var title = props.title,\n      width = props.width,\n      height = props.height,\n      _props$options = props.options,\n      options = _props$options === void 0 ? emptyArray : _props$options,\n      _props$hasTitle = props.hasTitle,\n      hasTitle = _props$hasTitle === void 0 ? true : _props$hasTitle,\n      _props$hasFilter = props.hasFilter,\n      hasFilter = _props$hasFilter === void 0 ? true : _props$hasFilter,\n      filterPlaceholder = props.filterPlaceholder,\n      filterIcon = props.filterIcon,\n      close = props.close,\n      listProps = props.listProps,\n      _props$titleView = props.titleView,\n      titleView = _props$titleView === void 0 ? DefaultTitleView : _props$titleView,\n      detailView = props.detailView,\n      emptyView = props.emptyView,\n      isMultiSelect = props.isMultiSelect,\n      closeOnSelect = props.closeOnSelect;\n  var headerHeight = 40;\n  var optionsListHeight = hasTitle ? height - headerHeight : height;\n  var hasDetailView = Boolean(detailView);\n  var hasEmptyView = Boolean(emptyView);\n  return React.createElement(Pane, {\n    display: \"flex\",\n    height: height\n  }, React.createElement(Pane, {\n    width: width,\n    height: height,\n    display: \"flex\",\n    flexDirection: \"column\",\n    borderRight: hasDetailView ? 'muted' : null\n  }, hasTitle && titleView({\n    close: close,\n    title: title,\n    headerHeight: headerHeight\n  }), options.length === 0 && hasEmptyView ? React.createElement(Pane, {\n    height: optionsListHeight\n  }, emptyView) : React.createElement(OptionsList, _extends({\n    height: optionsListHeight,\n    hasFilter: hasFilter,\n    filterPlaceholder: filterPlaceholder,\n    filterIcon: filterIcon,\n    options: options,\n    isMultiSelect: isMultiSelect,\n    close: close,\n    closeOnSelect: closeOnSelect\n  }, listProps))), hasDetailView && detailView);\n});\nSelectMenuContent.propTypes = {\n  close: PropTypes.func,\n  title: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  headerHeight: PropTypes.number,\n  options: PropTypes.arrayOf(OptionShapePropType),\n  hasTitle: PropTypes.bool,\n  hasFilter: PropTypes.bool,\n  filterPlaceholder: PropTypes.string,\n  filterIcon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n  listProps: PropTypes.shape(OptionsList.propTypes),\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /*\n   * When true, menu closes on option selection.\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Node that is placed in the header section, above the options.\n   */\n  titleView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Node that is placed right next to the options.\n   */\n  detailView: PropTypes.node,\n\n  /**\n   * Node that is displayed instead of options list when there are no options.\n   */\n  emptyView: PropTypes.node\n};\nexport default SelectMenuContent;","map":{"version":3,"sources":["../../../src/select-menu/src/SelectMenuContent.js"],"names":["DefaultTitleView","close","title","headerHeight","PropTypes","number","emptyArray","SelectMenuContent","memo","width","height","options","hasTitle","hasFilter","filterPlaceholder","filterIcon","listProps","titleView","detailView","emptyView","isMultiSelect","closeOnSelect","props","optionsListHeight","hasDetailView","Boolean","hasEmptyView","OptionsList","node"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { Pane } from '../../layers'\nimport { Heading } from '../../typography'\nimport { IconButton } from '../../buttons'\nimport { CrossIcon } from '../../icons'\nimport OptionsList from './OptionsList'\nimport OptionShapePropType from './OptionShapePropType'\n\nconst DefaultTitleView = ({ close, title, headerHeight }) => (\n  <Pane\n    display=\"flex\"\n    alignItems=\"center\"\n    borderBottom=\"default\"\n    padding={8}\n    height={headerHeight}\n    boxSizing=\"border-box\"\n  >\n    <Pane flex=\"1\" display=\"flex\" alignItems=\"center\">\n      <Heading size={400}>{title}</Heading>\n    </Pane>\n    <IconButton\n      icon={CrossIcon}\n      appearance=\"minimal\"\n      height={24}\n      onClick={close}\n    />\n  </Pane>\n)\n\nDefaultTitleView.propTypes = {\n  close: PropTypes.func,\n  title: PropTypes.string,\n  headerHeight: PropTypes.number\n}\n\nconst emptyArray = []\n\nconst SelectMenuContent = memo(function SelectMenuContent(props) {\n  const {\n    title,\n    width,\n    height,\n    options = emptyArray,\n    hasTitle = true,\n    hasFilter = true,\n    filterPlaceholder,\n    filterIcon,\n    close,\n    listProps,\n    titleView = DefaultTitleView,\n    detailView,\n    emptyView,\n    isMultiSelect,\n    closeOnSelect\n  } = props\n\n  const headerHeight = 40\n  const optionsListHeight = hasTitle ? height - headerHeight : height\n\n  const hasDetailView = Boolean(detailView)\n  const hasEmptyView = Boolean(emptyView)\n\n  return (\n    <Pane display=\"flex\" height={height}>\n      <Pane\n        width={width}\n        height={height}\n        display=\"flex\"\n        flexDirection=\"column\"\n        borderRight={hasDetailView ? 'muted' : null}\n      >\n        {hasTitle && titleView({ close, title, headerHeight })}\n        {options.length === 0 && hasEmptyView ? (\n          <Pane height={optionsListHeight}>{emptyView}</Pane>\n        ) : (\n          <OptionsList\n            height={optionsListHeight}\n            hasFilter={hasFilter}\n            filterPlaceholder={filterPlaceholder}\n            filterIcon={filterIcon}\n            options={options}\n            isMultiSelect={isMultiSelect}\n            close={close}\n            closeOnSelect={closeOnSelect}\n            {...listProps}\n          />\n        )}\n      </Pane>\n      {hasDetailView && detailView}\n    </Pane>\n  )\n})\n\nSelectMenuContent.propTypes = {\n  close: PropTypes.func,\n  title: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  headerHeight: PropTypes.number,\n  options: PropTypes.arrayOf(OptionShapePropType),\n  hasTitle: PropTypes.bool,\n  hasFilter: PropTypes.bool,\n  filterPlaceholder: PropTypes.string,\n  filterIcon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n  listProps: PropTypes.shape(OptionsList.propTypes),\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /*\n   * When true, menu closes on option selection.\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Node that is placed in the header section, above the options.\n   */\n  titleView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Node that is placed right next to the options.\n   */\n  detailView: PropTypes.node,\n\n  /**\n   * Node that is displayed instead of options list when there are no options.\n   */\n  emptyView: PropTypes.node\n}\n\nexport default SelectMenuContent\n"]},"metadata":{},"sourceType":"module"}