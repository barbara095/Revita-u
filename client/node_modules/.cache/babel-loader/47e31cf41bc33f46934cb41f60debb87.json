{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Strong } from '../../typography';\nimport { useTheme } from '../../theme';\nvar styles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n  height: 16,\n  paddingTop: 0,\n  paddingRight: 6,\n  paddingBottom: 0,\n  paddingLeft: 6,\n  borderRadius: 2,\n  textAlign: 'center',\n  textDecoration: 'none',\n  textTransform: 'uppercase'\n};\nvar Badge = memo(forwardRef(function Badge(props, ref) {\n  var theme = useTheme();\n\n  var className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'neutral' : _props$color,\n      _props$isInteractive = props.isInteractive,\n      isInteractive = _props$isInteractive === void 0 ? false : _props$isInteractive,\n      _props$isSolid = props.isSolid,\n      isSolid = _props$isSolid === void 0 ? false : _props$isSolid,\n      restProps = _objectWithoutProperties(props, [\"className\", \"color\", \"isInteractive\", \"isSolid\"]);\n\n  var themeProps = theme.getBadgeProps({\n    color: color,\n    isSolid: isSolid\n  });\n  var appearance = isInteractive ? 'interactive' : 'default';\n  var classNames = cx(className, theme.getBadgeClassName(appearance));\n  return React.createElement(Strong, _extends({\n    ref: ref,\n    size: 300\n  }, styles, themeProps, restProps, {\n    className: classNames\n  }));\n}));\nBadge.propTypes = _objectSpread(_objectSpread({}, Strong.propTypes), {}, {\n  /**\n   * The color used for the badge.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Whether or not to apply hover/focus/active styles\n   */\n  isInteractive: PropTypes.bool\n});\nexport default Badge;","map":{"version":3,"sources":["../../../src/badges/src/Badge.js"],"names":["styles","display","boxSizing","height","paddingTop","paddingRight","paddingBottom","paddingLeft","borderRadius","textAlign","textDecoration","textTransform","Badge","memo","forwardRef","theme","useTheme","className","color","isInteractive","isSolid","restProps","props","themeProps","appearance","classNames","cx","Strong","PropTypes","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,MAAA,QAAA,kBAAA;AACA,SAAA,QAAA,QAAA,aAAA;AAEA,IAAMA,MAAM,GAAG;AACbC,EAAAA,OAAO,EADM,cAAA;AAEbC,EAAAA,SAAS,EAFI,YAAA;AAGbC,EAAAA,MAAM,EAHO,EAAA;AAIbC,EAAAA,UAAU,EAJG,CAAA;AAKbC,EAAAA,YAAY,EALC,CAAA;AAMbC,EAAAA,aAAa,EANA,CAAA;AAObC,EAAAA,WAAW,EAPE,CAAA;AAQbC,EAAAA,YAAY,EARC,CAAA;AASbC,EAAAA,SAAS,EATI,QAAA;AAUbC,EAAAA,cAAc,EAVD,MAAA;AAWbC,EAAAA,aAAa,EAAE;AAXF,CAAf;AAcA,IAAMC,KAAK,GAAGC,IAAI,CAChBC,UAAU,CAAC,SAAA,KAAA,CAAA,KAAA,EAAA,GAAA,EAA2B;AACpC,MAAMC,KAAK,GAAGC,QAAd,EAAA;;AADoC,MAIlCC,SAJkC,GAShCK,KATgC,CAAA,SAAA;AAAA,MAAA,YAAA,GAShCA,KATgC,CAAA,KAAA;AAAA,MAKlCJ,KALkC,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,YAAA;AAAA,MAAA,oBAAA,GAShCI,KATgC,CAAA,aAAA;AAAA,MAMlCH,aANkC,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,oBAAA;AAAA,MAAA,cAAA,GAShCG,KATgC,CAAA,OAAA;AAAA,MAOlCF,OAPkC,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,cAAA;AAAA,MAQ/BC,SAR+B,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,WAAA,EAAA,OAAA,EAAA,eAAA,EAAA,SAAA,CAAA,CAAA;;AAWpC,MAAME,UAAU,GAAG,KAAK,CAAL,aAAA,CAAoB;AAAEL,IAAAA,KAAK,EAAP,KAAA;AAASE,IAAAA,OAAO,EAAPA;AAAT,GAApB,CAAnB;AACA,MAAMI,UAAU,GAAGL,aAAa,GAAA,aAAA,GAAhC,SAAA;AACA,MAAMM,UAAU,GAAGC,EAAE,CAAA,SAAA,EAAYX,KAAK,CAALA,iBAAAA,CAAjC,UAAiCA,CAAZ,CAArB;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,IAAI,EAAE;AAFR,GAAA,EAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA;AAME,IAAA,SAAS,EAAEU;AANb,GAAA,CAAA,CADF;AAhBJ,CACY,CADM,CAAlB;AA6BAb,KAAK,CAALA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKe,MAAM,CADXf,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAGE;;;AAGAM,EAAAA,KAAK,EAAEU,SAAS,CANlBhB,MAAAA;;AAQE;;;AAGAO,EAAAA,aAAa,EAAES,SAAS,CAACC;AAX3BjB,CAAAA,CAAAA;AAcA,eAAA,KAAA","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { Strong } from '../../typography'\nimport { useTheme } from '../../theme'\n\nconst styles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n  height: 16,\n  paddingTop: 0,\n  paddingRight: 6,\n  paddingBottom: 0,\n  paddingLeft: 6,\n  borderRadius: 2,\n  textAlign: 'center',\n  textDecoration: 'none',\n  textTransform: 'uppercase'\n}\n\nconst Badge = memo(\n  forwardRef(function Badge(props, ref) {\n    const theme = useTheme()\n\n    const {\n      className,\n      color = 'neutral',\n      isInteractive = false,\n      isSolid = false,\n      ...restProps\n    } = props\n\n    const themeProps = theme.getBadgeProps({ color, isSolid })\n    const appearance = isInteractive ? 'interactive' : 'default'\n    const classNames = cx(className, theme.getBadgeClassName(appearance))\n\n    return (\n      <Strong\n        ref={ref}\n        size={300}\n        {...styles}\n        {...themeProps}\n        {...restProps}\n        className={classNames}\n      />\n    )\n  })\n)\n\nBadge.propTypes = {\n  ...Strong.propTypes,\n\n  /**\n   * The color used for the badge.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Whether or not to apply hover/focus/active styles\n   */\n  isInteractive: PropTypes.bool\n}\n\nexport default Badge\n"]},"metadata":{},"sourceType":"module"}