{"ast":null,"code":"import axios from \"axios\"; // Recipe Search & Diet API by Edamam allows us to get recipes by searching for a particular ingredient\n\nconst recipeURL = \"https://edamam-recipe-search.p.rapidapi.com/search\";\nconst recipeAPI = \"435f0cdaeamshd0fe4e59b8a1c27p16ae90jsn8bb53a2736cc\"; // BonAPI allows us to search for food alternatives \n\nconst ingredientURL = \"https://bon-api.com/api/v1/ingredient-alternatives/\";\nconst ingredientAPI = \"3112184fd50f665cccb860f7e34f8ae55ebc2ece\";\nexport default {\n  searchRecipe: function (query) {\n    return new Promise((resolve, reject) => {\n      axios.get(recipeURL, {\n        'headers': {\n          \"content-type\": \"application/octet-stream\",\n          \"x-rapidapi-host\": \"edamam-recipe-search.p.rapidapi.com\",\n          \"x-rapidapi-key\": recipeAPI,\n          \"useQueryString\": true,\n          \"params\": {\n            \"q\": query\n          }\n        }\n      }).then(res => {\n        const recipes = res.data;\n        const results = recipes.map(recipe => {\n          return {\n            title: recipe.label,\n            image: recipe.image,\n            url: recipe.url,\n            source: recipe.source,\n            labels: recipe.yield.healthLabels,\n            calories: recipe.calories,\n            carbs: recipe.totalNutrients.CHOCDF.quantity,\n            fat: recipe.totalNutrients.FAT.quantity,\n            protein: recipe.totalNutrients.PROCNT.quantity,\n            sugar: recipe.totalNutrients.SUGAR.quantity,\n            sodium: recipe.totalNutrients.NA.quantity\n          };\n        });\n        resolve(results);\n      }).catch(err => reject(err));\n    });\n  },\n  searchIngredient: function (query) {\n    return new Promise((resolve, reject) => {\n      axios.get(ingredientURL + query, {\n        'headers': {\n          'Authorization': ingredientAPI\n        }\n      }).then(res => {\n        const ingredients = res.data;\n        console.log(ingredients);\n        const results = ingredients.map(ingredient => {\n          return {\n            substitution: ingredient.alternatives\n          };\n        });\n        resolve(results);\n      }).catch(err => reject(err));\n    });\n  }\n};","map":{"version":3,"sources":["/Users/barbpotiriadis/revita-u/client/src/utils/API.js"],"names":["axios","recipeURL","recipeAPI","ingredientURL","ingredientAPI","searchRecipe","query","Promise","resolve","reject","get","then","res","recipes","data","results","map","recipe","title","label","image","url","source","labels","yield","healthLabels","calories","carbs","totalNutrients","CHOCDF","quantity","fat","FAT","protein","PROCNT","sugar","SUGAR","sodium","NA","catch","err","searchIngredient","ingredients","console","log","ingredient","substitution","alternatives"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,SAAS,GAAG,oDAAlB;AACA,MAAMC,SAAS,GAAG,oDAAlB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,qDAAtB;AACA,MAAMC,aAAa,GAAG,0CAAtB;AAEA,eAAe;AACbC,EAAAA,YAAY,EAAE,UAASC,KAAT,EAAgB;AAC5B,WAAO,IAAIC,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCT,MAAAA,KAAK,CACJU,GADD,CACKT,SADL,EACgB;AACd,mBAAW;AACT,0BAAe,0BADN;AAET,6BAAkB,qCAFT;AAGT,4BAAkBC,SAHT;AAIT,4BAAiB,IAJR;AAKT,oBAAS;AAAE,iBAAKI;AAAP;AALA;AADG,OADhB,EAUDK,IAVC,CAUIC,GAAG,IAAI;AACX,cAAMC,OAAO,GAAGD,GAAG,CAACE,IAApB;AACA,cAAMC,OAAO,GAAGF,OAAO,CAACG,GAAR,CAAYC,MAAM,IAAI;AACpC,iBAAO;AACLC,YAAAA,KAAK,EAAED,MAAM,CAACE,KADT;AAELC,YAAAA,KAAK,EAAEH,MAAM,CAACG,KAFT;AAGLC,YAAAA,GAAG,EAAEJ,MAAM,CAACI,GAHP;AAILC,YAAAA,MAAM,EAAEL,MAAM,CAACK,MAJV;AAKLC,YAAAA,MAAM,EAAEN,MAAM,CAACO,KAAP,CAAaC,YALhB;AAMLC,YAAAA,QAAQ,EAAET,MAAM,CAACS,QANZ;AAOLC,YAAAA,KAAK,EAAEV,MAAM,CAACW,cAAP,CAAsBC,MAAtB,CAA6BC,QAP/B;AAQLC,YAAAA,GAAG,EAAEd,MAAM,CAACW,cAAP,CAAsBI,GAAtB,CAA0BF,QAR1B;AASLG,YAAAA,OAAO,EAAEhB,MAAM,CAACW,cAAP,CAAsBM,MAAtB,CAA6BJ,QATjC;AAULK,YAAAA,KAAK,EAAElB,MAAM,CAACW,cAAP,CAAsBQ,KAAtB,CAA4BN,QAV9B;AAWLO,YAAAA,MAAM,EAAEpB,MAAM,CAACW,cAAP,CAAsBU,EAAtB,CAAyBR;AAX5B,WAAP;AAaD,SAde,CAAhB;AAeAtB,QAAAA,OAAO,CAACO,OAAD,CAAP;AACD,OA5BC,EA6BDwB,KA7BC,CA6BKC,GAAG,IAAI/B,MAAM,CAAC+B,GAAD,CA7BlB;AA8BD,KA/BM,CAAP;AAgCA,GAlCW;AAoCbC,EAAAA,gBAAgB,EAAE,UAASnC,KAAT,EAAgB;AAChC,WAAO,IAAIC,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAsB;AACxCT,MAAAA,KAAK,CACFU,GADH,CACOP,aAAa,GAAGG,KADvB,EAC8B;AAC5B,mBAAW;AACT,2BAAiBF;AADR;AADiB,OAD9B,EAMCO,IAND,CAMMC,GAAG,IAAI;AACX,cAAM8B,WAAW,GAAG9B,GAAG,CAACE,IAAxB;AACA6B,QAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AAEA,cAAM3B,OAAO,GAAG2B,WAAW,CAAC1B,GAAZ,CAAgB6B,UAAU,IAAI;AAC5C,iBAAO;AACLC,YAAAA,YAAY,EAAED,UAAU,CAACE;AADpB,WAAP;AAGD,SAJe,CAAhB;AAKAvC,QAAAA,OAAO,CAACO,OAAD,CAAP;AACD,OAhBD,EAiBCwB,KAjBD,CAiBOC,GAAG,IAAI/B,MAAM,CAAC+B,GAAD,CAjBpB;AAkBD,KAnBM,CAAP;AAoBD;AAzDY,CAAf","sourcesContent":["import axios from \"axios\";\n\n// Recipe Search & Diet API by Edamam allows us to get recipes by searching for a particular ingredient\nconst recipeURL = \"https://edamam-recipe-search.p.rapidapi.com/search\";\nconst recipeAPI = \"435f0cdaeamshd0fe4e59b8a1c27p16ae90jsn8bb53a2736cc\";\n\n// BonAPI allows us to search for food alternatives \nconst ingredientURL = \"https://bon-api.com/api/v1/ingredient-alternatives/\";\nconst ingredientAPI = \"3112184fd50f665cccb860f7e34f8ae55ebc2ece\";\n\nexport default {\n  searchRecipe: function(query) {\n    return new Promise ((resolve, reject) => {\n      axios \n      .get(recipeURL, {\n        'headers': { \n          \"content-type\":\"application/octet-stream\",\n          \"x-rapidapi-host\":\"edamam-recipe-search.p.rapidapi.com\",\n          \"x-rapidapi-key\": recipeAPI,\n          \"useQueryString\":true,\n          \"params\":{ \"q\": query}\n      }\n    })\n    .then(res => {\n      const recipes = res.data;\n      const results = recipes.map(recipe => {\n        return {\n          title: recipe.label,\n          image: recipe.image,\n          url: recipe.url,\n          source: recipe.source,\n          labels: recipe.yield.healthLabels,\n          calories: recipe.calories,\n          carbs: recipe.totalNutrients.CHOCDF.quantity,\n          fat: recipe.totalNutrients.FAT.quantity,\n          protein: recipe.totalNutrients.PROCNT.quantity,\n          sugar: recipe.totalNutrients.SUGAR.quantity,\n          sodium: recipe.totalNutrients.NA.quantity,\n        };\n      });\n      resolve(results);\n    })\n    .catch(err => reject(err))\n    }\n  )},\n\n  searchIngredient: function(query) {\n    return new Promise ((resolve, reject ) => {\n      axios\n        .get(ingredientURL + query, {\n        'headers': {\n          'Authorization': ingredientAPI\n        }\n      })\n      .then(res => {\n        const ingredients = res.data;\n        console.log(ingredients);\n\n        const results = ingredients.map(ingredient => {\n          return {\n            substitution: ingredient.alternatives\n          };\n        })\n        resolve(results);\n      })\n      .catch(err => reject(err));\n    })\n  }\n};\n\n\n"]},"metadata":{},"sourceType":"module"}