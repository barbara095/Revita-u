{"ast":null,"code":"import React from 'react';\n\nfunction setRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (ref && 'current' in ref) {\n    ref.current = node;\n  }\n}\n/**\n * React hook that merges up to two React refs into a single memoized function React Ref\n * @param {import('react').Ref<any>} refA\n * @param {import('react').Ref<any>} [refB]\n */\n\n\nexport function useMergedRef(refA, refB) {\n  return React.useMemo(function () {\n    if (!refA && !refB) {\n      return null;\n    }\n\n    return function (node) {\n      setRef(refA, node);\n      setRef(refB, node);\n    };\n  }, [refA, refB]);\n}","map":{"version":3,"sources":["../../src/hooks/use-merged-ref.js"],"names":["ref","setRef"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA;;AAEA,SAAA,MAAA,CAAA,GAAA,EAAA,IAAA,EAA2B;AACzB,MAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;AAC7BA,IAAAA,GAAG,CAAHA,IAAG,CAAHA;AADF,GAAA,MAEO,IAAIA,GAAG,IAAI,aAAX,GAAA,EAA6B;AAClCA,IAAAA,GAAG,CAAHA,OAAAA,GAAAA,IAAAA;AACD;AACF;AAED;;;;;;;AAKA,OAAO,SAAA,YAAA,CAAA,IAAA,EAAA,IAAA,EAAkC;AACvC,SAAO,KAAK,CAAL,OAAA,CAAc,YAAM;AACzB,QAAI,CAAA,IAAA,IAAS,CAAb,IAAA,EAAoB;AAClB,aAAA,IAAA;AACD;;AAED,WAAO,UAAA,IAAA,EAAQ;AACbC,MAAAA,MAAM,CAAA,IAAA,EAANA,IAAM,CAANA;AACAA,MAAAA,MAAM,CAAA,IAAA,EAANA,IAAM,CAANA;AAFF,KAAA;AALK,GAAA,EASJ,CAAA,IAAA,EATH,IASG,CATI,CAAP;AAUD","sourcesContent":["import React from 'react'\n\nfunction setRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node)\n  } else if (ref && 'current' in ref) {\n    ref.current = node\n  }\n}\n\n/**\n * React hook that merges up to two React refs into a single memoized function React Ref\n * @param {import('react').Ref<any>} refA\n * @param {import('react').Ref<any>} [refB]\n */\nexport function useMergedRef(refA, refB) {\n  return React.useMemo(() => {\n    if (!refA && !refB) {\n      return null\n    }\n\n    return node => {\n      setRef(refA, node)\n      setRef(refB, node)\n    }\n  }, [refA, refB])\n}\n"]},"metadata":{},"sourceType":"module"}