{"ast":null,"code":"import React from 'react';\n/**\n * React hook that returns the previous value\n * @param {any} value\n */\n\nexport function usePrevious(value, initialValue) {\n  var ref = React.useRef(initialValue); // Store current value in ref, only update if the value changes\n\n  React.useEffect(function () {\n    ref.current = value;\n  }, [value]); // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}","map":{"version":3,"sources":["../../src/hooks/use-previous.js"],"names":["ref","React"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA;AAEA;;;;;AAIA,OAAO,SAAA,WAAA,CAAA,KAAA,EAAA,YAAA,EAA0C;AAC/C,MAAMA,GAAG,GAAGC,KAAK,CAALA,MAAAA,CADmC,YACnCA,CAAZ,CAD+C,CAG/C;;AACAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBD,IAAAA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;AADFC,GAAAA,EAEG,CAN4C,KAM5C,CAFHA,EAJ+C,CAQ/C;;AACA,SAAOD,GAAG,CAAV,OAAA;AACD","sourcesContent":["import React from 'react'\n\n/**\n * React hook that returns the previous value\n * @param {any} value\n */\nexport function usePrevious(value, initialValue) {\n  const ref = React.useRef(initialValue)\n\n  // Store current value in ref, only update if the value changes\n  React.useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current\n}\n"]},"metadata":{},"sourceType":"module"}