{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport ScrollbarSize from './ScrollbarSize';\nvar TableHead = memo(function TableHead(props) {\n  var children = props.children,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      _props$accountForScro = props.accountForScrollbar,\n      accountForScrollbar = _props$accountForScro === void 0 ? true : _props$accountForScro,\n      rest = _objectWithoutProperties(props, [\"children\", \"height\", \"accountForScrollbar\"]);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      scrollbarWidth = _useState2[0],\n      setScrollBarWidth = _useState2[1];\n\n  var handleScrollbarSize = useCallback(function (width) {\n    setScrollBarWidth(width);\n  });\n  return React.createElement(Pane, _extends({\n    display: \"flex\",\n    flexShrink: 0,\n    paddingRight: scrollbarWidth,\n    borderBottom: \"default\",\n    background: \"tint2\",\n    height: height\n  }, rest), children, ' ', accountForScrollbar && React.createElement(ScrollbarSize, {\n    handleScrollbarSize: handleScrollbarSize\n  }));\n});\nTableHead.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * The height of the table head.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * This should always be true if you are using TableHead together with a TableBody.\n   * Because TableBody has `overflowY: scroll` by default.\n   */\n  accountForScrollbar: PropTypes.bool\n});\nexport default TableHead;","map":{"version":3,"sources":["../../../src/table/src/TableHead.js"],"names":["TableHead","memo","children","height","accountForScrollbar","rest","props","scrollbarWidth","setScrollBarWidth","useState","handleScrollbarSize","useCallback","Pane","PropTypes","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,QAAA,EAAA,WAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,IAAA,QAAA,cAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AAEA,IAAMA,SAAS,GAAGC,IAAI,CAAC,SAAA,SAAA,CAAA,KAAA,EAA0B;AAAA,MACvCC,QADuC,GACwBI,KADxB,CAAA,QAAA;AAAA,MAAA,aAAA,GACwBA,KADxB,CAAA,MAAA;AAAA,MAC7BH,MAD6B,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,aAAA;AAAA,MAAA,qBAAA,GACwBG,KADxB,CAAA,mBAAA;AAAA,MAChBF,mBADgB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,qBAAA;AAAA,MACeC,IADf,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,QAAA,EAAA,qBAAA,CAAA,CAAA;;AAAA,MAAA,SAAA,GAEHI,QAAQ,CAFL,CAEK,CAFL;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAExCF,cAFwC,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAExBC,iBAFwB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAI/C,MAAME,mBAAmB,GAAGC,WAAW,CAAC,UAAA,KAAA,EAAS;AAC/CH,IAAAA,iBAAiB,CAAjBA,KAAiB,CAAjBA;AADF,GAAuC,CAAvC;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,OAAO,EADT,MAAA;AAEE,IAAA,UAAU,EAFZ,CAAA;AAGE,IAAA,YAAY,EAHd,cAAA;AAIE,IAAA,YAAY,EAJd,SAAA;AAKE,IAAA,UAAU,EALZ,OAAA;AAME,IAAA,MAAM,EAAEL;AANV,GAAA,EAAA,IAAA,CAAA,EAAA,QAAA,EAAA,GAAA,EAUGC,mBAAmB,IAClB,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,mBAAmB,EAAEM;AAApC,GAAA,CAXJ,CADF;AARF,CAAsB,CAAtB;AA0BAV,SAAS,CAATA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAIKY,IAAI,CAJTZ,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAME;;;AAGAG,EAAAA,MAAM,EAAEU,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAT1Db,MAS8B,CAApBa,CATVb;;AAWE;;;;AAIAI,EAAAA,mBAAmB,EAAES,SAAS,CAACC;AAfjCd,CAAAA,CAAAA;AAkBA,eAAA,SAAA","sourcesContent":["import React, { memo, useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { Pane } from '../../layers'\nimport ScrollbarSize from './ScrollbarSize'\n\nconst TableHead = memo(function TableHead(props) {\n  const { children, height = 32, accountForScrollbar = true, ...rest } = props\n  const [scrollbarWidth, setScrollBarWidth] = useState(0)\n\n  const handleScrollbarSize = useCallback(width => {\n    setScrollBarWidth(width)\n  })\n\n  return (\n    <Pane\n      display=\"flex\"\n      flexShrink={0}\n      paddingRight={scrollbarWidth}\n      borderBottom=\"default\"\n      background=\"tint2\"\n      height={height}\n      {...rest}\n    >\n      {children}{' '}\n      {accountForScrollbar && (\n        <ScrollbarSize handleScrollbarSize={handleScrollbarSize} />\n      )}\n    </Pane>\n  )\n})\n\nTableHead.propTypes = {\n  /**\n   * Composes the Pane component as the base.\n   */\n  ...Pane.propTypes,\n\n  /**\n   * The height of the table head.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * This should always be true if you are using TableHead together with a TableBody.\n   * Because TableBody has `overflowY: scroll` by default.\n   */\n  accountForScrollbar: PropTypes.bool\n}\n\nexport default TableHead\n"]},"metadata":{},"sourceType":"module"}