{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { splitBoxProps } from 'ui-box';\nimport { FormField } from '../../form-field';\nimport { useId } from '../../hooks';\nimport Select from './Select';\nvar SelectField = memo(function SelectField(props) {\n  var id = useId('SelectField', props.id);\n\n  var unusedId = props.id,\n      hint = props.hint,\n      label = props.label,\n      description = props.description,\n      validationMessage = props.validationMessage,\n      _props$inputHeight = props.inputHeight,\n      inputHeight = _props$inputHeight === void 0 ? 32 : _props$inputHeight,\n      _props$inputWidth = props.inputWidth,\n      inputWidth = _props$inputWidth === void 0 ? '100%' : _props$inputWidth,\n      disabled = props.disabled,\n      required = props.required,\n      isInvalid = props.isInvalid,\n      appearance = props.appearance,\n      rest = _objectWithoutProperties(props, [\"id\", \"hint\", \"label\", \"description\", \"validationMessage\", \"inputHeight\", \"inputWidth\", \"disabled\", \"required\", \"isInvalid\", \"appearance\"]);\n  /**\n   * Split the wrapper props from the input props.\n   */\n\n\n  var _splitBoxProps = splitBoxProps(rest),\n      matchedProps = _splitBoxProps.matchedProps,\n      remainingProps = _splitBoxProps.remainingProps;\n\n  return React.createElement(FormField, _extends({\n    marginBottom: 24,\n    label: label,\n    isRequired: required,\n    hint: hint,\n    description: description,\n    validationMessage: validationMessage,\n    labelFor: id\n  }, matchedProps), React.createElement(Select, _extends({\n    id: id,\n    width: inputWidth,\n    height: inputHeight,\n    disabled: disabled,\n    required: required,\n    isInvalid: isInvalid,\n    appearance: appearance\n  }, remainingProps)));\n});\nSelectField.propTypes = _objectSpread(_objectSpread(_objectSpread({}, Select.propTypes), FormField.propTypes), {}, {\n  /**\n   * The label used above the input element.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Passed on the label as a htmlFor prop.\n   */\n  labelFor: PropTypes.string,\n\n  /**\n   * Whether or not to show an asterix after the label.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * An optional description of the field under the label, above the input element.\n   */\n  description: PropTypes.node,\n\n  /**\n   * An optional hint under the input element.\n   */\n  hint: PropTypes.node,\n\n  /**\n   * If a validation message is passed it is shown under the input element\n   * and above the hint. This is unaffected by `isInvalid`.\n   */\n  validationMessage: PropTypes.node,\n\n  /**\n   * The height of the input element.\n   */\n  inputHeight: PropTypes.number,\n\n  /**\n   * The width of the input width.\n   */\n  inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n});\nexport default SelectField;","map":{"version":3,"sources":["../../../src/select/src/SelectField.js"],"names":["SelectField","memo","id","useId","props","unusedId","hint","label","description","validationMessage","inputHeight","inputWidth","disabled","required","isInvalid","appearance","rest","matchedProps","remainingProps","splitBoxProps","Select","FormField","PropTypes","labelFor"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { splitBoxProps } from 'ui-box'\nimport { FormField } from '../../form-field'\nimport { useId } from '../../hooks'\nimport Select from './Select'\n\nconst SelectField = memo(function SelectField(props) {\n  const id = useId('SelectField', props.id)\n\n  const {\n    // We are using the id from the state\n    id: unusedId,\n\n    // FormField props\n    hint,\n    label,\n    description,\n    validationMessage,\n\n    // TextInput props\n    inputHeight = 32,\n    /** The input width should be as wide as the form field. */\n    inputWidth = '100%',\n    disabled,\n    required,\n    isInvalid,\n    appearance,\n\n    // Rest props are spread on the FormField\n    ...rest\n  } = props\n\n  /**\n   * Split the wrapper props from the input props.\n   */\n  const { matchedProps, remainingProps } = splitBoxProps(rest)\n\n  return (\n    <FormField\n      marginBottom={24}\n      label={label}\n      isRequired={required}\n      hint={hint}\n      description={description}\n      validationMessage={validationMessage}\n      labelFor={id}\n      {...matchedProps}\n    >\n      <Select\n        id={id}\n        width={inputWidth}\n        height={inputHeight}\n        disabled={disabled}\n        required={required}\n        isInvalid={isInvalid}\n        appearance={appearance}\n        {...remainingProps}\n      />\n    </FormField>\n  )\n})\n\nSelectField.propTypes = {\n  /**\n   * Composes the Select component as the base.\n   */\n  ...Select.propTypes,\n  ...FormField.propTypes,\n\n  /**\n   * The label used above the input element.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Passed on the label as a htmlFor prop.\n   */\n  labelFor: PropTypes.string,\n\n  /**\n   * Whether or not to show an asterix after the label.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * An optional description of the field under the label, above the input element.\n   */\n  description: PropTypes.node,\n\n  /**\n   * An optional hint under the input element.\n   */\n  hint: PropTypes.node,\n\n  /**\n   * If a validation message is passed it is shown under the input element\n   * and above the hint. This is unaffected by `isInvalid`.\n   */\n  validationMessage: PropTypes.node,\n\n  /**\n   * The height of the input element.\n   */\n  inputHeight: PropTypes.number,\n\n  /**\n   * The width of the input width.\n   */\n  inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n}\n\nexport default SelectField\n"]},"metadata":{},"sourceType":"module"}