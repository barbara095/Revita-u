{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Text } from '../../typography';\nimport { useTheme } from '../../theme';\nvar TextInput = memo(forwardRef(function TextInput(props, ref) {\n  var className = props.className,\n      required = props.required,\n      placeholder = props.placeholder,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 280 : _props$width,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$isInvalid = props.isInvalid,\n      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      _props$spellCheck = props.spellCheck,\n      spellCheck = _props$spellCheck === void 0 ? true : _props$spellCheck,\n      restProps = _objectWithoutProperties(props, [\"className\", \"required\", \"placeholder\", \"width\", \"height\", \"disabled\", \"isInvalid\", \"appearance\", \"spellCheck\"]);\n\n  var theme = useTheme();\n  var themedClassName = theme.getTextInputClassName(appearance);\n  var textSize = theme.getTextSizeForControlHeight(height);\n  var borderRadius = theme.getBorderRadiusForControlHeight(height);\n  return React.createElement(Text, _extends({\n    is: \"input\",\n    className: cx(themedClassName, className),\n    type: \"text\",\n    size: textSize,\n    width: width,\n    height: height,\n    required: required,\n    disabled: disabled,\n    placeholder: placeholder,\n    paddingLeft: Math.round(height / 3.2),\n    paddingRight: Math.round(height / 3.2),\n    borderRadius: borderRadius,\n    spellCheck: spellCheck,\n    \"aria-invalid\": isInvalid\n  }, disabled ? {\n    color: 'muted'\n  } : {}, {\n    ref: ref\n  }, restProps));\n}));\nTextInput.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  /**\n   * Makes the input element required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets visual styling of _only_ the text input to be \"invalid\".\n   * Note that this does not effect any `validationMessage`.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Use the native spell check functionality of the browser.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The appearance of the TextInput.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The width of the TextInput.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default TextInput;","map":{"version":3,"sources":["../../../src/text-input/src/TextInput.js"],"names":["TextInput","memo","forwardRef","className","required","placeholder","width","height","disabled","isInvalid","appearance","spellCheck","restProps","props","theme","useTheme","themedClassName","textSize","borderRadius","cx","Math","color","ref","Text","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { Text } from '../../typography'\nimport { useTheme } from '../../theme'\n\nconst TextInput = memo(\n  forwardRef(function TextInput(props, ref) {\n    const {\n      className,\n      required,\n      placeholder,\n      width = 280,\n      height = 32,\n      disabled = false,\n      isInvalid = false,\n      appearance = 'default',\n      spellCheck = true,\n      ...restProps\n    } = props\n    const theme = useTheme()\n\n    const themedClassName = theme.getTextInputClassName(appearance)\n    const textSize = theme.getTextSizeForControlHeight(height)\n    const borderRadius = theme.getBorderRadiusForControlHeight(height)\n\n    return (\n      <Text\n        is=\"input\"\n        className={cx(themedClassName, className)}\n        type=\"text\"\n        size={textSize}\n        width={width}\n        height={height}\n        required={required}\n        disabled={disabled}\n        placeholder={placeholder}\n        paddingLeft={Math.round(height / 3.2)}\n        paddingRight={Math.round(height / 3.2)}\n        borderRadius={borderRadius}\n        spellCheck={spellCheck}\n        aria-invalid={isInvalid}\n        {...(disabled ? { color: 'muted' } : {})}\n        ref={ref}\n        {...restProps}\n      />\n    )\n  })\n)\n\nTextInput.propTypes = {\n  /**\n   * Composes the Text component as the base.\n   */\n  ...Text.propTypes,\n\n  /**\n   * Makes the input element required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets visual styling of _only_ the text input to be \"invalid\".\n   * Note that this does not effect any `validationMessage`.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Use the native spell check functionality of the browser.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The appearance of the TextInput.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The width of the TextInput.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default TextInput\n"]},"metadata":{},"sourceType":"module"}