{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Text } from '../../typography';\nimport { useTheme } from '../../theme';\nvar styles = {\n  minHeight: 80,\n  paddingX: 10,\n  paddingY: 8\n};\nvar Textarea = memo(forwardRef(function Textarea(props, ref) {\n  var theme = useTheme();\n\n  var className = props.className,\n      _props$width = props.width,\n      width = _props$width === void 0 ? '100%' : _props$width,\n      height = props.height,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      required = props.required,\n      _props$isInvalid = props.isInvalid,\n      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      placeholder = props.placeholder,\n      _props$spellCheck = props.spellCheck,\n      spellCheck = _props$spellCheck === void 0 ? true : _props$spellCheck,\n      _props$grammarly = props.grammarly,\n      grammarly = _props$grammarly === void 0 ? false : _props$grammarly,\n      restProps = _objectWithoutProperties(props, [\"className\", \"width\", \"height\", \"disabled\", \"required\", \"isInvalid\", \"appearance\", \"placeholder\", \"spellCheck\", \"grammarly\"]);\n\n  var themedClassName = theme.getTextareaClassName(appearance);\n  return React.createElement(Text, _extends({\n    is: \"textarea\",\n    ref: ref,\n    className: cx(themedClassName, className),\n    size: 400,\n    width: width,\n    height: height,\n    required: required,\n    disabled: disabled,\n    placeholder: placeholder,\n    paddingLeft: Math.round(height / 3.2),\n    paddingRight: Math.round(height / 3.2),\n    borderRadius: 3,\n    spellCheck: spellCheck,\n    \"aria-invalid\": isInvalid,\n    \"data-gramm_editor\": grammarly\n  }, disabled ? {\n    color: 'muted'\n  } : {}, styles, restProps));\n}));\nTextarea.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  /**\n   * Makes the textarea element required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Makes the textarea element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets visual styling of _only_ the text area to be \"invalid\".\n   * Note that this does not effect any `validationMessage`.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Use the native spell check functionality of the browser.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * Allow the Grammarly browser extension to attach to the backing textarea.\n   */\n  grammarly: PropTypes.bool,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The appearance of the TextInput.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The width of the TextInput.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default Textarea;","map":{"version":3,"sources":["../../../src/textarea/src/Textarea.js"],"names":["styles","minHeight","paddingX","paddingY","Textarea","memo","forwardRef","theme","useTheme","className","width","height","disabled","required","isInvalid","appearance","placeholder","spellCheck","grammarly","restProps","props","themedClassName","cx","Math","color","Text","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { Text } from '../../typography'\nimport { useTheme } from '../../theme'\n\nconst styles = {\n  minHeight: 80,\n  paddingX: 10,\n  paddingY: 8\n}\n\nconst Textarea = memo(\n  forwardRef(function Textarea(props, ref) {\n    const theme = useTheme()\n    const {\n      className,\n      width = '100%',\n      height,\n      disabled = false,\n      required,\n      isInvalid = false,\n      appearance = 'default',\n      placeholder,\n      spellCheck = true,\n      grammarly = false,\n      ...restProps\n    } = props\n\n    const themedClassName = theme.getTextareaClassName(appearance)\n\n    return (\n      <Text\n        is=\"textarea\"\n        ref={ref}\n        className={cx(themedClassName, className)}\n        size={400}\n        width={width}\n        height={height}\n        required={required}\n        disabled={disabled}\n        placeholder={placeholder}\n        paddingLeft={Math.round(height / 3.2)}\n        paddingRight={Math.round(height / 3.2)}\n        borderRadius={3}\n        spellCheck={spellCheck}\n        aria-invalid={isInvalid}\n        data-gramm_editor={grammarly}\n        {...(disabled ? { color: 'muted' } : {})}\n        {...styles}\n        {...restProps}\n      />\n    )\n  })\n)\n\nTextarea.propTypes = {\n  /**\n   * Composes the Text component as the base.\n   */\n  ...Text.propTypes,\n\n  /**\n   * Makes the textarea element required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Makes the textarea element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets visual styling of _only_ the text area to be \"invalid\".\n   * Note that this does not effect any `validationMessage`.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Use the native spell check functionality of the browser.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * Allow the Grammarly browser extension to attach to the backing textarea.\n   */\n  grammarly: PropTypes.bool,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The appearance of the TextInput.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The width of the TextInput.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default Textarea\n"]},"metadata":{},"sourceType":"module"}