{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport { Text } from '../../typography';\nimport { Spinner } from '../../spinner';\nimport { useTheme } from '../../theme';\n/* eslint-disable-next-line react/prop-types */\n\nvar ButtonIcon = memo(function ButtonIcon(_ref) {\n  var icon = _ref.icon,\n      size = _ref.size,\n      spacing = _ref.spacing,\n      edge = _ref.edge;\n  if (!icon) return null;\n  var edgeMargin = -Math.round(spacing * 0.2);\n  var innerMargin = Math.round(size * 0.7);\n  var marginLeft = edge === 'start' ? edgeMargin : innerMargin;\n  var marginRight = edge === 'end' ? edgeMargin : innerMargin;\n  return React.createElement(IconWrapper, {\n    icon: icon,\n    size: size,\n    marginLeft: marginLeft,\n    marginRight: marginRight\n  });\n});\nvar styles = {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n};\nvar Button = memo(forwardRef(function Button(props, ref) {\n  var theme = useTheme();\n\n  var className = props.className,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      _props$isActive = props.isActive,\n      isActive = _props$isActive === void 0 ? false : _props$isActive,\n      children = props.children,\n      disabled = props.disabled,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      isLoading = props.isLoading,\n      paddingRight = props.paddingRight,\n      paddingLeft = props.paddingLeft,\n      _props$paddingTop = props.paddingTop,\n      paddingTop = _props$paddingTop === void 0 ? 0 : _props$paddingTop,\n      _props$paddingBottom = props.paddingBottom,\n      paddingBottom = _props$paddingBottom === void 0 ? 0 : _props$paddingBottom,\n      iconBefore = props.iconBefore,\n      iconAfter = props.iconAfter,\n      restProps = _objectWithoutProperties(props, [\"className\", \"intent\", \"height\", \"isActive\", \"children\", \"disabled\", \"appearance\", \"isLoading\", \"paddingRight\", \"paddingLeft\", \"paddingTop\", \"paddingBottom\", \"iconBefore\", \"iconAfter\"]);\n\n  var themedClassName = theme.getButtonClassName(appearance, intent);\n  var textSize = theme.getTextSizeForControlHeight(height);\n  var borderRadius = theme.getBorderRadiusForControlHeight(height);\n  var iconSize = theme.getIconSizeForButton(height);\n  var padding = Math.round(height / 2);\n  var pr = paddingRight !== undefined ? paddingRight : padding; // eslint-disable-line no-negated-condition\n\n  var pl = paddingLeft !== undefined ? paddingLeft : padding; // eslint-disable-line no-negated-condition\n\n  return React.createElement(Text, _extends({\n    is: \"button\",\n    ref: ref,\n    className: cx(themedClassName, className),\n    borderTopRightRadius: borderRadius,\n    borderBottomRightRadius: borderRadius,\n    borderTopLeftRadius: borderRadius,\n    borderBottomLeftRadius: borderRadius,\n    paddingTop: paddingTop,\n    paddingBottom: paddingBottom,\n    paddingRight: pr,\n    paddingLeft: pl,\n    marginLeft: 0 // Removes weird margins in Safari\n    ,\n    marginRight: 0 // Removes weird margins in Safari\n    ,\n    marginTop: 0 // Removes weird margins in Safari\n    ,\n    marginBottom: 0 // Removes weird margins in Safari\n    ,\n    size: textSize,\n    color: null // Prevent the Text color overriding the glamor appearanceStyle color\n    ,\n    height: height,\n    lineHeight: \"\".concat(height, \"px\")\n  }, isActive ? {\n    'data-active': true\n  } : {}, styles, restProps, {\n    disabled: disabled || isLoading\n  }), isLoading && React.createElement(Spinner, {\n    marginLeft: -Math.round(height / 8),\n    marginRight: Math.round(height / 4),\n    size: Math.round(height / 2)\n  }), React.createElement(ButtonIcon, {\n    icon: iconBefore,\n    size: iconSize,\n    spacing: pl,\n    edge: \"start\"\n  }), children, React.createElement(ButtonIcon, {\n    icon: iconAfter,\n    size: iconSize,\n    spacing: pr,\n    edge: \"end\"\n  }));\n}));\nButton.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),\n\n  /**\n   * When true, show a loading spinner before the children.\n   * This also disables the button.\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Sets an icon before the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconBefore: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Sets an icon after the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconAfter: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default Button;","map":{"version":3,"sources":["../../../src/buttons/src/Button.js"],"names":["ButtonIcon","memo","icon","size","spacing","edge","edgeMargin","Math","innerMargin","marginLeft","marginRight","styles","position","fontFamily","fontWeight","display","alignItems","flexWrap","Button","forwardRef","theme","useTheme","className","intent","height","isActive","children","disabled","appearance","isLoading","paddingRight","paddingLeft","paddingTop","paddingBottom","iconBefore","iconAfter","restProps","props","themedClassName","textSize","borderRadius","iconSize","padding","pr","pl","cx","dimensions","layout","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { IconWrapper } from '../../icons/src/IconWrapper'\nimport { Text } from '../../typography'\nimport { Spinner } from '../../spinner'\nimport { useTheme } from '../../theme'\n\n/* eslint-disable-next-line react/prop-types */\nconst ButtonIcon = memo(function ButtonIcon({ icon, size, spacing, edge }) {\n  if (!icon) return null\n\n  const edgeMargin = -Math.round(spacing * 0.2)\n  const innerMargin = Math.round(size * 0.7)\n  const marginLeft = edge === 'start' ? edgeMargin : innerMargin\n  const marginRight = edge === 'end' ? edgeMargin : innerMargin\n\n  return (\n    <IconWrapper\n      icon={icon}\n      size={size}\n      marginLeft={marginLeft}\n      marginRight={marginRight}\n    />\n  )\n})\n\nconst styles = {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n}\n\nconst Button = memo(\n  forwardRef(function Button(props, ref) {\n    const theme = useTheme()\n\n    const {\n      className,\n\n      intent = 'none',\n      height = 32,\n      isActive = false,\n      children,\n      disabled,\n      appearance = 'default',\n      isLoading,\n\n      // Paddings\n      paddingRight,\n      paddingLeft,\n      paddingTop = 0,\n      paddingBottom = 0,\n\n      // Icons\n      iconBefore,\n      iconAfter,\n\n      ...restProps\n    } = props\n\n    const themedClassName = theme.getButtonClassName(appearance, intent)\n    const textSize = theme.getTextSizeForControlHeight(height)\n\n    const borderRadius = theme.getBorderRadiusForControlHeight(height)\n    const iconSize = theme.getIconSizeForButton(height)\n\n    const padding = Math.round(height / 2)\n    const pr = paddingRight !== undefined ? paddingRight : padding // eslint-disable-line no-negated-condition\n    const pl = paddingLeft !== undefined ? paddingLeft : padding // eslint-disable-line no-negated-condition\n\n    return (\n      <Text\n        is=\"button\"\n        ref={ref}\n        className={cx(themedClassName, className)}\n        borderTopRightRadius={borderRadius}\n        borderBottomRightRadius={borderRadius}\n        borderTopLeftRadius={borderRadius}\n        borderBottomLeftRadius={borderRadius}\n        paddingTop={paddingTop}\n        paddingBottom={paddingBottom}\n        paddingRight={pr}\n        paddingLeft={pl}\n        marginLeft={0} // Removes weird margins in Safari\n        marginRight={0} // Removes weird margins in Safari\n        marginTop={0} // Removes weird margins in Safari\n        marginBottom={0} // Removes weird margins in Safari\n        size={textSize}\n        color={null} // Prevent the Text color overriding the glamor appearanceStyle color\n        height={height}\n        lineHeight={`${height}px`}\n        {...(isActive ? { 'data-active': true } : {})}\n        {...styles}\n        {...restProps}\n        disabled={disabled || isLoading}\n      >\n        {isLoading && (\n          <Spinner\n            marginLeft={-Math.round(height / 8)}\n            marginRight={Math.round(height / 4)}\n            size={Math.round(height / 2)}\n          />\n        )}\n        <ButtonIcon\n          icon={iconBefore}\n          size={iconSize}\n          spacing={pl}\n          edge=\"start\"\n        />\n        {children}\n        <ButtonIcon icon={iconAfter} size={iconSize} spacing={pr} edge=\"end\" />\n      </Text>\n    )\n  })\n)\n\nButton.propTypes = {\n  /**\n   * Composes the dimensions spec from the Box primitive.\n   */\n  ...dimensions.propTypes,\n\n  /**\n   * Composes the spacing spec from the Box primitive.\n   */\n  ...spacing.propTypes,\n\n  /**\n   * Composes the position spec from the Box primitive.\n   */\n  ...position.propTypes,\n\n  /**\n   * Composes the layout spec from the Box primitive.\n   */\n  ...layout.propTypes,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),\n\n  /**\n   * When true, show a loading spinner before the children.\n   * This also disables the button.\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Sets an icon before the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconBefore: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Sets an icon after the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconAfter: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default Button\n"]},"metadata":{},"sourceType":"module"}