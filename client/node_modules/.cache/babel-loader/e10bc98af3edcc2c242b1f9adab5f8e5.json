{"ast":null,"code":"import themedProperty from '../utils/themedProperty';\nimport { colors, elevations } from '../foundational-styles';\nimport { fontFamilies, headings, paragraph, text } from '../typography';\n/**\n * Controls include:\n * - Button\n * - IconButton\n * - TextInput\n * @param {number} height\n * @return {number} border radius\n */\n\nvar getBorderRadiusForControlHeight = function getBorderRadiusForControlHeight(height) {\n  if (height <= 40) return 3;\n  return 4;\n};\n/**\n * Get the text size for a control with a certain height.\n * @param {number} height\n * @return {number} text size of the control height.\n */\n\n\nvar getTextSizeForControlHeight = function getTextSizeForControlHeight(height) {\n  if (height <= 24) return 300;\n  if (height <= 28) return 300;\n  if (height <= 32) return 300;\n  if (height <= 36) return 400;\n  if (height <= 40) return 400;\n  return 500;\n};\n/**\n * Get the size for a icon in a Button with a certain height.\n * @param {number} height\n * @return {number} icon size\n */\n\n\nvar getIconSizeForButton = function getIconSizeForButton(height) {\n  if (height <= 28) return 12;\n  if (height <= 32) return 12;\n  if (height <= 40) return 16;\n  if (height <= 48) return 18;\n  return 20;\n}; // Use the same for input components.\n\n\nvar getIconSizeForInput = getIconSizeForButton;\nvar getIconSizeForSelect = getIconSizeForButton;\n/**\n * Get the size for a icon in a IconButton with a certain height.\n * @param {number} height\n * @return {number} icon size\n */\n\nvar getIconSizeForIconButton = function getIconSizeForIconButton(height) {\n  if (height <= 28) return 12;\n  if (height <= 32) return 14; // Slightly bigger than getIconSizeForButton\n\n  if (height <= 40) return 16;\n  if (height <= 48) return 18;\n  return 20;\n};\n/**\n * Get background property.\n * @param {string} background\n * @return {string} background property.\n */\n\n\nvar getBackground = function getBackground(background) {\n  /**\n   * Return one of theme presets or the original value.\n   */\n  return themedProperty(colors.background, background);\n};\n/**\n * Get box-shadow (elevation).\n * @param {string} level — level of elevation.\n * @return {string} elevation box-shadow.\n */\n\n\nvar getElevation = function getElevation(level) {\n  /**\n   * There is no fallback, undefined will be returned.\n   */\n  return elevations[level];\n};\n/**\n * Get the color for an icon.\n * @param {string} color\n * @return {string} color of the icon\n */\n\n\nvar getIconColor = function getIconColor(color) {\n  /**\n   * Check if there is a preset in the theme for the icon color.\n   */\n  return themedProperty(colors.icon, color);\n};\n/**\n * Heading styles.\n * @param {number} size - 100–900. 500 is default.\n * @return {Object} heading style.\n */\n\n\nvar getHeadingStyle = function getHeadingStyle(size) {\n  return themedProperty(headings, String(size));\n};\n/**\n * Text styles for single line text.\n * This is used in the Text component. The Text component is used by:\n * - Small\n * - Strong\n * - Code\n * - ListItem\n * - Label\n * @param {number} size - 300–500. 400 is default.\n * @return {Object} text style.\n */\n\n\nvar getTextStyle = function getTextStyle(size) {\n  return themedProperty(text, String(size));\n};\n/**\n * Text styles for paragraphs (multi line text).\n * This is used in the Paragraph.\n * @param {number} size - 300–500. 400 is default.\n * @return {Object} text style.\n */\n\n\nvar getParagraphStyle = function getParagraphStyle(size) {\n  return themedProperty(paragraph, String(size));\n};\n/**\n * Get the font family. This is used to override the font family.\n * @param {string} fontFamily\n * @return {string} font family\n */\n\n\nvar getFontFamily = function getFontFamily(fontFamily) {\n  /**\n   * Allow for passing in a custom fontFamily not in the theme.\n   */\n  return themedProperty(fontFamilies, fontFamily);\n};\n/**\n * Get the text color. This is used to override the color.\n * @param {string} fontFamily\n * @return {string} font family\n */\n\n\nvar getTextColor = function getTextColor(color) {\n  /**\n   * Allow for passing in a custom text color not in the theme.\n   */\n  return themedProperty(colors.text, color);\n};\n\nexport { getBorderRadiusForControlHeight, getTextSizeForControlHeight, getIconSizeForButton, getIconSizeForInput, getIconSizeForSelect, getIconSizeForIconButton, getBackground, getElevation, getIconColor, getHeadingStyle, getTextStyle, getParagraphStyle, getFontFamily, getTextColor };","map":{"version":3,"sources":["../../../../../src/theme/src/default-theme/theme-helpers/index.js"],"names":["getBorderRadiusForControlHeight","height","getTextSizeForControlHeight","getIconSizeForButton","getIconSizeForInput","getIconSizeForSelect","getIconSizeForIconButton","getBackground","themedProperty","colors","getElevation","elevations","getIconColor","getHeadingStyle","String","getTextStyle","getParagraphStyle","getFontFamily","getTextColor"],"mappings":"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","sourcesContent":["import themedProperty from '../utils/themedProperty'\nimport { colors, elevations } from '../foundational-styles'\nimport { fontFamilies, headings, paragraph, text } from '../typography'\n\n/**\n * Controls include:\n * - Button\n * - IconButton\n * - TextInput\n * @param {number} height\n * @return {number} border radius\n */\nconst getBorderRadiusForControlHeight = height => {\n  if (height <= 40) return 3\n  return 4\n}\n\n/**\n * Get the text size for a control with a certain height.\n * @param {number} height\n * @return {number} text size of the control height.\n */\nconst getTextSizeForControlHeight = height => {\n  if (height <= 24) return 300\n  if (height <= 28) return 300\n  if (height <= 32) return 300\n  if (height <= 36) return 400\n  if (height <= 40) return 400\n  return 500\n}\n\n/**\n * Get the size for a icon in a Button with a certain height.\n * @param {number} height\n * @return {number} icon size\n */\nconst getIconSizeForButton = height => {\n  if (height <= 28) return 12\n  if (height <= 32) return 12\n  if (height <= 40) return 16\n  if (height <= 48) return 18\n  return 20\n}\n\n// Use the same for input components.\nconst getIconSizeForInput = getIconSizeForButton\nconst getIconSizeForSelect = getIconSizeForButton\n\n/**\n * Get the size for a icon in a IconButton with a certain height.\n * @param {number} height\n * @return {number} icon size\n */\nconst getIconSizeForIconButton = height => {\n  if (height <= 28) return 12\n  if (height <= 32) return 14 // Slightly bigger than getIconSizeForButton\n  if (height <= 40) return 16\n  if (height <= 48) return 18\n  return 20\n}\n\n/**\n * Get background property.\n * @param {string} background\n * @return {string} background property.\n */\nconst getBackground = background => {\n  /**\n   * Return one of theme presets or the original value.\n   */\n  return themedProperty(colors.background, background)\n}\n\n/**\n * Get box-shadow (elevation).\n * @param {string} level — level of elevation.\n * @return {string} elevation box-shadow.\n */\nconst getElevation = level => {\n  /**\n   * There is no fallback, undefined will be returned.\n   */\n  return elevations[level]\n}\n\n/**\n * Get the color for an icon.\n * @param {string} color\n * @return {string} color of the icon\n */\nconst getIconColor = color => {\n  /**\n   * Check if there is a preset in the theme for the icon color.\n   */\n  return themedProperty(colors.icon, color)\n}\n\n/**\n * Heading styles.\n * @param {number} size - 100–900. 500 is default.\n * @return {Object} heading style.\n */\nconst getHeadingStyle = size => {\n  return themedProperty(headings, String(size))\n}\n\n/**\n * Text styles for single line text.\n * This is used in the Text component. The Text component is used by:\n * - Small\n * - Strong\n * - Code\n * - ListItem\n * - Label\n * @param {number} size - 300–500. 400 is default.\n * @return {Object} text style.\n */\nconst getTextStyle = size => {\n  return themedProperty(text, String(size))\n}\n\n/**\n * Text styles for paragraphs (multi line text).\n * This is used in the Paragraph.\n * @param {number} size - 300–500. 400 is default.\n * @return {Object} text style.\n */\nconst getParagraphStyle = size => {\n  return themedProperty(paragraph, String(size))\n}\n\n/**\n * Get the font family. This is used to override the font family.\n * @param {string} fontFamily\n * @return {string} font family\n */\nconst getFontFamily = fontFamily => {\n  /**\n   * Allow for passing in a custom fontFamily not in the theme.\n   */\n  return themedProperty(fontFamilies, fontFamily)\n}\n\n/**\n * Get the text color. This is used to override the color.\n * @param {string} fontFamily\n * @return {string} font family\n */\nconst getTextColor = color => {\n  /**\n   * Allow for passing in a custom text color not in the theme.\n   */\n  return themedProperty(colors.text, color)\n}\n\nexport {\n  getBorderRadiusForControlHeight,\n  getTextSizeForControlHeight,\n  getIconSizeForButton,\n  getIconSizeForInput,\n  getIconSizeForSelect,\n  getIconSizeForIconButton,\n  getBackground,\n  getElevation,\n  getIconColor,\n  getHeadingStyle,\n  getTextStyle,\n  getParagraphStyle,\n  getFontFamily,\n  getTextColor\n}\n"]},"metadata":{},"sourceType":"module"}