{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { useState, memo, forwardRef } from 'react';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { Image } from '../../image';\nimport { Text } from '../../typography';\nimport { useTheme } from '../../theme';\nimport globalGetInitials from './utils/getInitials';\nimport globalHash from './utils/hash';\nvar isObjectFitSupported = typeof document !== 'undefined' && 'objectFit' in document.documentElement.style;\nvar initialsStyleClass = css({\n  top: 0,\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  lineHeight: 1\n}).toString();\n\nfunction getColorProps(_ref) {\n  var isSolid = _ref.isSolid,\n      theme = _ref.theme,\n      color = _ref.color,\n      name = _ref.name,\n      propsHashValue = _ref.propsHashValue;\n\n  if (color === 'automatic') {\n    var hashValue = globalHash(propsHashValue || name);\n    return theme.getAvatarProps({\n      isSolid: isSolid,\n      color: color,\n      hashValue: hashValue\n    });\n  }\n\n  return theme.getAvatarProps({\n    isSolid: isSolid,\n    color: color\n  });\n}\n\nvar Avatar = memo(forwardRef(function Avatar(props, ref) {\n  var src = props.src,\n      name = props.name,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 24 : _props$size,\n      _props$isSolid = props.isSolid,\n      isSolid = _props$isSolid === void 0 ? false : _props$isSolid,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'automatic' : _props$color,\n      _props$forceShowIniti = props.forceShowInitials,\n      forceShowInitials = _props$forceShowIniti === void 0 ? false : _props$forceShowIniti,\n      _props$sizeLimitOneCh = props.sizeLimitOneCharacter,\n      sizeLimitOneCharacter = _props$sizeLimitOneCh === void 0 ? 20 : _props$sizeLimitOneCh,\n      _props$getInitials = props.getInitials,\n      getInitials = _props$getInitials === void 0 ? globalGetInitials : _props$getInitials,\n      propsHashValue = props.hashValue,\n      restProps = _objectWithoutProperties(props, [\"src\", \"name\", \"size\", \"isSolid\", \"color\", \"forceShowInitials\", \"sizeLimitOneCharacter\", \"getInitials\", \"hashValue\"]);\n\n  var theme = useTheme();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageHasFailedLoading = _useState2[0],\n      setImageHasFailedLoading = _useState2[1];\n\n  var imageUnavailable = !src || imageHasFailedLoading;\n  var colorProps = getColorProps({\n    isSolid: isSolid,\n    theme: theme,\n    color: color,\n    name: name,\n    propsHashValue: propsHashValue\n  });\n  var initialsFontSize = \"\".concat(theme.getAvatarInitialsFontSize(size, sizeLimitOneCharacter), \"px\");\n  var initials = getInitials(name);\n\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  return React.createElement(Box, _extends({\n    width: size,\n    height: size,\n    overflow: \"hidden\",\n    borderRadius: 9999,\n    position: \"relative\",\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"center\",\n    backgroundColor: colorProps.backgroundColor,\n    title: name,\n    ref: ref\n  }, restProps), (imageUnavailable || forceShowInitials) && React.createElement(Text, {\n    className: initialsStyleClass,\n    fontSize: initialsFontSize,\n    lineHeight: initialsFontSize,\n    width: size,\n    height: size,\n    color: colorProps.color\n  }, initials), !imageUnavailable && React.createElement(Image, {\n    style: {\n      objectFit: 'cover'\n    } // Unsupported by ui-box directly\n    ,\n    width: isObjectFitSupported ? '100%' : 'auto' // Fallback to old behaviour on IE\n    ,\n    height: \"100%\",\n    src: src,\n    onError: function onError() {\n      return setImageHasFailedLoading(true);\n    }\n  }));\n}));\nAvatar.propTypes = {\n  /**\n   * The src attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The size of the avatar.\n   */\n  size: PropTypes.number,\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue: PropTypes.string,\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid: PropTypes.bool,\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials: PropTypes.func,\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials: PropTypes.bool,\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter: PropTypes.number\n};\nexport default Avatar;","map":{"version":3,"sources":["../../../src/avatar/src/Avatar.js"],"names":["isObjectFitSupported","document","initialsStyleClass","top","position","display","alignItems","justifyContent","lineHeight","isSolid","theme","color","name","propsHashValue","hashValue","globalHash","Avatar","memo","forwardRef","src","size","forceShowInitials","sizeLimitOneCharacter","getInitials","restProps","props","useTheme","imageHasFailedLoading","setImageHasFailedLoading","useState","imageUnavailable","colorProps","getColorProps","initialsFontSize","initials","ref","objectFit","PropTypes","number"],"mappings":"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","sourcesContent":["import React, { useState, memo, forwardRef } from 'react'\nimport { css } from 'glamor'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { Image } from '../../image'\nimport { Text } from '../../typography'\nimport { useTheme } from '../../theme'\nimport globalGetInitials from './utils/getInitials'\nimport globalHash from './utils/hash'\n\nconst isObjectFitSupported =\n  typeof document !== 'undefined' &&\n  'objectFit' in document.documentElement.style\n\nconst initialsStyleClass = css({\n  top: 0,\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  lineHeight: 1\n}).toString()\n\nfunction getColorProps({ isSolid, theme, color, name, propsHashValue }) {\n  if (color === 'automatic') {\n    const hashValue = globalHash(propsHashValue || name)\n    return theme.getAvatarProps({ isSolid, color, hashValue })\n  }\n\n  return theme.getAvatarProps({ isSolid, color })\n}\n\nconst Avatar = memo(\n  forwardRef(function Avatar(props, ref) {\n    const {\n      src,\n      name,\n      size = 24,\n      isSolid = false,\n      color = 'automatic',\n      forceShowInitials = false,\n      sizeLimitOneCharacter = 20,\n      getInitials = globalGetInitials,\n      hashValue: propsHashValue,\n      ...restProps\n    } = props\n\n    const theme = useTheme()\n    const [imageHasFailedLoading, setImageHasFailedLoading] = useState(false)\n    const imageUnavailable = !src || imageHasFailedLoading\n    const colorProps = getColorProps({\n      isSolid,\n      theme,\n      color,\n      name,\n      propsHashValue\n    })\n    const initialsFontSize = `${theme.getAvatarInitialsFontSize(\n      size,\n      sizeLimitOneCharacter\n    )}px`\n\n    let initials = getInitials(name)\n    if (size <= sizeLimitOneCharacter) {\n      initials = initials.substring(0, 1)\n    }\n\n    return (\n      <Box\n        width={size}\n        height={size}\n        overflow=\"hidden\"\n        borderRadius={9999}\n        position=\"relative\"\n        display=\"inline-flex\"\n        flexShrink={0}\n        justifyContent=\"center\"\n        backgroundColor={colorProps.backgroundColor}\n        title={name}\n        ref={ref}\n        {...restProps}\n      >\n        {(imageUnavailable || forceShowInitials) && (\n          <Text\n            className={initialsStyleClass}\n            fontSize={initialsFontSize}\n            lineHeight={initialsFontSize}\n            width={size}\n            height={size}\n            color={colorProps.color}\n          >\n            {initials}\n          </Text>\n        )}\n        {!imageUnavailable && (\n          <Image\n            style={{ objectFit: 'cover' }} // Unsupported by ui-box directly\n            width={isObjectFitSupported ? '100%' : 'auto'} // Fallback to old behaviour on IE\n            height=\"100%\"\n            src={src}\n            onError={() => setImageHasFailedLoading(true)}\n          />\n        )}\n      </Box>\n    )\n  })\n)\n\nAvatar.propTypes = {\n  /**\n   * The src attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The size of the avatar.\n   */\n  size: PropTypes.number,\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue: PropTypes.string,\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid: PropTypes.bool,\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials: PropTypes.func,\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials: PropTypes.bool,\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter: PropTypes.number\n}\n\nexport default Avatar\n"]},"metadata":{},"sourceType":"module"}