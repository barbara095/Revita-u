{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '../../theme';\nimport Text from './Text';\nvar Code = memo(forwardRef(function Code(props, ref) {\n  var theme = useTheme();\n\n  var className = props.className,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      restProps = _objectWithoutProperties(props, [\"className\", \"appearance\"]);\n\n  var _theme$getCodeProps = theme.getCodeProps(appearance),\n      _theme$getCodeProps$c = _theme$getCodeProps.className,\n      themedClassName = _theme$getCodeProps$c === void 0 ? '' : _theme$getCodeProps$c,\n      themeProps = _objectWithoutProperties(_theme$getCodeProps, [\"className\"]);\n\n  return React.createElement(Text, _extends({\n    is: \"code\",\n    ref: ref,\n    className: cx(className, themedClassName),\n    fontFamily: \"mono\"\n  }, themeProps, restProps));\n}));\nCode.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  /**\n   * The appearance of the code.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal']),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default Code;","map":{"version":3,"sources":["../../../src/typography/src/Code.js"],"names":["Code","memo","forwardRef","theme","useTheme","className","appearance","restProps","props","themedClassName","themeProps","cx","Text","PropTypes","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,QAAA,OAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,QAAA,QAAA,aAAA;AACA,OAAA,IAAA,MAAA,QAAA;AAEA,IAAMA,IAAI,GAAGC,IAAI,CACfC,UAAU,CAAC,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAA0B;AACnC,MAAMC,KAAK,GAAGC,QAAd,EAAA;;AADmC,MAE3BC,SAF2B,GAEyBG,KAFzB,CAAA,SAAA;AAAA,MAAA,iBAAA,GAEyBA,KAFzB,CAAA,UAAA;AAAA,MAEhBF,UAFgB,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,iBAAA;AAAA,MAEWC,SAFX,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,WAAA,EAAA,YAAA,CAAA,CAAA;;AAAA,MAAA,mBAAA,GAO/BJ,KAAK,CAALA,YAAAA,CAP+B,UAO/BA,CAP+B;AAAA,MAAA,qBAAA,GAAA,mBAAA,CAAA,SAAA;AAAA,MAKtBM,eALsB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAA,MAM9BC,UAN8B,GAAA,wBAAA,CAAA,mBAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;AASnC,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,EAAE,EADJ,MAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,SAAS,EAAEC,EAAE,CAAA,SAAA,EAHf,eAGe,CAHf;AAIE,IAAA,UAAU,EAAC;AAJb,GAAA,EAAA,UAAA,EADF,SACE,CAAA,CADF;AAVJ,CACY,CADK,CAAjB;AAuBAX,IAAI,CAAJA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKY,IAAI,CADTZ,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAGE;;;AAGAM,EAAAA,UAAU,EAAEO,SAAS,CAATA,KAAAA,CAAgB,CAAA,SAAA,EAN9Bb,SAM8B,CAAhBa,CANdb;;AAQE;;;;AAIAK,EAAAA,SAAS,EAAEQ,SAAS,CAACC;AAZvBd,CAAAA,CAAAA;AAeA,eAAA,IAAA","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '../../theme'\nimport Text from './Text'\n\nconst Code = memo(\n  forwardRef(function Code(props, ref) {\n    const theme = useTheme()\n    const { className, appearance = 'default', ...restProps } = props\n\n    const {\n      className: themedClassName = '',\n      ...themeProps\n    } = theme.getCodeProps(appearance)\n\n    return (\n      <Text\n        is=\"code\"\n        ref={ref}\n        className={cx(className, themedClassName)}\n        fontFamily=\"mono\"\n        {...themeProps}\n        {...restProps}\n      />\n    )\n  })\n)\n\nCode.propTypes = {\n  ...Text.propTypes,\n\n  /**\n   * The appearance of the code.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal']),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default Code\n"]},"metadata":{},"sourceType":"module"}