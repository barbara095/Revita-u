{"ast":null,"code":"(function () {\n  var Query, pathScorer, pluckCandidates, scorer, sortCandidates;\n  scorer = require('./scorer');\n  pathScorer = require('./pathScorer');\n  Query = require('./query');\n\n  pluckCandidates = function (a) {\n    return a.candidate;\n  };\n\n  sortCandidates = function (a, b) {\n    return b.score - a.score;\n  };\n\n  module.exports = function (candidates, query, options) {\n    var bKey, candidate, key, maxInners, maxResults, score, scoreProvider, scoredCandidates, spotLeft, string, usePathScoring, _i, _len;\n\n    scoredCandidates = [];\n    key = options.key, maxResults = options.maxResults, maxInners = options.maxInners, usePathScoring = options.usePathScoring;\n    spotLeft = maxInners != null && maxInners > 0 ? maxInners : candidates.length + 1;\n    bKey = key != null;\n    scoreProvider = usePathScoring ? pathScorer : scorer;\n\n    for (_i = 0, _len = candidates.length; _i < _len; _i++) {\n      candidate = candidates[_i];\n      string = bKey ? candidate[key] : candidate;\n\n      if (!string) {\n        continue;\n      }\n\n      score = scoreProvider.score(string, query, options);\n\n      if (score > 0) {\n        scoredCandidates.push({\n          candidate: candidate,\n          score: score\n        });\n\n        if (! --spotLeft) {\n          break;\n        }\n      }\n    }\n\n    scoredCandidates.sort(sortCandidates);\n    candidates = scoredCandidates.map(pluckCandidates);\n\n    if (maxResults != null) {\n      candidates = candidates.slice(0, maxResults);\n    }\n\n    return candidates;\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/barbpotiriadis/revita-u/client/node_modules/fuzzaldrin-plus/lib/filter.js"],"names":["Query","pathScorer","pluckCandidates","scorer","sortCandidates","require","a","candidate","b","score","module","exports","candidates","query","options","bKey","key","maxInners","maxResults","scoreProvider","scoredCandidates","spotLeft","string","usePathScoring","_i","_len","length","push","sort","map","slice","call"],"mappings":"AAAA,CAAC,YAAW;AACV,MAAIA,KAAJ,EAAWC,UAAX,EAAuBC,eAAvB,EAAwCC,MAAxC,EAAgDC,cAAhD;AAEAD,EAAAA,MAAM,GAAGE,OAAO,CAAC,UAAD,CAAhB;AAEAJ,EAAAA,UAAU,GAAGI,OAAO,CAAC,cAAD,CAApB;AAEAL,EAAAA,KAAK,GAAGK,OAAO,CAAC,SAAD,CAAf;;AAEAH,EAAAA,eAAe,GAAG,UAASI,CAAT,EAAY;AAC5B,WAAOA,CAAC,CAACC,SAAT;AACD,GAFD;;AAIAH,EAAAA,cAAc,GAAG,UAASE,CAAT,EAAYE,CAAZ,EAAe;AAC9B,WAAOA,CAAC,CAACC,KAAF,GAAUH,CAAC,CAACG,KAAnB;AACD,GAFD;;AAIAC,EAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,UAAT,EAAqBC,KAArB,EAA4BC,OAA5B,EAAqC;AACpD,QAAIC,IAAJ,EAAUR,SAAV,EAAqBS,GAArB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDT,KAAjD,EAAwDU,aAAxD,EAAuEC,gBAAvE,EAAyFC,QAAzF,EAAmGC,MAAnG,EAA2GC,cAA3G,EAA2HC,EAA3H,EAA+HC,IAA/H;;AACAL,IAAAA,gBAAgB,GAAG,EAAnB;AACAJ,IAAAA,GAAG,GAAGF,OAAO,CAACE,GAAd,EAAmBE,UAAU,GAAGJ,OAAO,CAACI,UAAxC,EAAoDD,SAAS,GAAGH,OAAO,CAACG,SAAxE,EAAmFM,cAAc,GAAGT,OAAO,CAACS,cAA5G;AACAF,IAAAA,QAAQ,GAAIJ,SAAS,IAAI,IAAd,IAAuBA,SAAS,GAAG,CAAnC,GAAuCA,SAAvC,GAAmDL,UAAU,CAACc,MAAX,GAAoB,CAAlF;AACAX,IAAAA,IAAI,GAAGC,GAAG,IAAI,IAAd;AACAG,IAAAA,aAAa,GAAGI,cAAc,GAAGtB,UAAH,GAAgBE,MAA9C;;AACA,SAAKqB,EAAE,GAAG,CAAL,EAAQC,IAAI,GAAGb,UAAU,CAACc,MAA/B,EAAuCF,EAAE,GAAGC,IAA5C,EAAkDD,EAAE,EAApD,EAAwD;AACtDjB,MAAAA,SAAS,GAAGK,UAAU,CAACY,EAAD,CAAtB;AACAF,MAAAA,MAAM,GAAGP,IAAI,GAAGR,SAAS,CAACS,GAAD,CAAZ,GAAoBT,SAAjC;;AACA,UAAI,CAACe,MAAL,EAAa;AACX;AACD;;AACDb,MAAAA,KAAK,GAAGU,aAAa,CAACV,KAAd,CAAoBa,MAApB,EAA4BT,KAA5B,EAAmCC,OAAnC,CAAR;;AACA,UAAIL,KAAK,GAAG,CAAZ,EAAe;AACbW,QAAAA,gBAAgB,CAACO,IAAjB,CAAsB;AACpBpB,UAAAA,SAAS,EAAEA,SADS;AAEpBE,UAAAA,KAAK,EAAEA;AAFa,SAAtB;;AAIA,YAAI,CAAC,GAAEY,QAAP,EAAiB;AACf;AACD;AACF;AACF;;AACDD,IAAAA,gBAAgB,CAACQ,IAAjB,CAAsBxB,cAAtB;AACAQ,IAAAA,UAAU,GAAGQ,gBAAgB,CAACS,GAAjB,CAAqB3B,eAArB,CAAb;;AACA,QAAIgB,UAAU,IAAI,IAAlB,EAAwB;AACtBN,MAAAA,UAAU,GAAGA,UAAU,CAACkB,KAAX,CAAiB,CAAjB,EAAoBZ,UAApB,CAAb;AACD;;AACD,WAAON,UAAP;AACD,GA9BD;AAgCD,CAjDD,EAiDGmB,IAjDH,CAiDQ,IAjDR","sourcesContent":["(function() {\n  var Query, pathScorer, pluckCandidates, scorer, sortCandidates;\n\n  scorer = require('./scorer');\n\n  pathScorer = require('./pathScorer');\n\n  Query = require('./query');\n\n  pluckCandidates = function(a) {\n    return a.candidate;\n  };\n\n  sortCandidates = function(a, b) {\n    return b.score - a.score;\n  };\n\n  module.exports = function(candidates, query, options) {\n    var bKey, candidate, key, maxInners, maxResults, score, scoreProvider, scoredCandidates, spotLeft, string, usePathScoring, _i, _len;\n    scoredCandidates = [];\n    key = options.key, maxResults = options.maxResults, maxInners = options.maxInners, usePathScoring = options.usePathScoring;\n    spotLeft = (maxInners != null) && maxInners > 0 ? maxInners : candidates.length + 1;\n    bKey = key != null;\n    scoreProvider = usePathScoring ? pathScorer : scorer;\n    for (_i = 0, _len = candidates.length; _i < _len; _i++) {\n      candidate = candidates[_i];\n      string = bKey ? candidate[key] : candidate;\n      if (!string) {\n        continue;\n      }\n      score = scoreProvider.score(string, query, options);\n      if (score > 0) {\n        scoredCandidates.push({\n          candidate: candidate,\n          score: score\n        });\n        if (!--spotLeft) {\n          break;\n        }\n      }\n    }\n    scoredCandidates.sort(sortCandidates);\n    candidates = scoredCandidates.map(pluckCandidates);\n    if (maxResults != null) {\n      candidates = candidates.slice(0, maxResults);\n    }\n    return candidates;\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}