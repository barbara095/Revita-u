{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Badge } from '../../badges';\nimport { CrossIcon } from '../../icons';\nimport { minorScale } from '../../scales';\nvar Tag = memo(forwardRef(function Tag(props, ref) {\n  var children = props.children,\n      onRemove = props.onRemove,\n      isRemovable = props.isRemovable,\n      restProps = _objectWithoutProperties(props, [\"children\", \"onRemove\", \"isRemovable\"]);\n\n  var badgeStyles = {\n    alignItems: 'center',\n    display: 'inline-flex',\n    fontWeight: 400,\n    textTransform: 'none'\n  };\n\n  if (isRemovable) {\n    badgeStyles.paddingRight = minorScale(1);\n  }\n\n  return React.createElement(Badge, _extends({\n    ref: ref,\n    isInteractive: true\n  }, badgeStyles, restProps), children, isRemovable && React.createElement(CrossIcon, {\n    marginLeft: minorScale(1),\n    onClick: onRemove,\n    size: minorScale(3)\n  }));\n}));\nTag.propTypes = {\n  /** The tag content */\n  children: PropTypes.node,\n\n  /**\n   * Callback invoked when the removal icon is clicked.\n   * (event) => void\n   */\n  onRemove: PropTypes.func,\n\n  /** Whether or not the tag can be removed. */\n  isRemovable: PropTypes.bool\n};\nexport default Tag;","map":{"version":3,"sources":["../../../src/tag-input/src/Tag.js"],"names":["Tag","memo","forwardRef","children","onRemove","isRemovable","restProps","props","badgeStyles","alignItems","display","fontWeight","textTransform","minorScale","PropTypes","bool"],"mappings":";;AAAA;;;;AAGA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,KAAA,QAAA,cAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,SAAA,UAAA,QAAA,cAAA;AAEA,IAAMA,GAAG,GAAGC,IAAI,CACdC,UAAU,CAAC,SAAA,GAAA,CAAA,KAAA,EAAA,GAAA,EAAyB;AAAA,MAC1BC,QAD0B,GACwBI,KADxB,CAAA,QAAA;AAAA,MAChBH,QADgB,GACwBG,KADxB,CAAA,QAAA;AAAA,MACNF,WADM,GACwBE,KADxB,CAAA,WAAA;AAAA,MACUD,SADV,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,UAAA,EAAA,aAAA,CAAA,CAAA;;AAGlC,MAAME,WAAW,GAAG;AAClBC,IAAAA,UAAU,EADQ,QAAA;AAElBC,IAAAA,OAAO,EAFW,aAAA;AAGlBC,IAAAA,UAAU,EAHQ,GAAA;AAIlBC,IAAAA,aAAa,EAAE;AAJG,GAApB;;AAOA,MAAA,WAAA,EAAiB;AACfJ,IAAAA,WAAW,CAAXA,YAAAA,GAA2BK,UAAU,CAArCL,CAAqC,CAArCA;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAO,IAAA,GAAG,EAAV,GAAA;AAAiB,IAAA,aAAa,EAAA;AAA9B,GAAA,EAAA,WAAA,EAAA,SAAA,CAAA,EAAA,QAAA,EAEGH,WAAW,IACV,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,IAAA,UAAU,EAAEQ,UAAU,CADxB,CACwB,CADxB;AAEE,IAAA,OAAO,EAFT,QAAA;AAGE,IAAA,IAAI,EAAEA,UAAU,CAAA,CAAA;AAHlB,GAAA,CAHJ,CADF;AAfJ,CACY,CADI,CAAhB;AA8BAb,GAAG,CAAHA,SAAAA,GAAgB;AACd;AACAG,EAAAA,QAAQ,EAAEW,SAAS,CAFL,IAAA;;AAId;;;;AAIAV,EAAAA,QAAQ,EAAEU,SAAS,CARL,IAAA;;AASd;AACAT,EAAAA,WAAW,EAAES,SAAS,CAACC;AAVT,CAAhBf;AAaA,eAAA,GAAA","sourcesContent":["/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\nimport React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { Badge } from '../../badges'\nimport { CrossIcon } from '../../icons'\nimport { minorScale } from '../../scales'\n\nconst Tag = memo(\n  forwardRef(function Tag(props, ref) {\n    const { children, onRemove, isRemovable, ...restProps } = props\n\n    const badgeStyles = {\n      alignItems: 'center',\n      display: 'inline-flex',\n      fontWeight: 400,\n      textTransform: 'none'\n    }\n\n    if (isRemovable) {\n      badgeStyles.paddingRight = minorScale(1)\n    }\n\n    return (\n      <Badge ref={ref} isInteractive {...badgeStyles} {...restProps}>\n        {children}\n        {isRemovable && (\n          <CrossIcon\n            marginLeft={minorScale(1)}\n            onClick={onRemove}\n            size={minorScale(3)}\n          />\n        )}\n      </Badge>\n    )\n  })\n)\n\nTag.propTypes = {\n  /** The tag content */\n  children: PropTypes.node,\n\n  /**\n   * Callback invoked when the removal icon is clicked.\n   * (event) => void\n   */\n  onRemove: PropTypes.func,\n  /** Whether or not the tag can be removed. */\n  isRemovable: PropTypes.bool\n}\n\nexport default Tag\n"]},"metadata":{},"sourceType":"module"}