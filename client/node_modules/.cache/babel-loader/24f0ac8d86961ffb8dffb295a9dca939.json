{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useTheme } from '../../theme';\nvar Paragraph = memo(forwardRef(function Paragraph(props, ref) {\n  var theme = useTheme();\n\n  var _props$size = props.size,\n      size = _props$size === void 0 ? 400 : _props$size,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$fontFamily = props.fontFamily,\n      fontFamily = _props$fontFamily === void 0 ? 'ui' : _props$fontFamily,\n      marginTop = props.marginTop,\n      restProps = _objectWithoutProperties(props, [\"size\", \"color\", \"fontFamily\", \"marginTop\"]);\n\n  var _theme$getParagraphSt = theme.getParagraphStyle(size),\n      defaultMarginTop = _theme$getParagraphSt.marginTop,\n      textStyle = _objectWithoutProperties(_theme$getParagraphSt, [\"marginTop\"]);\n\n  var finalMarginTop = marginTop === 'default' ? defaultMarginTop : marginTop;\n  return React.createElement(Box, _extends({\n    is: \"p\",\n    ref: ref,\n    color: theme.getTextColor(color),\n    fontFamily: theme.getFontFamily(fontFamily),\n    marginTop: finalMarginTop || 0,\n    marginBottom: 0\n  }, textStyle, restProps));\n}));\nParagraph.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {\n  /**\n   * Size of the text style.\n   * Can be: 300, 400, 500.\n   */\n  size: PropTypes.oneOf([300, 400, 500]),\n\n  /**\n   * Font family.\n   * Can be: `ui`, `display` or `mono` or a custom font family.\n   */\n  fontFamily: PropTypes.string\n});\nexport default Paragraph;","map":{"version":3,"sources":["../../../src/typography/src/Paragraph.js"],"names":["Paragraph","memo","forwardRef","theme","useTheme","size","color","fontFamily","marginTop","restProps","props","defaultMarginTop","textStyle","finalMarginTop","Box","PropTypes","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,GAAA,MAAA,QAAA;AACA,SAAA,QAAA,QAAA,aAAA;AAEA,IAAMA,SAAS,GAAGC,IAAI,CACpBC,UAAU,CAAC,SAAA,SAAA,CAAA,KAAA,EAAA,GAAA,EAA+B;AACxC,MAAMC,KAAK,GAAGC,QAAd,EAAA;;AADwC,MAAA,WAAA,GAQpCM,KARoC,CAAA,IAAA;AAAA,MAGtCL,IAHsC,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,WAAA;AAAA,MAAA,YAAA,GAQpCK,KARoC,CAAA,KAAA;AAAA,MAItCJ,KAJsC,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,YAAA;AAAA,MAAA,iBAAA,GAQpCI,KARoC,CAAA,UAAA;AAAA,MAKtCH,UALsC,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,iBAAA;AAAA,MAMtCC,SANsC,GAQpCE,KARoC,CAAA,SAAA;AAAA,MAOnCD,SAPmC,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,OAAA,EAAA,YAAA,EAAA,WAAA,CAAA,CAAA;;AAAA,MAAA,qBAAA,GAapCN,KAAK,CAALA,iBAAAA,CAboC,IAapCA,CAboC;AAAA,MAW3BQ,gBAX2B,GAAA,qBAAA,CAAA,SAAA;AAAA,MAYnCC,SAZmC,GAAA,wBAAA,CAAA,qBAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;AAexC,MAAMC,cAAc,GAClBL,SAAS,KAATA,SAAAA,GAAAA,gBAAAA,GADF,SAAA;AAGA,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,EAAE,EADJ,GAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,KAAK,EAAEL,KAAK,CAALA,YAAAA,CAHT,KAGSA,CAHT;AAIE,IAAA,UAAU,EAAEA,KAAK,CAALA,aAAAA,CAJd,UAIcA,CAJd;AAKE,IAAA,SAAS,EAAEU,cAAc,IAL3B,CAAA;AAME,IAAA,YAAY,EAAE;AANhB,GAAA,EAAA,SAAA,EADF,SACE,CAAA,CADF;AAnBJ,CACY,CADU,CAAtB;AAkCAb,SAAS,CAATA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAIKc,GAAG,CAJRd,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAME;;;;AAIAK,EAAAA,IAAI,EAAEU,SAAS,CAATA,KAAAA,CAAgB,CAAA,GAAA,EAAA,GAAA,EAVxBf,GAUwB,CAAhBe,CAVRf;;AAYE;;;;AAIAO,EAAAA,UAAU,EAAEQ,SAAS,CAACC;AAhBxBhB,CAAAA,CAAAA;AAmBA,eAAA,SAAA","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useTheme } from '../../theme'\n\nconst Paragraph = memo(\n  forwardRef(function Paragraph(props, ref) {\n    const theme = useTheme()\n    const {\n      size = 400,\n      color = 'default',\n      fontFamily = 'ui',\n      marginTop,\n      ...restProps\n    } = props\n\n    const {\n      marginTop: defaultMarginTop,\n      ...textStyle\n    } = theme.getParagraphStyle(size)\n\n    const finalMarginTop =\n      marginTop === 'default' ? defaultMarginTop : marginTop\n\n    return (\n      <Box\n        is=\"p\"\n        ref={ref}\n        color={theme.getTextColor(color)}\n        fontFamily={theme.getFontFamily(fontFamily)}\n        marginTop={finalMarginTop || 0}\n        marginBottom={0}\n        {...textStyle}\n        {...restProps}\n      />\n    )\n  })\n)\n\nParagraph.propTypes = {\n  /**\n   * Composes the Box component as the base.\n   */\n  ...Box.propTypes,\n\n  /**\n   * Size of the text style.\n   * Can be: 300, 400, 500.\n   */\n  size: PropTypes.oneOf([300, 400, 500]),\n\n  /**\n   * Font family.\n   * Can be: `ui`, `display` or `mono` or a custom font family.\n   */\n  fontFamily: PropTypes.string\n}\n\nexport default Paragraph\n"]},"metadata":{},"sourceType":"module"}