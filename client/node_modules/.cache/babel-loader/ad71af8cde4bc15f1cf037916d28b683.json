{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport fuzzaldrin from 'fuzzaldrin-plus';\nimport Downshift from 'downshift';\nimport VirtualList from 'react-tiny-virtual-list';\nimport { Popover } from '../../popover';\nimport { Position } from '../../constants';\nimport { Heading } from '../../typography';\nimport { Pane } from '../../layers';\nimport AutocompleteItem from './AutocompleteItem';\n\nvar fuzzyFilter = function fuzzyFilter(itemToString) {\n  if (itemToString) {\n    return function (items, input) {\n      var wrappedItems = items.map(function (item) {\n        return {\n          key: itemToString(item),\n          item: item\n        };\n      });\n      return fuzzaldrin.filter(wrappedItems, input, {\n        key: 'key'\n      }).map(function (_ref) {\n        var item = _ref.item;\n        return item;\n      });\n    };\n  }\n\n  return function (items, input) {\n    return fuzzaldrin.filter(items, input);\n  };\n};\n\nvar noop = function noop() {};\n\nvar autocompleteItemRenderer = function autocompleteItemRenderer(props) {\n  return React.createElement(AutocompleteItem, props);\n};\n\nautocompleteItemRenderer.displayName = \"autocompleteItemRenderer\";\n/* eslint-disable react/prop-types */\n\nvar AutocompleteItems = function AutocompleteItems(_ref2) {\n  var getItemProps = _ref2.getItemProps,\n      getMenuProps = _ref2.getMenuProps,\n      highlightedIndex = _ref2.highlightedIndex,\n      inputValue = _ref2.inputValue,\n      isFilterDisabled = _ref2.isFilterDisabled,\n      itemsFilter = _ref2.itemsFilter,\n      itemSize = _ref2.itemSize,\n      itemToString = _ref2.itemToString,\n      originalItems = _ref2.originalItems,\n      popoverMaxHeight = _ref2.popoverMaxHeight,\n      _renderItem = _ref2.renderItem,\n      selectedItem = _ref2.selectedItem,\n      title = _ref2.title,\n      width = _ref2.width;\n  itemsFilter = itemsFilter || fuzzyFilter(itemToString);\n  var items = isFilterDisabled || inputValue.trim() === '' ? originalItems : itemsFilter(originalItems, inputValue);\n  if (items.length === 0) return null; // Pass the actual DOM ref to downshift, this fixes touch support\n\n  var menuProps = getMenuProps();\n  return React.createElement(Pane, _extends({\n    width: width\n  }, menuProps), title && React.createElement(Pane, {\n    padding: 8,\n    borderBottom: \"muted\"\n  }, React.createElement(Heading, {\n    size: 100\n  }, title)), items.length > 0 && React.createElement(VirtualList, {\n    width: \"100%\",\n    height: Math.min(items.length * itemSize, popoverMaxHeight),\n    itemSize: itemSize,\n    itemCount: items.length,\n    scrollToIndex: highlightedIndex || 0,\n    overscanCount: 3,\n    scrollToAlignment: \"auto\",\n    renderItem: function renderItem(_ref3) {\n      var index = _ref3.index,\n          style = _ref3.style;\n      var item = items[index];\n      var itemString = itemToString(item);\n      return _renderItem(getItemProps({\n        item: item,\n        key: itemString,\n        index: index,\n        style: style,\n        children: itemString,\n        isSelected: itemToString(selectedItem) === itemString,\n        isHighlighted: highlightedIndex === index\n      }));\n    }\n  }));\n};\n\nAutocompleteItems.displayName = \"AutocompleteItems\";\n/* eslint-enable react/prop-types */\n\nvar Autocomplete = memo(forwardRef(function Autocomplete(props, ref) {\n  var children = props.children,\n      _props$itemSize = props.itemSize,\n      itemSize = _props$itemSize === void 0 ? 32 : _props$itemSize,\n      position = props.position,\n      _props$renderItem = props.renderItem,\n      renderItem = _props$renderItem === void 0 ? autocompleteItemRenderer : _props$renderItem,\n      _props$isFilterDisabl = props.isFilterDisabled,\n      isFilterDisabled = _props$isFilterDisabl === void 0 ? false : _props$isFilterDisabl,\n      itemsFilter = props.itemsFilter,\n      _props$itemToString = props.itemToString,\n      itemToString = _props$itemToString === void 0 ? function (i) {\n    return i ? String(i) : '';\n  } : _props$itemToString,\n      _props$popoverMaxHeig = props.popoverMaxHeight,\n      popoverMaxHeight = _props$popoverMaxHeig === void 0 ? 240 : _props$popoverMaxHeig,\n      _props$popoverMinWidt = props.popoverMinWidth,\n      popoverMinWidth = _props$popoverMinWidt === void 0 ? 240 : _props$popoverMinWidt,\n      restProps = _objectWithoutProperties(props, [\"children\", \"itemSize\", \"position\", \"renderItem\", \"isFilterDisabled\", \"itemsFilter\", \"itemToString\", \"popoverMaxHeight\", \"popoverMinWidth\"]);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      targetWidth = _useState2[0],\n      setTargetWidth = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      targetRef = _useState4[0],\n      setTargetRef = _useState4[1];\n\n  useEffect(function () {\n    if (targetRef) {\n      setTargetWidth(targetRef.getBoundingClientRect().width);\n    }\n  }, [targetRef]);\n  var stateReducer = useCallback(function (state, changes) {\n    var items = props.items;\n\n    if (Object.prototype.hasOwnProperty.call(changes, 'isOpen') && changes.isOpen) {\n      return _objectSpread(_objectSpread({}, changes), {}, {\n        highlightedIndex: items.indexOf(state.selectedItem)\n      });\n    }\n\n    return changes;\n  }, [props.items]);\n  return React.createElement(Downshift, _extends({\n    stateReducer: stateReducer,\n    scrollIntoView: noop,\n    itemToString: itemToString,\n    ref: ref\n  }, restProps), function (_ref4) {\n    var isShown = _ref4.isOpen,\n        inputValue = _ref4.inputValue,\n        getItemProps = _ref4.getItemProps,\n        getMenuProps = _ref4.getMenuProps,\n        selectedItem = _ref4.selectedItem,\n        highlightedIndex = _ref4.highlightedIndex,\n        getRootProps = _ref4.getRootProps,\n        restDownshiftProps = _objectWithoutProperties(_ref4, [\"isOpen\", \"inputValue\", \"getItemProps\", \"getMenuProps\", \"selectedItem\", \"highlightedIndex\", \"getRootProps\"]);\n\n    return React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      }\n    }, React.createElement(Popover, {\n      bringFocusInside: false,\n      isShown: isShown,\n      minWidth: popoverMinWidth,\n      position: position || (targetWidth < popoverMinWidth ? Position.BOTTOM_LEFT : Position.BOTTOM),\n      content: function content() {\n        return React.createElement(AutocompleteItems, {\n          getItemProps: getItemProps,\n          getMenuProps: getMenuProps,\n          highlightedIndex: highlightedIndex,\n          inputValue: inputValue,\n          isFilterDisabled: isFilterDisabled,\n          itemsFilter: itemsFilter,\n          itemSize: itemSize,\n          itemToString: itemToString,\n          originalItems: props.items,\n          popoverMaxHeight: popoverMaxHeight,\n          renderItem: renderItem,\n          selectedItem: selectedItem,\n          title: props.title,\n          width: Math.max(targetWidth, popoverMinWidth)\n        });\n      },\n      minHeight: 0,\n      animationDuration: 0\n    }, function (_ref5) {\n      var isShownPopover = _ref5.isShown,\n          toggle = _ref5.toggle,\n          _getRef = _ref5.getRef;\n      return children(_objectSpread({\n        isShown: isShownPopover,\n        toggle: toggle,\n        getRef: function getRef(ref) {\n          // Use the ref internally to determine the width\n          setTargetRef(ref);\n\n          _getRef(ref);\n        },\n        inputValue: inputValue,\n        selectedItem: selectedItem,\n        highlightedIndex: highlightedIndex\n      }, restDownshiftProps));\n    }));\n  });\n}));\nAutocomplete.propTypes = _objectSpread({\n  /**\n   * This prop can be either a string or a Node.\n   * It will provide a title for the items\n   */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * An array of items to be used as options for the select\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected Item to be shown on the autocomplete\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Function that will render the 'filter' component.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * The height of each item in the list\n   * Because the list is virtualized this is required beforehand.\n   */\n  itemSize: PropTypes.number,\n\n  /**\n   * Function that returns a component to render the item\n   */\n  renderItem: PropTypes.func,\n\n  /**\n   * The position of the Popover the Autocomplete is rendered in.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT, Position.LEFT, Position.RIGHT]),\n\n  /**\n   * A function that is used to filter the items.\n   * It should return a subset of the initial items.\n   * By default the \"fuzzaldrin-plus\" package is used.\n   */\n  itemsFilter: PropTypes.func,\n\n  /**\n   * Prop that enables and disables filtering\n   * True: Enables Filtering\n   * False: Disables Filtering\n   */\n  isFilterDisabled: PropTypes.bool,\n\n  /**\n   * Defines the minimum height the results container will be\n   */\n  popoverMinWidth: PropTypes.number,\n\n  /**\n   * Defines the maximum height the results container will be\n   */\n  popoverMaxHeight: PropTypes.number\n}, Downshift.propTypes);\nexport default Autocomplete;","map":{"version":3,"sources":["../../../src/autocomplete/src/Autocomplete.js"],"names":["fuzzyFilter","wrappedItems","key","itemToString","item","fuzzaldrin","noop","autocompleteItemRenderer","AutocompleteItems","getItemProps","getMenuProps","highlightedIndex","inputValue","isFilterDisabled","itemsFilter","itemSize","originalItems","popoverMaxHeight","renderItem","selectedItem","title","width","items","menuProps","Math","index","style","itemString","children","isSelected","isHighlighted","Autocomplete","memo","forwardRef","position","i","String","popoverMinWidth","restProps","props","targetWidth","setTargetWidth","useState","targetRef","setTargetRef","useEffect","stateReducer","useCallback","Object","changes","state","ref","isShown","getRootProps","restDownshiftProps","Position","isShownPopover","toggle","getRef","PropTypes","number","Downshift"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,EAAA,QAAA,EAAA,SAAA,EAAA,WAAA,QAAA,OAAA;AAOA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,iBAAA;AACA,OAAA,SAAA,MAAA,WAAA;AACA,OAAA,WAAA,MAAA,yBAAA;AACA,SAAA,OAAA,QAAA,eAAA;AACA,SAAA,QAAA,QAAA,iBAAA;AACA,SAAA,OAAA,QAAA,kBAAA;AACA,SAAA,IAAA,QAAA,cAAA;AACA,OAAA,gBAAA,MAAA,oBAAA;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,YAAA,EAAgB;AAClC,MAAA,YAAA,EAAkB;AAChB,WAAO,UAAA,KAAA,EAAA,KAAA,EAAkB;AACvB,UAAMC,YAAY,GAAG,KAAK,CAAL,GAAA,CAAU,UAAA,IAAA,EAAI;AAAA,eAAK;AACtCC,UAAAA,GAAG,EAAEC,YAAY,CADqB,IACrB,CADqB;AAEtCC,UAAAA,IAAI,EAAJA;AAFsC,SAAL;AAAnC,OAAqB,CAArB;AAKA,aAAO,UAAU,CAAV,MAAA,CAAA,YAAA,EAAA,KAAA,EACwB;AAAEF,QAAAA,GAAG,EAAE;AAAP,OADxB,EAAA,GAAA,CAEA,UAAA,IAAA,EAAA;AAAA,YAAGE,IAAH,GAAA,IAAA,CAAA,IAAA;AAAA,eAAA,IAAA;AAFP,OAAO,CAAP;AANF,KAAA;AAUD;;AAED,SAAO,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,WAAkBC,UAAU,CAAVA,MAAAA,CAAAA,KAAAA,EAAlB,KAAkBA,CAAlB;AAAP,GAAA;AAdF,CAAA;;AAiBA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAnB,CAAA;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,KAAA,EAAK;AAAA,SAAI,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAJ,KAAI,CAAJ;AAAtC,CAAA;;AAAMA,wB,YAAAA,G,0BAAAA;AAEN;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAepB;AAAA,MAdJC,YAcI,GAAA,KAAA,CAdJA,YAcI;AAAA,MAbJC,YAaI,GAAA,KAAA,CAbJA,YAaI;AAAA,MAZJC,gBAYI,GAAA,KAAA,CAZJA,gBAYI;AAAA,MAXJC,UAWI,GAAA,KAAA,CAXJA,UAWI;AAAA,MAVJC,gBAUI,GAAA,KAAA,CAVJA,gBAUI;AAAA,MATJC,WASI,GAAA,KAAA,CATJA,WASI;AAAA,MARJC,QAQI,GAAA,KAAA,CARJA,QAQI;AAAA,MAPJZ,YAOI,GAAA,KAAA,CAPJA,YAOI;AAAA,MANJa,aAMI,GAAA,KAAA,CANJA,aAMI;AAAA,MALJC,gBAKI,GAAA,KAAA,CALJA,gBAKI;AAAA,MAJJC,WAII,GAAA,KAAA,CAJJA,UAII;AAAA,MAHJC,YAGI,GAAA,KAAA,CAHJA,YAGI;AAAA,MAFJC,KAEI,GAAA,KAAA,CAFJA,KAEI;AAAA,MADJC,KACI,GAAA,KAAA,CADJA,KACI;AACJP,EAAAA,WAAW,GAAGA,WAAW,IAAId,WAAW,CAAxCc,YAAwC,CAAxCA;AACA,MAAMQ,KAAK,GACTT,gBAAgB,IAAID,UAAU,CAAVA,IAAAA,OAApBC,EAAAA,GAAAA,aAAAA,GAEIC,WAAW,CAAA,aAAA,EAHjB,UAGiB,CAHjB;AAKA,MAAIQ,KAAK,CAALA,MAAAA,KAAJ,CAAA,EAAwB,OAPpB,IAOoB,CAPpB,CASJ;;AACA,MAAMC,SAAS,GAAGb,YAAlB,EAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,IAAA,KAAK,EAAEW;AAAb,GAAA,EAAA,SAAA,CAAA,EACGD,KAAK,IACJ,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,OAAO,EAAb,CAAA;AAAkB,IAAA,YAAY,EAAC;AAA/B,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,IAAA,IAAI,EAAE;AAAf,GAAA,EAHN,KAGM,CADF,CAFJ,EAMGE,KAAK,CAALA,MAAAA,GAAAA,CAAAA,IACC,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AACE,IAAA,KAAK,EADP,MAAA;AAEE,IAAA,MAAM,EAAEE,IAAI,CAAJA,GAAAA,CAASF,KAAK,CAALA,MAAAA,GAATE,QAAAA,EAFV,gBAEUA,CAFV;AAGE,IAAA,QAAQ,EAHV,QAAA;AAIE,IAAA,SAAS,EAAEF,KAAK,CAJlB,MAAA;AAKE,IAAA,aAAa,EAAEX,gBAAgB,IALjC,CAAA;AAME,IAAA,aAAa,EANf,CAAA;AAOE,IAAA,iBAAiB,EAPnB,MAAA;AAQE,IAAA,UAAU,EAAE,SAAA,UAAA,CAAA,KAAA,EAAsB;AAAA,UAAnBc,KAAmB,GAAA,KAAA,CAAnBA,KAAmB;AAAA,UAAZC,KAAY,GAAA,KAAA,CAAZA,KAAY;AAChC,UAAMtB,IAAI,GAAGkB,KAAK,CAAlB,KAAkB,CAAlB;AACA,UAAMK,UAAU,GAAGxB,YAAY,CAA/B,IAA+B,CAA/B;AAEA,aAAOe,WAAU,CACfT,YAAY,CAAC;AACXL,QAAAA,IAAI,EADO,IAAA;AAEXF,QAAAA,GAAG,EAFQ,UAAA;AAGXuB,QAAAA,KAAK,EAHM,KAAA;AAIXC,QAAAA,KAAK,EAJM,KAAA;AAKXE,QAAAA,QAAQ,EALG,UAAA;AAMXC,QAAAA,UAAU,EAAE1B,YAAY,CAAZA,YAAY,CAAZA,KAND,UAAA;AAOX2B,QAAAA,aAAa,EAAEnB,gBAAgB,KAAKc;AAPzB,OAAD,CADG,CAAjB;AAWD;AAvBH,GAAA,CAPJ,CADF;AA3BF,CAAA;;AAAMjB,iB,YAAAA,G,mBAAAA;AAgEN;;AAEA,IAAMuB,YAAY,GAAGC,IAAI,CACvBC,UAAU,CAAC,SAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAkC;AAAA,MAEzCL,QAFyC,GAYvCW,KAZuC,CAAA,QAAA;AAAA,MAAA,eAAA,GAYvCA,KAZuC,CAAA,QAAA;AAAA,MAGzCxB,QAHyC,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,eAAA;AAAA,MAIzCmB,QAJyC,GAYvCK,KAZuC,CAAA,QAAA;AAAA,MAAA,iBAAA,GAYvCA,KAZuC,CAAA,UAAA;AAAA,MAKzCrB,UALyC,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,wBAAA,GAAA,iBAAA;AAAA,MAAA,qBAAA,GAYvCqB,KAZuC,CAAA,gBAAA;AAAA,MAMzC1B,gBANyC,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,qBAAA;AAAA,MAOzCC,WAPyC,GAYvCyB,KAZuC,CAAA,WAAA;AAAA,MAAA,mBAAA,GAYvCA,KAZuC,CAAA,YAAA;AAAA,MAQzCpC,YARyC,GAAA,mBAAA,KAAA,KAAA,CAAA,GAQ1B,UAAA,CAAA,EAAC;AAAA,WAAKgC,CAAC,GAAGC,MAAM,CAAT,CAAS,CAAT,GAAN,EAAA;AARyB,GAAA,GAAA,mBAAA;AAAA,MAAA,qBAAA,GAYvCG,KAZuC,CAAA,gBAAA;AAAA,MASzCtB,gBATyC,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,qBAAA;AAAA,MAAA,qBAAA,GAYvCsB,KAZuC,CAAA,eAAA;AAAA,MAUzCF,eAVyC,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,qBAAA;AAAA,MAWtCC,SAXsC,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,iBAAA,CAAA,CAAA;;AAAA,MAAA,SAAA,GAcLI,QAAQ,CAdH,CAcG,CAdH;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAcpCF,WAdoC,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAcvBC,cAduB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,UAAA,GAeTC,QAfS,EAAA;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAepCC,SAfoC,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAezBC,YAfyB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAiB3CC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAA,SAAA,EAAe;AACbJ,MAAAA,cAAc,CAACE,SAAS,CAATA,qBAAAA,GAAfF,KAAc,CAAdA;AACD;AAHM,GAAA,EAIN,CAJHI,SAIG,CAJM,CAATA;AAMA,MAAMC,YAAY,GAAGC,WAAW,CAC9B,UAAA,KAAA,EAAA,OAAA,EAAoB;AAAA,QACVzB,KADU,GACAiB,KADA,CAAA,KAAA;;AAGlB,QACES,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAAAA,QAAAA,KACAC,OAAO,CAFT,MAAA,EAGE;AACA,aAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA;AAEEtC,QAAAA,gBAAgB,EAAEW,KAAK,CAALA,OAAAA,CAAc4B,KAAK,CAAnB5B,YAAAA;AAFpB,OAAA,CAAA;AAID;;AAED,WAAA,OAAA;AAd4B,GAAA,EAgB9B,CAACiB,KAAK,CAhBR,KAgBE,CAhB8B,CAAhC;AAmBA,SACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,IAAA,YAAY,EADd,YAAA;AAEE,IAAA,cAAc,EAFhB,IAAA;AAGE,IAAA,YAAY,EAHd,YAAA;AAIE,IAAA,GAAG,EAAEY;AAJP,GAAA,EAAA,SAAA,CAAA,EAOG,UAAA,KAAA,EAAA;AAAA,QACSC,OADT,GAAA,KAAA,CAAA,MAAA;AAAA,QAECxC,UAFD,GAAA,KAAA,CAAA,UAAA;AAAA,QAGCH,YAHD,GAAA,KAAA,CAAA,YAAA;AAAA,QAICC,YAJD,GAAA,KAAA,CAAA,YAAA;AAAA,QAKCS,YALD,GAAA,KAAA,CAAA,YAAA;AAAA,QAMCR,gBAND,GAAA,KAAA,CAAA,gBAAA;AAAA,QAOC0C,YAPD,GAAA,KAAA,CAAA,YAAA;AAAA,QAQIC,kBARJ,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,QAAA,EAAA,YAAA,EAAA,cAAA,EAAA,cAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,cAAA,CAAA,CAAA;;AAAA,WAUC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,KAAK,EAAE;AAAEjC,QAAAA,KAAK,EAAE;AAAT;AAAZ,KAAA,EACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACE,MAAA,gBAAgB,EADlB,KAAA;AAEE,MAAA,OAAO,EAFT,OAAA;AAGE,MAAA,QAAQ,EAHV,eAAA;AAIE,MAAA,QAAQ,EACNa,QAAQ,KACPM,WAAW,GAAXA,eAAAA,GACGe,QAAQ,CADXf,WAAAA,GAEGe,QAAQ,CARhB,MAKY,CALZ;AAUE,MAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,eACP,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AACE,UAAA,YAAY,EADd,YAAA;AAEE,UAAA,YAAY,EAFd,YAAA;AAGE,UAAA,gBAAgB,EAHlB,gBAAA;AAIE,UAAA,UAAU,EAJZ,UAAA;AAKE,UAAA,gBAAgB,EALlB,gBAAA;AAME,UAAA,WAAW,EANb,WAAA;AAOE,UAAA,QAAQ,EAPV,QAAA;AAQE,UAAA,YAAY,EARd,YAAA;AASE,UAAA,aAAa,EAAEhB,KAAK,CATtB,KAAA;AAUE,UAAA,gBAAgB,EAVlB,gBAAA;AAWE,UAAA,UAAU,EAXZ,UAAA;AAYE,UAAA,YAAY,EAZd,YAAA;AAaE,UAAA,KAAK,EAAEA,KAAK,CAbd,KAAA;AAcE,UAAA,KAAK,EAAEf,IAAI,CAAJA,GAAAA,CAAAA,WAAAA,EAAAA,eAAAA;AAdT,SAAA,CADO;AAVX,OAAA;AA4BE,MAAA,SAAS,EA5BX,CAAA;AA6BE,MAAA,iBAAiB,EAAE;AA7BrB,KAAA,EA+BG,UAAA,KAAA,EAAA;AAAA,UAAYgC,cAAZ,GAAA,KAAA,CAAA,OAAA;AAAA,UAA4BC,MAA5B,GAAA,KAAA,CAAA,MAAA;AAAA,UAAoCC,OAApC,GAAA,KAAA,CAAA,MAAA;AAAA,aACC9B,QAAQ,CAAA,aAAA,CAAA;AACNwB,QAAAA,OAAO,EADD,cAAA;AAENK,QAAAA,MAAM,EAFA,MAAA;AAGNC,QAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,GAAA,EAAO;AACb;AACAd,UAAAA,YAAY,CAAZA,GAAY,CAAZA;;AACAc,UAAAA,OAAM,CAANA,GAAM,CAANA;AANI,SAAA;AAQN9C,QAAAA,UAAU,EARJ,UAAA;AASNO,QAAAA,YAAY,EATN,YAAA;AAUNR,QAAAA,gBAAgB,EAAhBA;AAVM,OAAA,EADT,kBACS,CAAA,CADT;AA1CN,KAWG,CADF,CAVD;AARL,GACE,CADF;AA3CJ,CACY,CADa,CAAzB;AAoHAoB,YAAY,CAAZA,SAAAA,GAAAA,aAAAA,CAAAA;AACE;;;;AAIAX,EAAAA,KAAK,EAAEuC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CALzD5B,IAK6B,CAApB4B,CALT5B;;AAOE;;;AAGAT,EAAAA,KAAK,EAAEqC,SAAS,CAATA,KAAAA,CAVT5B,UAAAA;;AAYE;;;AAGAZ,EAAAA,YAAY,EAAEwC,SAAS,CAfzB5B,GAAAA;;AAiBE;;;;AAIA5B,EAAAA,YAAY,EAAEwD,SAAS,CArBzB5B,IAAAA;;AAuBE;;;AAGAH,EAAAA,QAAQ,EAAE+B,SAAS,CAATA,IAAAA,CA1BZ5B,UAAAA;;AA4BE;;;;AAIAhB,EAAAA,QAAQ,EAAE4C,SAAS,CAhCrB5B,MAAAA;;AAkCE;;;AAGAb,EAAAA,UAAU,EAAEyC,SAAS,CArCvB5B,IAAAA;;AAuCE;;;AAGAG,EAAAA,QAAQ,EAAEyB,SAAS,CAATA,KAAAA,CAAgB,CACxBJ,QAAQ,CADgB,GAAA,EAExBA,QAAQ,CAFgB,QAAA,EAGxBA,QAAQ,CAHgB,SAAA,EAIxBA,QAAQ,CAJgB,MAAA,EAKxBA,QAAQ,CALgB,WAAA,EAMxBA,QAAQ,CANgB,YAAA,EAOxBA,QAAQ,CAPgB,IAAA,EAQxBA,QAAQ,CAlDZxB,KA0C4B,CAAhB4B,CA1CZ5B;;AAqDE;;;;;AAKAjB,EAAAA,WAAW,EAAE6C,SAAS,CA1DxB5B,IAAAA;;AA4DE;;;;;AAKAlB,EAAAA,gBAAgB,EAAE8C,SAAS,CAjE7B5B,IAAAA;;AAmEE;;;AAGAM,EAAAA,eAAe,EAAEsB,SAAS,CAtE5B5B,MAAAA;;AAwEE;;;AAGAd,EAAAA,gBAAgB,EAAE0C,SAAS,CAACC;AA3E9B7B,CAAAA,EA6EK8B,SAAS,CA7Ed9B,SAAAA,CAAAA;AAgFA,eAAA,YAAA","sourcesContent":["import React, {\n  memo,\n  forwardRef,\n  useState,\n  useEffect,\n  useCallback\n} from 'react'\nimport PropTypes from 'prop-types'\nimport fuzzaldrin from 'fuzzaldrin-plus'\nimport Downshift from 'downshift'\nimport VirtualList from 'react-tiny-virtual-list'\nimport { Popover } from '../../popover'\nimport { Position } from '../../constants'\nimport { Heading } from '../../typography'\nimport { Pane } from '../../layers'\nimport AutocompleteItem from './AutocompleteItem'\n\nconst fuzzyFilter = itemToString => {\n  if (itemToString) {\n    return (items, input) => {\n      const wrappedItems = items.map(item => ({\n        key: itemToString(item),\n        item\n      }))\n\n      return fuzzaldrin\n        .filter(wrappedItems, input, { key: 'key' })\n        .map(({ item }) => item)\n    }\n  }\n\n  return (items, input) => fuzzaldrin.filter(items, input)\n}\n\nconst noop = () => {}\n\nconst autocompleteItemRenderer = props => <AutocompleteItem {...props} />\n\n/* eslint-disable react/prop-types */\nconst AutocompleteItems = ({\n  getItemProps,\n  getMenuProps,\n  highlightedIndex,\n  inputValue,\n  isFilterDisabled,\n  itemsFilter,\n  itemSize,\n  itemToString,\n  originalItems,\n  popoverMaxHeight,\n  renderItem,\n  selectedItem,\n  title,\n  width\n}) => {\n  itemsFilter = itemsFilter || fuzzyFilter(itemToString)\n  const items =\n    isFilterDisabled || inputValue.trim() === ''\n      ? originalItems\n      : itemsFilter(originalItems, inputValue)\n\n  if (items.length === 0) return null\n\n  // Pass the actual DOM ref to downshift, this fixes touch support\n  const menuProps = getMenuProps()\n\n  return (\n    <Pane width={width} {...menuProps}>\n      {title && (\n        <Pane padding={8} borderBottom=\"muted\">\n          <Heading size={100}>{title}</Heading>\n        </Pane>\n      )}\n      {items.length > 0 && (\n        <VirtualList\n          width=\"100%\"\n          height={Math.min(items.length * itemSize, popoverMaxHeight)}\n          itemSize={itemSize}\n          itemCount={items.length}\n          scrollToIndex={highlightedIndex || 0}\n          overscanCount={3}\n          scrollToAlignment=\"auto\"\n          renderItem={({ index, style }) => {\n            const item = items[index]\n            const itemString = itemToString(item)\n\n            return renderItem(\n              getItemProps({\n                item,\n                key: itemString,\n                index,\n                style,\n                children: itemString,\n                isSelected: itemToString(selectedItem) === itemString,\n                isHighlighted: highlightedIndex === index\n              })\n            )\n          }}\n        />\n      )}\n    </Pane>\n  )\n}\n/* eslint-enable react/prop-types */\n\nconst Autocomplete = memo(\n  forwardRef(function Autocomplete(props, ref) {\n    const {\n      children,\n      itemSize = 32,\n      position,\n      renderItem = autocompleteItemRenderer,\n      isFilterDisabled = false,\n      itemsFilter,\n      itemToString = i => (i ? String(i) : ''),\n      popoverMaxHeight = 240,\n      popoverMinWidth = 240,\n      ...restProps\n    } = props\n\n    const [targetWidth, setTargetWidth] = useState(0)\n    const [targetRef, setTargetRef] = useState()\n\n    useEffect(() => {\n      if (targetRef) {\n        setTargetWidth(targetRef.getBoundingClientRect().width)\n      }\n    }, [targetRef])\n\n    const stateReducer = useCallback(\n      (state, changes) => {\n        const { items } = props\n\n        if (\n          Object.prototype.hasOwnProperty.call(changes, 'isOpen') &&\n          changes.isOpen\n        ) {\n          return {\n            ...changes,\n            highlightedIndex: items.indexOf(state.selectedItem)\n          }\n        }\n\n        return changes\n      },\n      [props.items]\n    )\n\n    return (\n      <Downshift\n        stateReducer={stateReducer}\n        scrollIntoView={noop}\n        itemToString={itemToString}\n        ref={ref}\n        {...restProps}\n      >\n        {({\n          isOpen: isShown,\n          inputValue,\n          getItemProps,\n          getMenuProps,\n          selectedItem,\n          highlightedIndex,\n          getRootProps,\n          ...restDownshiftProps\n        }) => (\n          <div style={{ width: '100%' }}>\n            <Popover\n              bringFocusInside={false}\n              isShown={isShown}\n              minWidth={popoverMinWidth}\n              position={\n                position ||\n                (targetWidth < popoverMinWidth\n                  ? Position.BOTTOM_LEFT\n                  : Position.BOTTOM)\n              }\n              content={() => (\n                <AutocompleteItems\n                  getItemProps={getItemProps}\n                  getMenuProps={getMenuProps}\n                  highlightedIndex={highlightedIndex}\n                  inputValue={inputValue}\n                  isFilterDisabled={isFilterDisabled}\n                  itemsFilter={itemsFilter}\n                  itemSize={itemSize}\n                  itemToString={itemToString}\n                  originalItems={props.items}\n                  popoverMaxHeight={popoverMaxHeight}\n                  renderItem={renderItem}\n                  selectedItem={selectedItem}\n                  title={props.title}\n                  width={Math.max(targetWidth, popoverMinWidth)}\n                />\n              )}\n              minHeight={0}\n              animationDuration={0}\n            >\n              {({ isShown: isShownPopover, toggle, getRef }) =>\n                children({\n                  isShown: isShownPopover,\n                  toggle,\n                  getRef: ref => {\n                    // Use the ref internally to determine the width\n                    setTargetRef(ref)\n                    getRef(ref)\n                  },\n                  inputValue,\n                  selectedItem,\n                  highlightedIndex,\n                  ...restDownshiftProps\n                })\n              }\n            </Popover>\n          </div>\n        )}\n      </Downshift>\n    )\n  })\n)\n\nAutocomplete.propTypes = {\n  /**\n   * This prop can be either a string or a Node.\n   * It will provide a title for the items\n   */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * An array of items to be used as options for the select\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected Item to be shown on the autocomplete\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Function that will render the 'filter' component.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * The height of each item in the list\n   * Because the list is virtualized this is required beforehand.\n   */\n  itemSize: PropTypes.number,\n\n  /**\n   * Function that returns a component to render the item\n   */\n  renderItem: PropTypes.func,\n\n  /**\n   * The position of the Popover the Autocomplete is rendered in.\n   */\n  position: PropTypes.oneOf([\n    Position.TOP,\n    Position.TOP_LEFT,\n    Position.TOP_RIGHT,\n    Position.BOTTOM,\n    Position.BOTTOM_LEFT,\n    Position.BOTTOM_RIGHT,\n    Position.LEFT,\n    Position.RIGHT\n  ]),\n\n  /**\n   * A function that is used to filter the items.\n   * It should return a subset of the initial items.\n   * By default the \"fuzzaldrin-plus\" package is used.\n   */\n  itemsFilter: PropTypes.func,\n\n  /**\n   * Prop that enables and disables filtering\n   * True: Enables Filtering\n   * False: Disables Filtering\n   */\n  isFilterDisabled: PropTypes.bool,\n\n  /**\n   * Defines the minimum height the results container will be\n   */\n  popoverMinWidth: PropTypes.number,\n\n  /**\n   * Defines the maximum height the results container will be\n   */\n  popoverMaxHeight: PropTypes.number,\n\n  ...Downshift.propTypes\n}\n\nexport default Autocomplete\n"]},"metadata":{},"sourceType":"module"}