{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { toaster } from '../../toaster';\nimport { useTheme } from '../../theme';\nimport { Pane } from '../../layers';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { useMergedRef } from '../../hooks';\nimport { TableRowConsumer } from './TableRowContext';\nimport manageTableCellFocusInteraction from './manageTableCellFocusInteraction';\n\nfunction executeArrowKeyOverride(override) {\n  if (!override) {\n    return;\n  }\n\n  if (typeof override === 'function') {\n    override();\n    return;\n  }\n\n  if (typeof override === 'string') {\n    document.querySelector(override).focus();\n    return;\n  } // This needs to be the node, not a React ref.\n\n\n  override.focus();\n}\n\nvar TableCell = memo(forwardRef(function TableCell(props, forwardedRef) {\n  var children = props.children,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      onClick = props.onClick,\n      onKeyPress = props.onKeyPress,\n      onKeyDown = props.onKeyDown,\n      isSelectable = props.isSelectable,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,\n      className = props.className,\n      rightView = props.rightView,\n      arrowKeysOverrides = props.arrowKeysOverrides,\n      rest = _objectWithoutProperties(props, [\"children\", \"appearance\", \"onClick\", \"onKeyPress\", \"onKeyDown\", \"isSelectable\", \"tabIndex\", \"className\", \"rightView\", \"arrowKeysOverrides\"]);\n\n  var theme = useTheme();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      cellRef = _useState2[0],\n      setCellRef = _useState2[1];\n\n  var handleRef = useMergedRef(setCellRef, forwardedRef);\n  var styles = {\n    paddingX: 12,\n    boxSizing: 'border-box',\n    flex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    flexShrink: 0,\n    overflow: 'hidden'\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    var _props$arrowKeysOverr = props.arrowKeysOverrides,\n        arrowKeysOverrides = _props$arrowKeysOverr === void 0 ? {} : _props$arrowKeysOverr;\n\n    if (isSelectable) {\n      var key = e.key;\n\n      if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {\n        e.preventDefault();\n\n        try {\n          // Support arrow key overrides.\n          var override = arrowKeysOverrides[key.slice('Arrow'.length).toLowerCase()];\n          if (override === false) return;\n          if (override) return executeArrowKeyOverride(override);\n          manageTableCellFocusInteraction(key, cellRef);\n        } catch (error) {\n          toaster.danger('Keyboard interaction not possible');\n          console.error('Keyboard interaction not possible', error);\n        }\n      } else if (key === 'Escape') {\n        if (cellRef && cellRef instanceof Node) cellRef.blur();\n      }\n    }\n\n    safeInvoke(onKeyDown, e);\n  };\n\n  var themedClassName = theme.getTableCellClassName(appearance);\n  return React.createElement(TableRowConsumer, null, function (height) {\n    return React.createElement(Pane, _extends({\n      ref: handleRef,\n      height: height,\n      className: cx(themedClassName, className),\n      tabIndex: isSelectable ? tabIndex : undefined,\n      \"data-isselectable\": isSelectable,\n      onClick: onClick,\n      onKeyDown: handleKeyDown\n    }, styles, rest), children, rightView ? rightView : null);\n  });\n}));\nTableCell.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /*\n   * Makes the TableCell focusable. Used by EditableCell.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * Optional node to be placed on the right side of the table cell.\n   * Useful for icons and icon buttons.\n   */\n  rightView: PropTypes.node,\n\n  /**\n   * Advanced arrow keys overrides for selectable cells.\n   * A string will be used as a selector.\n   */\n  arrowKeysOverrides: PropTypes.shape({\n    up: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    down: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    left: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    right: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])])\n  }),\n\n  /**\n   * Class name passed to the table cell.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default TableCell;","map":{"version":3,"sources":["../../../src/table/src/TableCell.js"],"names":["override","document","TableCell","memo","forwardRef","children","appearance","onClick","onKeyPress","onKeyDown","isSelectable","tabIndex","className","rightView","arrowKeysOverrides","rest","props","theme","useTheme","cellRef","setCellRef","useState","handleRef","useMergedRef","styles","paddingX","boxSizing","flex","display","alignItems","flexShrink","overflow","handleKeyDown","key","e","executeArrowKeyOverride","manageTableCellFocusInteraction","toaster","console","safeInvoke","themedClassName","cx","Pane","PropTypes","up","down","left","right","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { toaster } from '../../toaster'\nimport { useTheme } from '../../theme'\nimport { Pane } from '../../layers'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { useMergedRef } from '../../hooks'\nimport { TableRowConsumer } from './TableRowContext'\nimport manageTableCellFocusInteraction from './manageTableCellFocusInteraction'\n\nfunction executeArrowKeyOverride(override) {\n  if (!override) {\n    return\n  }\n\n  if (typeof override === 'function') {\n    override()\n    return\n  }\n\n  if (typeof override === 'string') {\n    document.querySelector(override).focus()\n    return\n  }\n\n  // This needs to be the node, not a React ref.\n  override.focus()\n}\n\nconst TableCell = memo(\n  forwardRef(function TableCell(props, forwardedRef) {\n    const {\n      children,\n      appearance = 'default',\n      onClick,\n      onKeyPress,\n      onKeyDown,\n      isSelectable,\n      tabIndex = -1,\n      className,\n      rightView,\n      arrowKeysOverrides,\n      ...rest\n    } = props\n    const theme = useTheme()\n    const [cellRef, setCellRef] = useState(null)\n    const handleRef = useMergedRef(setCellRef, forwardedRef)\n\n    const styles = {\n      paddingX: 12,\n      boxSizing: 'border-box',\n      flex: 1,\n      display: 'flex',\n      alignItems: 'center',\n      flexShrink: 0,\n      overflow: 'hidden'\n    }\n\n    const handleKeyDown = e => {\n      const { arrowKeysOverrides = {} } = props\n\n      if (isSelectable) {\n        const { key } = e\n        if (\n          key === 'ArrowUp' ||\n          key === 'ArrowDown' ||\n          key === 'ArrowLeft' ||\n          key === 'ArrowRight'\n        ) {\n          e.preventDefault()\n          try {\n            // Support arrow key overrides.\n            const override =\n              arrowKeysOverrides[key.slice('Arrow'.length).toLowerCase()]\n            if (override === false) return\n            if (override) return executeArrowKeyOverride(override)\n\n            manageTableCellFocusInteraction(key, cellRef)\n          } catch (error) {\n            toaster.danger('Keyboard interaction not possible')\n            console.error('Keyboard interaction not possible', error)\n          }\n        } else if (key === 'Escape') {\n          if (cellRef && cellRef instanceof Node) cellRef.blur()\n        }\n      }\n\n      safeInvoke(onKeyDown, e)\n    }\n\n    const themedClassName = theme.getTableCellClassName(appearance)\n\n    return (\n      <TableRowConsumer>\n        {height => {\n          return (\n            <Pane\n              ref={handleRef}\n              height={height}\n              className={cx(themedClassName, className)}\n              tabIndex={isSelectable ? tabIndex : undefined}\n              data-isselectable={isSelectable}\n              onClick={onClick}\n              onKeyDown={handleKeyDown}\n              {...styles}\n              {...rest}\n            >\n              {children}\n              {rightView ? rightView : null}\n            </Pane>\n          )\n        }}\n      </TableRowConsumer>\n    )\n  })\n)\n\nTableCell.propTypes = {\n  /**\n   * Composes the Pane component as the base.\n   */\n  ...Pane.propTypes,\n\n  /*\n   * Makes the TableCell focusable. Used by EditableCell.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * Optional node to be placed on the right side of the table cell.\n   * Useful for icons and icon buttons.\n   */\n  rightView: PropTypes.node,\n\n  /**\n   * Advanced arrow keys overrides for selectable cells.\n   * A string will be used as a selector.\n   */\n  arrowKeysOverrides: PropTypes.shape({\n    up: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.element,\n      PropTypes.oneOf([false])\n    ]),\n    down: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.element,\n      PropTypes.oneOf([false])\n    ]),\n    left: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.element,\n      PropTypes.oneOf([false])\n    ]),\n    right: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.element,\n      PropTypes.oneOf([false])\n    ])\n  }),\n\n  /**\n   * Class name passed to the table cell.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default TableCell\n"]},"metadata":{},"sourceType":"module"}