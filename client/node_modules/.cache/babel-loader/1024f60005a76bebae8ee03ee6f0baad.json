{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Themer } from '../../../../themer';\nimport memoizeClassName from '../utils/memoizeClassName';\nimport scales from '../foundational-styles/scales';\nimport { getTextColorForIntent, getPrimaryButtonStylesForIntent } from '../helpers';\nimport { defaultControlStyles } from '../shared';\n/**\n * Disabled styles are all the same for all buttons.\n */\n\nvar disabled = defaultControlStyles.disabled;\n/**\n * Get button appearance.\n * @param {string} appearance - default, primary, minimal.\n * @param {string} intent - none, success, warning, danger.\n * @return {Object} the appearance of the button.\n */\n\nvar getButtonAppearance = function getButtonAppearance(appearance, intent) {\n  switch (appearance) {\n    case 'primary':\n      {\n        var _getPrimaryButtonStyl = getPrimaryButtonStylesForIntent(intent),\n            linearGradient = _getPrimaryButtonStyl.linearGradient,\n            focusColor = _getPrimaryButtonStyl.focusColor;\n\n        return Themer.createButtonAppearance({\n          disabled: disabled,\n          base: {\n            color: 'white',\n            backgroundColor: 'white',\n            backgroundImage: linearGradient.base,\n            boxShadow: \"inset 0 0 0 1px \".concat(scales.neutral.N5A, \", inset 0 -1px 1px 0 \").concat(scales.neutral.N2A)\n          },\n          hover: {\n            backgroundImage: linearGradient.hover\n          },\n          focus: {\n            boxShadow: \"0 0 0 3px \".concat(focusColor, \", inset 0 0 0 1px \").concat(scales.neutral.N4A, \", inset 0 -1px 1px 0 \").concat(scales.neutral.N5A)\n          },\n          active: {\n            backgroundImage: linearGradient.active,\n            boxShadow: \"inset 0 0 0 1px \".concat(scales.neutral.N4A, \", inset 0 1px 1px 0 \").concat(scales.neutral.N2A)\n          },\n          focusAndActive: {\n            boxShadow: \"0 0 0 3px \".concat(focusColor, \", inset 0 0 0 1px \").concat(scales.neutral.N4A, \", inset 0 1px 1px 0 \").concat(scales.neutral.N2A)\n          }\n        });\n      }\n\n    case 'minimal':\n      {\n        var intentTextColor = getTextColorForIntent(intent, scales.blue.B9);\n        return Themer.createButtonAppearance({\n          disabled: disabled,\n          base: {\n            color: intentTextColor,\n            backgroundColor: 'transparent'\n          },\n          hover: {\n            backgroundColor: scales.neutral.N2A\n          },\n          focus: {\n            boxShadow: \"0 0 0 3px \".concat(scales.blue.B5A)\n          },\n          active: {\n            backgroundImage: 'none',\n            backgroundColor: scales.blue.B3A\n          },\n          focusAndActive: {}\n        });\n      }\n\n    case 'default':\n    default:\n      {\n        var _intentTextColor = getTextColorForIntent(intent);\n\n        return Themer.createButtonAppearance({\n          disabled: disabled,\n          base: _objectSpread({\n            color: _intentTextColor\n          }, defaultControlStyles.base),\n          hover: defaultControlStyles.hover,\n          focus: defaultControlStyles.focus,\n          active: defaultControlStyles.active,\n          focusAndActive: defaultControlStyles.focusAndActive\n        });\n      }\n  }\n};\n/**\n * Get the className of a `Button`|`IconButton`.\n * @param {string} appearance - default, primary, minimal.\n * @param {Intent} intent - none, success, warning, danger.\n * @return {string} the appearance class name.\n */\n\n\nexport default memoizeClassName(getButtonAppearance);","map":{"version":3,"sources":["../../../../../src/theme/src/default-theme/component-specific/getButtonClassName.js"],"names":["disabled","defaultControlStyles","getButtonAppearance","linearGradient","focusColor","getPrimaryButtonStylesForIntent","base","color","backgroundColor","backgroundImage","boxShadow","scales","hover","focus","active","focusAndActive","intentTextColor","getTextColorForIntent","N2A","B3A","memoizeClassName"],"mappings":"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","sourcesContent":["import { Themer } from '../../../../themer'\nimport memoizeClassName from '../utils/memoizeClassName'\nimport scales from '../foundational-styles/scales'\nimport {\n  getTextColorForIntent,\n  getPrimaryButtonStylesForIntent\n} from '../helpers'\nimport { defaultControlStyles } from '../shared'\n\n/**\n * Disabled styles are all the same for all buttons.\n */\nconst { disabled } = defaultControlStyles\n\n/**\n * Get button appearance.\n * @param {string} appearance - default, primary, minimal.\n * @param {string} intent - none, success, warning, danger.\n * @return {Object} the appearance of the button.\n */\nconst getButtonAppearance = (appearance, intent) => {\n  switch (appearance) {\n    case 'primary': {\n      const { linearGradient, focusColor } = getPrimaryButtonStylesForIntent(\n        intent\n      )\n      return Themer.createButtonAppearance({\n        disabled,\n        base: {\n          color: 'white',\n          backgroundColor: 'white',\n          backgroundImage: linearGradient.base,\n          boxShadow: `inset 0 0 0 1px ${\n            scales.neutral.N5A\n          }, inset 0 -1px 1px 0 ${scales.neutral.N2A}`\n        },\n        hover: {\n          backgroundImage: linearGradient.hover\n        },\n        focus: {\n          boxShadow: `0 0 0 3px ${focusColor}, inset 0 0 0 1px ${\n            scales.neutral.N4A\n          }, inset 0 -1px 1px 0 ${scales.neutral.N5A}`\n        },\n        active: {\n          backgroundImage: linearGradient.active,\n          boxShadow: `inset 0 0 0 1px ${\n            scales.neutral.N4A\n          }, inset 0 1px 1px 0 ${scales.neutral.N2A}`\n        },\n        focusAndActive: {\n          boxShadow: `0 0 0 3px ${focusColor}, inset 0 0 0 1px ${\n            scales.neutral.N4A\n          }, inset 0 1px 1px 0 ${scales.neutral.N2A}`\n        }\n      })\n    }\n\n    case 'minimal': {\n      const intentTextColor = getTextColorForIntent(intent, scales.blue.B9)\n      return Themer.createButtonAppearance({\n        disabled,\n        base: {\n          color: intentTextColor,\n          backgroundColor: 'transparent'\n        },\n        hover: {\n          backgroundColor: scales.neutral.N2A\n        },\n        focus: {\n          boxShadow: `0 0 0 3px ${scales.blue.B5A}`\n        },\n        active: {\n          backgroundImage: 'none',\n          backgroundColor: scales.blue.B3A\n        },\n        focusAndActive: {}\n      })\n    }\n\n    case 'default':\n    default: {\n      const intentTextColor = getTextColorForIntent(intent)\n      return Themer.createButtonAppearance({\n        disabled,\n        base: {\n          color: intentTextColor,\n          ...defaultControlStyles.base\n        },\n        hover: defaultControlStyles.hover,\n        focus: defaultControlStyles.focus,\n        active: defaultControlStyles.active,\n        focusAndActive: defaultControlStyles.focusAndActive\n      })\n    }\n  }\n}\n\n/**\n * Get the className of a `Button`|`IconButton`.\n * @param {string} appearance - default, primary, minimal.\n * @param {Intent} intent - none, success, warning, danger.\n * @return {string} the appearance class name.\n */\nexport default memoizeClassName(getButtonAppearance)\n"]},"metadata":{},"sourceType":"module"}