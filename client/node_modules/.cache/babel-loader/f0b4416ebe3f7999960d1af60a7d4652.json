{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, dimensions, position, layout } from 'ui-box';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport { getIconForIntent } from './getIconForIntent';\nvar InlineAlert = memo(forwardRef(function InlineAlert(props, ref) {\n  var children = props.children,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      _props$hasIcon = props.hasIcon,\n      hasIcon = _props$hasIcon === void 0 ? true : _props$hasIcon,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 400 : _props$size,\n      restProps = _objectWithoutProperties(props, [\"children\", \"intent\", \"hasIcon\", \"size\"]);\n\n  return React.createElement(Pane, _extends({\n    ref: ref,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, restProps), hasIcon && React.createElement(Pane, {\n    display: \"inline\",\n    marginRight: 8\n  }, getIconForIntent(intent, {\n    size: 14,\n    marginTop: 2\n  })), React.createElement(Text, {\n    size: size,\n    fontWeight: 500\n  }, children));\n}));\nInlineAlert.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The content of the alert.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert. This should always be set explicitly.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * When true, show a icon on the left matching the type.\n   * There is no point not showing this.\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * The size of the Text.\n   */\n  size: PropTypes.number\n});\nexport default InlineAlert;","map":{"version":3,"sources":["../../../src/alert/src/InlineAlert.js"],"names":["InlineAlert","memo","forwardRef","children","intent","hasIcon","size","restProps","props","getIconForIntent","marginTop","spacing","position","layout","dimensions","PropTypes","number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA,QAAA,QAAA;AACA,SAAA,IAAA,QAAA,cAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AACA,SAAA,gBAAA,QAAA,oBAAA;AAEA,IAAMA,WAAW,GAAGC,IAAI,CACtBC,UAAU,CAAC,SAAA,WAAA,CAAA,KAAA,EAAA,GAAA,EAAiC;AAAA,MAExCC,QAFwC,GAOtCK,KAPsC,CAAA,QAAA;AAAA,MAAA,aAAA,GAOtCA,KAPsC,CAAA,MAAA;AAAA,MAGxCJ,MAHwC,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,MAAA,GAAA,aAAA;AAAA,MAAA,cAAA,GAOtCI,KAPsC,CAAA,OAAA;AAAA,MAIxCH,OAJwC,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,cAAA;AAAA,MAAA,WAAA,GAOtCG,KAPsC,CAAA,IAAA;AAAA,MAKxCF,IALwC,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,WAAA;AAAA,MAMrCC,SANqC,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,CAAA,CAAA;;AAS1C,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,IAAA,GAAG,EAAT,GAAA;AAAgB,IAAA,UAAU,EAA1B,QAAA;AAAoC,IAAA,OAAO,EAAC;AAA5C,GAAA,EAAA,SAAA,CAAA,EACGF,OAAO,IACN,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,OAAO,EAAb,QAAA;AAAuB,IAAA,WAAW,EAAE;AAApC,GAAA,EACGI,gBAAgB,CAAA,MAAA,EAAS;AAAEH,IAAAA,IAAI,EAAN,EAAA;AAAYI,IAAAA,SAAS,EAAE;AAAvB,GAAT,CADnB,CAFJ,EAME,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,IAAI,EAAV,IAAA;AAAkB,IAAA,UAAU,EAAE;AAA9B,GAAA,EAPJ,QAOI,CANF,CADF;AAVJ,CACY,CADY,CAAxB;AAyBAV,WAAW,CAAXA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAIKW,OAAO,CAJZX,SAAAA,CAAAA,EAKKY,QAAQ,CALbZ,SAAAA,CAAAA,EAMKa,MAAM,CANXb,SAAAA,CAAAA,EAOKc,UAAU,CAPfd,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AASE;;;AAGAG,EAAAA,QAAQ,EAAEY,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAZ5Df,IAYgC,CAApBe,CAZZf;;AAcE;;;AAGAI,EAAAA,MAAM,EAAEW,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAAA,SAAA,EAAA,SAAA,EAjB1Bf,QAiB0B,CAAhBe,CAjBVf;;AAmBE;;;;AAIAK,EAAAA,OAAO,EAAEU,SAAS,CAvBpBf,IAAAA;;AAyBE;;;AAGAM,EAAAA,IAAI,EAAES,SAAS,CAACC;AA5BlBhB,CAAAA,CAAAA;AA+BA,eAAA,WAAA","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { spacing, dimensions, position, layout } from 'ui-box'\nimport { Pane } from '../../layers'\nimport { Text } from '../../typography'\nimport { getIconForIntent } from './getIconForIntent'\n\nconst InlineAlert = memo(\n  forwardRef(function InlineAlert(props, ref) {\n    const {\n      children,\n      intent = 'none',\n      hasIcon = true,\n      size = 400,\n      ...restProps\n    } = props\n\n    return (\n      <Pane ref={ref} alignItems=\"center\" display=\"flex\" {...restProps}>\n        {hasIcon && (\n          <Pane display=\"inline\" marginRight={8}>\n            {getIconForIntent(intent, { size: 14, marginTop: 2 })}\n          </Pane>\n        )}\n        <Text size={size} fontWeight={500}>\n          {children}\n        </Text>\n      </Pane>\n    )\n  })\n)\n\nInlineAlert.propTypes = {\n  /**\n   * Composes some Box APIs.\n   */\n  ...spacing.propTypes,\n  ...position.propTypes,\n  ...layout.propTypes,\n  ...dimensions.propTypes,\n\n  /**\n   * The content of the alert.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert. This should always be set explicitly.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * When true, show a icon on the left matching the type.\n   * There is no point not showing this.\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * The size of the Text.\n   */\n  size: PropTypes.number\n}\n\nexport default InlineAlert\n"]},"metadata":{},"sourceType":"module"}