{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport { CaretDownIcon } from '../../icons';\nimport { Text } from '../../typography';\nimport { Spinner } from '../../spinner';\nimport { useTheme } from '../../theme';\nvar styles = {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n};\nvar TextDropdownButton = memo(forwardRef(function TextDropdownButton(props, ref) {\n  var theme = useTheme();\n\n  var className = props.className,\n      intent = props.intent,\n      height = props.height,\n      _props$isActive = props.isActive,\n      isActive = _props$isActive === void 0 ? false : _props$isActive,\n      children = props.children,\n      disabled = props.disabled,\n      appearance = props.appearance,\n      isLoading = props.isLoading,\n      paddingRight = props.paddingRight,\n      paddingLeft = props.paddingLeft,\n      paddingTop = props.paddingTop,\n      paddingBottom = props.paddingBottom,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? CaretDownIcon : _props$icon,\n      restProps = _objectWithoutProperties(props, [\"className\", \"intent\", \"height\", \"isActive\", \"children\", \"disabled\", \"appearance\", \"isLoading\", \"paddingRight\", \"paddingLeft\", \"paddingTop\", \"paddingBottom\", \"icon\"]);\n\n  var themedClassName = cx(theme.getTextDropdownButtonClassName(), className);\n  return React.createElement(Text, _extends({\n    is: \"button\",\n    ref: ref,\n    className: themedClassName,\n    paddingX: 4,\n    marginX: -4,\n    paddingY: 2,\n    marginY: -2,\n    size: 300,\n    \"data-active\": isActive\n  }, styles, restProps, {\n    disabled: disabled\n  }), isLoading && React.createElement(Spinner, {\n    marginLeft: -Math.round(height / 8),\n    marginRight: Math.round(height / 4),\n    size: Math.round(height / 2)\n  }), children, React.createElement(IconWrapper, {\n    icon: icon,\n    marginLeft: 2,\n    color: \"default\",\n    size: 12\n  }));\n}));\nTextDropdownButton.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * An Evergreen icon or custom icon node. By default it uses CaretDownIcon\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default TextDropdownButton;","map":{"version":3,"sources":["../../../src/buttons/src/TextDropdownButton.js"],"names":["styles","position","fontFamily","fontWeight","display","alignItems","flexWrap","TextDropdownButton","memo","forwardRef","theme","useTheme","className","intent","height","isActive","children","disabled","appearance","isLoading","paddingRight","paddingLeft","paddingTop","paddingBottom","icon","restProps","props","themedClassName","cx","Math","dimensions","spacing","layout","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { IconWrapper } from '../../icons/src/IconWrapper'\nimport { CaretDownIcon } from '../../icons'\nimport { Text } from '../../typography'\nimport { Spinner } from '../../spinner'\nimport { useTheme } from '../../theme'\n\nconst styles = {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n}\n\nconst TextDropdownButton = memo(\n  forwardRef(function TextDropdownButton(props, ref) {\n    const theme = useTheme()\n    const {\n      className,\n      intent,\n      height,\n      isActive = false,\n      children,\n      disabled,\n      appearance,\n      isLoading,\n\n      paddingRight,\n      paddingLeft,\n      paddingTop,\n      paddingBottom,\n\n      icon = CaretDownIcon,\n      ...restProps\n    } = props\n\n    const themedClassName = cx(theme.getTextDropdownButtonClassName(), className)\n\n    return (\n      <Text\n        is=\"button\"\n        ref={ref}\n        className={themedClassName}\n        paddingX={4}\n        marginX={-4}\n        paddingY={2}\n        marginY={-2}\n        size={300}\n        data-active={isActive}\n        {...styles}\n        {...restProps}\n        disabled={disabled}\n      >\n        {isLoading && (\n          <Spinner\n            marginLeft={-Math.round(height / 8)}\n            marginRight={Math.round(height / 4)}\n            size={Math.round(height / 2)}\n          />\n        )}\n        {children}\n        <IconWrapper icon={icon} marginLeft={2} color=\"default\" size={12} />\n      </Text>\n    )\n  })\n)\n\nTextDropdownButton.propTypes = {\n  /**\n   * Composes the dimensions spec from the Box primitive.\n   */\n  ...dimensions.propTypes,\n\n  /**\n   * Composes the spacing spec from the Box primitive.\n   */\n  ...spacing.propTypes,\n\n  /**\n   * Composes the position spec from the Box primitive.\n   */\n  ...position.propTypes,\n\n  /**\n   * Composes the layout spec from the Box primitive.\n   */\n  ...layout.propTypes,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * An Evergreen icon or custom icon node. By default it uses CaretDownIcon\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default TextDropdownButton\n"]},"metadata":{},"sourceType":"module"}