{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, useState } from 'react';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { StackingOrder } from '../../constants';\nimport Toast from './Toast';\nvar wrapperClass = css({\n  maxWidth: 560,\n  margin: '0 auto',\n  top: 0,\n  left: 0,\n  right: 0,\n  position: 'fixed',\n  zIndex: StackingOrder.TOASTER,\n  pointerEvents: 'none'\n});\n\nvar hasCustomId = function hasCustomId(settings) {\n  return Object.hasOwnProperty.call(settings, 'id');\n};\n\nvar ToastManager = memo(function ToastManager(props) {\n  var bindNotify = props.bindNotify,\n      bindRemove = props.bindRemove,\n      bindGetToasts = props.bindGetToasts,\n      bindCloseAll = props.bindCloseAll;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      toasts = _useState2[0],\n      setToasts = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      idCounter = _useState4[0],\n      setIdCounter = _useState4[1];\n\n  var getToasts = function getToasts() {\n    return toasts;\n  };\n\n  var closeAll = function closeAll() {\n    setToasts(toasts.map(function (toast) {\n      return _objectSpread(_objectSpread({}, toast), {}, {\n        isShown: false\n      });\n    }));\n  };\n  /**\n   * This will set isShown on the Toast which will close the toast.\n   * It won't remove the toast until onExited triggers onRemove.\n   */\n\n\n  var closeToast = function closeToast(id) {\n    setToasts(toasts.map(function (toast) {\n      if (toast.id === id) {\n        return _objectSpread(_objectSpread({}, toast), {}, {\n          isShown: false\n        });\n      }\n\n      return toast;\n    }));\n  };\n\n  var safeCloseToast = function safeCloseToast(id) {\n    var toastToRemove = toasts.find(function (toast) {\n      return String(toast.id).startsWith(id);\n    });\n\n    if (toastToRemove) {\n      closeToast(toastToRemove.id);\n    }\n  };\n\n  var removeToast = function removeToast(id) {\n    var updatedToasts = toasts.filter(function (toast) {\n      return !String(toast.id).startsWith(id);\n    });\n    setToasts(updatedToasts);\n    return updatedToasts;\n  };\n\n  var createToastInstance = function createToastInstance(title, settings) {\n    var uniqueId = idCounter;\n    setIdCounter(idCounter + 1);\n    var id = hasCustomId(settings) ? \"\".concat(settings.id, \"-\").concat(uniqueId) : uniqueId;\n    return {\n      id: id,\n      title: title,\n      description: settings.description,\n      hasCloseButton: settings.hasCloseButton || true,\n      duration: settings.duration || 5,\n      close: function close() {\n        return safeCloseToast(id);\n      },\n      intent: settings.intent\n    };\n  };\n\n  var notify = function notify(title, settings) {\n    var tempToasts = toasts;\n\n    if (hasCustomId(settings)) {\n      tempToasts = removeToast(settings.id);\n    }\n\n    var instance = createToastInstance(title, settings);\n    setToasts([instance].concat(_toConsumableArray(tempToasts)));\n  };\n\n  bindNotify(notify);\n  bindRemove(safeCloseToast);\n  bindGetToasts(getToasts);\n  bindCloseAll(closeAll);\n  return React.createElement(\"span\", {\n    className: wrapperClass\n  }, toasts.map(function (_ref) {\n    var id = _ref.id,\n        description = _ref.description,\n        rest = _objectWithoutProperties(_ref, [\"id\", \"description\"]);\n\n    return React.createElement(Toast, _extends({\n      key: id,\n      onRemove: function onRemove() {\n        return removeToast(id);\n      }\n    }, rest), description);\n  }));\n});\nToastManager.propTypes = {\n  /**\n   * Function called with the `this.notify` function.\n   */\n  bindNotify: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.remove` function.\n   */\n  bindRemove: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.getToasts` function.\n   */\n  bindGetToasts: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.closeAll` function.\n   */\n  bindCloseAll: PropTypes.func.isRequired\n};\nexport default ToastManager;","map":{"version":3,"sources":["../../../src/toaster/src/ToastManager.js"],"names":["wrapperClass","css","maxWidth","margin","top","left","right","position","zIndex","StackingOrder","pointerEvents","hasCustomId","Object","ToastManager","memo","bindNotify","bindRemove","bindGetToasts","bindCloseAll","props","toasts","setToasts","useState","idCounter","setIdCounter","getToasts","closeAll","isShown","closeToast","toast","safeCloseToast","toastToRemove","String","removeToast","updatedToasts","createToastInstance","uniqueId","id","settings","title","description","hasCloseButton","duration","close","intent","notify","tempToasts","instance","rest","PropTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { memo, useState } from 'react'\nimport { css } from 'glamor'\nimport PropTypes from 'prop-types'\nimport { StackingOrder } from '../../constants'\nimport Toast from './Toast'\n\nconst wrapperClass = css({\n  maxWidth: 560,\n  margin: '0 auto',\n  top: 0,\n  left: 0,\n  right: 0,\n  position: 'fixed',\n  zIndex: StackingOrder.TOASTER,\n  pointerEvents: 'none'\n})\n\nconst hasCustomId = settings => Object.hasOwnProperty.call(settings, 'id')\n\nconst ToastManager = memo(function ToastManager(props) {\n  const { bindNotify, bindRemove, bindGetToasts, bindCloseAll } = props\n\n  const [toasts, setToasts] = useState([])\n  const [idCounter, setIdCounter] = useState(0)\n\n  const getToasts = () => toasts\n\n  const closeAll = () => {\n    setToasts(toasts.map(toast => ({ ...toast, isShown: false })))\n  }\n\n  /**\n   * This will set isShown on the Toast which will close the toast.\n   * It won't remove the toast until onExited triggers onRemove.\n   */\n  const closeToast = id => {\n    setToasts(\n      toasts.map(toast => {\n        if (toast.id === id) {\n          return {\n            ...toast,\n            isShown: false\n          }\n        }\n\n        return toast\n      })\n    )\n  }\n\n  const safeCloseToast = id => {\n    const toastToRemove = toasts.find(toast => String(toast.id).startsWith(id))\n\n    if (toastToRemove) {\n      closeToast(toastToRemove.id)\n    }\n  }\n\n  const removeToast = id => {\n    const updatedToasts = toasts.filter(\n      toast => !String(toast.id).startsWith(id)\n    )\n    setToasts(updatedToasts)\n    return updatedToasts\n  }\n\n  const createToastInstance = (title, settings) => {\n    const uniqueId = idCounter\n    setIdCounter(idCounter + 1)\n    const id = hasCustomId(settings) ? `${settings.id}-${uniqueId}` : uniqueId\n\n    return {\n      id,\n      title,\n      description: settings.description,\n      hasCloseButton: settings.hasCloseButton || true,\n      duration: settings.duration || 5,\n      close: () => safeCloseToast(id),\n      intent: settings.intent\n    }\n  }\n\n  const notify = (title, settings) => {\n    let tempToasts = toasts\n    if (hasCustomId(settings)) {\n      tempToasts = removeToast(settings.id)\n    }\n\n    const instance = createToastInstance(title, settings)\n    setToasts([instance, ...tempToasts])\n  }\n\n  bindNotify(notify)\n  bindRemove(safeCloseToast)\n  bindGetToasts(getToasts)\n  bindCloseAll(closeAll)\n\n  return (\n    <span className={wrapperClass}>\n      {toasts.map(({ id, description, ...rest }) => {\n        return (\n          <Toast key={id} onRemove={() => removeToast(id)} {...rest}>\n            {description}\n          </Toast>\n        )\n      })}\n    </span>\n  )\n})\n\nToastManager.propTypes = {\n  /**\n   * Function called with the `this.notify` function.\n   */\n  bindNotify: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.remove` function.\n   */\n  bindRemove: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.getToasts` function.\n   */\n  bindGetToasts: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.closeAll` function.\n   */\n  bindCloseAll: PropTypes.func.isRequired\n}\n\nexport default ToastManager\n"]},"metadata":{},"sourceType":"module"}