{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo } from 'react';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport { Paragraph, Heading } from '../../typography';\nimport { Overlay } from '../../overlay';\nimport { Button, IconButton } from '../../buttons';\nimport { CrossIcon } from '../../icons';\nvar animationEasing = {\n  deceleration: \"cubic-bezier(0.0, 0.0, 0.2, 1)\",\n  acceleration: \"cubic-bezier(0.4, 0.0, 1, 1)\"\n};\nvar ANIMATION_DURATION = 200;\nvar openAnimation = css.keyframes('openAnimation', {\n  from: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  },\n  to: {\n    transform: 'scale(1)',\n    opacity: 1\n  }\n});\nvar closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  }\n});\nvar animationStyles = {\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: \"\".concat(openAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration, \" both\")\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: \"\".concat(closeAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.acceleration, \" both\")\n  }\n};\n\nvar closeHandler = function closeHandler(close) {\n  return close();\n};\n\nvar emptyProps = {};\nvar Dialog = memo(function Dialog(_ref) {\n  var children = _ref.children,\n      _ref$cancelLabel = _ref.cancelLabel,\n      cancelLabel = _ref$cancelLabel === void 0 ? 'Cancel' : _ref$cancelLabel,\n      _ref$confirmLabel = _ref.confirmLabel,\n      confirmLabel = _ref$confirmLabel === void 0 ? 'Confirm' : _ref$confirmLabel,\n      _ref$containerProps = _ref.containerProps,\n      containerProps = _ref$containerProps === void 0 ? emptyProps : _ref$containerProps,\n      contentContainerProps = _ref.contentContainerProps,\n      footer = _ref.footer,\n      _ref$hasCancel = _ref.hasCancel,\n      hasCancel = _ref$hasCancel === void 0 ? true : _ref$hasCancel,\n      _ref$hasClose = _ref.hasClose,\n      hasClose = _ref$hasClose === void 0 ? true : _ref$hasClose,\n      _ref$hasFooter = _ref.hasFooter,\n      hasFooter = _ref$hasFooter === void 0 ? true : _ref$hasFooter,\n      _ref$hasHeader = _ref.hasHeader,\n      hasHeader = _ref$hasHeader === void 0 ? true : _ref$hasHeader,\n      header = _ref.header,\n      _ref$intent = _ref.intent,\n      intent = _ref$intent === void 0 ? 'none' : _ref$intent,\n      _ref$isConfirmDisable = _ref.isConfirmDisabled,\n      isConfirmDisabled = _ref$isConfirmDisable === void 0 ? false : _ref$isConfirmDisable,\n      _ref$isConfirmLoading = _ref.isConfirmLoading,\n      isConfirmLoading = _ref$isConfirmLoading === void 0 ? false : _ref$isConfirmLoading,\n      _ref$isShown = _ref.isShown,\n      isShown = _ref$isShown === void 0 ? false : _ref$isShown,\n      _ref$minHeightContent = _ref.minHeightContent,\n      minHeightContent = _ref$minHeightContent === void 0 ? 80 : _ref$minHeightContent,\n      _ref$onCancel = _ref.onCancel,\n      onCancel = _ref$onCancel === void 0 ? closeHandler : _ref$onCancel,\n      onCloseComplete = _ref.onCloseComplete,\n      _ref$onConfirm = _ref.onConfirm,\n      onConfirm = _ref$onConfirm === void 0 ? closeHandler : _ref$onConfirm,\n      onOpenComplete = _ref.onOpenComplete,\n      _ref$overlayProps = _ref.overlayProps,\n      overlayProps = _ref$overlayProps === void 0 ? emptyProps : _ref$overlayProps,\n      _ref$preventBodyScrol = _ref.preventBodyScrolling,\n      preventBodyScrolling = _ref$preventBodyScrol === void 0 ? false : _ref$preventBodyScrol,\n      _ref$shouldCloseOnEsc = _ref.shouldCloseOnEscapePress,\n      shouldCloseOnEscapePress = _ref$shouldCloseOnEsc === void 0 ? true : _ref$shouldCloseOnEsc,\n      _ref$shouldCloseOnOve = _ref.shouldCloseOnOverlayClick,\n      shouldCloseOnOverlayClick = _ref$shouldCloseOnOve === void 0 ? true : _ref$shouldCloseOnOve,\n      _ref$sideOffset = _ref.sideOffset,\n      sideOffset = _ref$sideOffset === void 0 ? '16px' : _ref$sideOffset,\n      title = _ref.title,\n      _ref$topOffset = _ref.topOffset,\n      topOffset = _ref$topOffset === void 0 ? '12vmin' : _ref$topOffset,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 560 : _ref$width;\n  var sideOffsetWithUnit = Number.isInteger(sideOffset) ? \"\".concat(sideOffset, \"px\") : sideOffset;\n  var maxWidth = \"calc(100% - \".concat(sideOffsetWithUnit, \" * 2)\");\n  var topOffsetWithUnit = Number.isInteger(topOffset) ? \"\".concat(topOffset, \"px\") : topOffset;\n  var maxHeight = \"calc(100% - \".concat(topOffsetWithUnit, \" * 2)\");\n\n  var renderChildren = function renderChildren(close) {\n    if (typeof children === 'function') {\n      return children({\n        close: close\n      });\n    }\n\n    if (typeof children === 'string') {\n      return React.createElement(Paragraph, null, children);\n    }\n\n    return children;\n  };\n\n  var renderNode = function renderNode(node, close) {\n    if (typeof node === 'function') {\n      return node({\n        close: close\n      });\n    }\n\n    return node;\n  };\n\n  var renderHeader = function renderHeader(close) {\n    if (!header && !hasHeader) {\n      return undefined;\n    }\n\n    return React.createElement(Pane, {\n      padding: 16,\n      flexShrink: 0,\n      borderBottom: \"muted\",\n      display: \"flex\",\n      alignItems: \"center\"\n    }, header ? renderNode(header, close) : React.createElement(React.Fragment, null, React.createElement(Heading, {\n      is: \"h4\",\n      size: 600,\n      flex: \"1\"\n    }, title), hasClose && React.createElement(IconButton, {\n      appearance: \"minimal\",\n      icon: CrossIcon,\n      onClick: function onClick() {\n        return onCancel(close);\n      }\n    })));\n  };\n\n  var renderFooter = function renderFooter(close) {\n    if (!footer && !hasFooter) {\n      return undefined;\n    }\n\n    return React.createElement(Pane, {\n      borderTop: \"muted\",\n      clearfix: true\n    }, React.createElement(Pane, {\n      padding: 16,\n      \"float\": \"right\"\n    }, footer ? renderNode(footer, close) : React.createElement(React.Fragment, null, hasCancel && React.createElement(Button, {\n      tabIndex: 0,\n      onClick: function onClick() {\n        return onCancel(close);\n      }\n    }, cancelLabel), React.createElement(Button, {\n      tabIndex: 0,\n      marginLeft: 8,\n      appearance: \"primary\",\n      isLoading: isConfirmLoading,\n      disabled: isConfirmDisabled,\n      onClick: function onClick() {\n        return onConfirm(close);\n      },\n      intent: intent\n    }, confirmLabel))));\n  };\n\n  return React.createElement(Overlay, {\n    isShown: isShown,\n    shouldCloseOnClick: shouldCloseOnOverlayClick,\n    shouldCloseOnEscapePress: shouldCloseOnEscapePress,\n    onExited: onCloseComplete,\n    onEntered: onOpenComplete,\n    containerProps: _objectSpread({\n      display: 'flex',\n      alignItems: 'flex-start',\n      justifyContent: 'center'\n    }, overlayProps),\n    preventBodyScrolling: preventBodyScrolling\n  }, function (_ref2) {\n    var state = _ref2.state,\n        close = _ref2.close;\n    return React.createElement(Pane, _extends({\n      role: \"dialog\",\n      backgroundColor: \"white\",\n      elevation: 4,\n      borderRadius: 8,\n      width: width,\n      maxWidth: maxWidth,\n      maxHeight: maxHeight,\n      marginX: sideOffsetWithUnit,\n      marginY: topOffsetWithUnit,\n      display: \"flex\",\n      flexDirection: \"column\",\n      css: animationStyles,\n      \"data-state\": state\n    }, containerProps), renderHeader(close), React.createElement(Pane, _extends({\n      \"data-state\": state,\n      display: \"flex\",\n      overflow: \"auto\",\n      padding: 16,\n      flexDirection: \"column\",\n      minHeight: minHeightContent\n    }, contentContainerProps), React.createElement(Pane, null, renderChildren(close))), renderFooter(close));\n  });\n});\nDialog.propTypes = {\n  /**\n   * Children can be a string, node or a function accepting `({ close })`.\n   * When passing a string, <Paragraph /> is used to wrap the string.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The intent of the Dialog. Used for the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * When true, the dialog is shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Title of the Dialog. Titles should use Title Case.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, the header with the title and close icon button is shown.\n   */\n  hasHeader: PropTypes.bool,\n\n  /**\n   * You can override the default header with your own custom component.\n   *\n   * This is useful if you want to provide a custom header and footer, while\n   * also enabling your Dialog's content to scroll.\n   *\n   * Header can either be a React node or a function accepting `({ close })`.\n   */\n  header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * When true, the footer with the cancel and confirm button is shown.\n   */\n  hasFooter: PropTypes.bool,\n\n  /**\n   * You can override the default footer with your own custom component.\n   *\n   * This is useful if you want to provide a custom header and footer, while\n   * also enabling your Dialog's content to scroll.\n   *\n   * Footer can either be a React node or a function accepting `({ close })`.\n   */\n  footer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * When true, the cancel button is shown.\n   */\n  hasCancel: PropTypes.bool,\n\n  /**\n   * When true, the close button is shown\n   */\n  hasClose: PropTypes.bool,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the confirm button is clicked.\n   * This does not close the Dialog. A close function will be passed\n   * as a paramater you can use to close the dialog.\n   *\n   * `onConfirm={(close) => close()}`\n   */\n  onConfirm: PropTypes.func,\n\n  /**\n   * Label of the confirm button.\n   */\n  confirmLabel: PropTypes.string,\n\n  /**\n   * When true, the confirm button is set to loading.\n   */\n  isConfirmLoading: PropTypes.bool,\n\n  /**\n   * When true, the confirm button is set to disabled.\n   */\n  isConfirmDisabled: PropTypes.bool,\n\n  /**\n   * Function that will be called when the cancel button is clicked.\n   * This closes the Dialog by default.\n   *\n   * `onCancel={(close) => close()}`\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * Label of the cancel button.\n   */\n  cancelLabel: PropTypes.string,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnOverlayClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Width of the Dialog.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space above the dialog.\n   * This offset is also used at the bottom when there is not enough vertical\n   * space available on screen — and the dialog scrolls internally.\n   */\n  topOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space on the left/right sides of the dialog when there isn't enough\n   * horizontal space available on screen.\n   */\n  sideOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The min height of the body content.\n   * Makes it less weird when only showing little content.\n   */\n  minHeightContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Props that are passed to the dialog container.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Props that are passed to the content container.\n   */\n  contentContainerProps: PropTypes.object,\n\n  /**\n   * Whether or not to prevent scrolling in the outer body\n   */\n  preventBodyScrolling: PropTypes.bool,\n\n  /**\n   * Props that are passed to the Overlay component.\n   */\n  overlayProps: PropTypes.object\n};\nexport default Dialog;","map":{"version":3,"sources":["../../../src/dialog/src/Dialog.js"],"names":["animationEasing","deceleration","acceleration","ANIMATION_DURATION","openAnimation","from","transform","opacity","to","closeAnimation","animationStyles","animation","closeHandler","close","emptyProps","Dialog","memo","children","cancelLabel","confirmLabel","containerProps","contentContainerProps","footer","hasCancel","hasClose","hasFooter","hasHeader","header","intent","isConfirmDisabled","isConfirmLoading","isShown","minHeightContent","onCancel","onCloseComplete","onConfirm","onOpenComplete","overlayProps","preventBodyScrolling","shouldCloseOnEscapePress","shouldCloseOnOverlayClick","sideOffset","title","topOffset","width","sideOffsetWithUnit","Number","maxWidth","topOffsetWithUnit","maxHeight","renderChildren","renderNode","node","renderHeader","renderFooter","display","alignItems","justifyContent","state","PropTypes","object"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport { css } from 'glamor'\nimport PropTypes from 'prop-types'\nimport { Pane } from '../../layers'\nimport { Paragraph, Heading } from '../../typography'\nimport { Overlay } from '../../overlay'\nimport { Button, IconButton } from '../../buttons'\nimport { CrossIcon } from '../../icons'\n\nconst animationEasing = {\n  deceleration: `cubic-bezier(0.0, 0.0, 0.2, 1)`,\n  acceleration: `cubic-bezier(0.4, 0.0, 1, 1)`\n}\n\nconst ANIMATION_DURATION = 200\n\nconst openAnimation = css.keyframes('openAnimation', {\n  from: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  },\n  to: {\n    transform: 'scale(1)',\n    opacity: 1\n  }\n})\n\nconst closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  }\n})\n\nconst animationStyles = {\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: `${openAnimation} ${ANIMATION_DURATION}ms ${animationEasing.deceleration} both`\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: `${closeAnimation} ${ANIMATION_DURATION}ms ${animationEasing.acceleration} both`\n  }\n}\n\nconst closeHandler = close => close()\nconst emptyProps = {}\n\nconst Dialog = memo(function Dialog({\n  children,\n  cancelLabel = 'Cancel',\n  confirmLabel = 'Confirm',\n  containerProps = emptyProps,\n  contentContainerProps,\n  footer,\n  hasCancel = true,\n  hasClose = true,\n  hasFooter = true,\n  hasHeader = true,\n  header,\n  intent = 'none',\n  isConfirmDisabled = false,\n  isConfirmLoading = false,\n  isShown = false,\n  minHeightContent = 80,\n  onCancel = closeHandler,\n  onCloseComplete,\n  onConfirm = closeHandler,\n  onOpenComplete,\n  overlayProps = emptyProps,\n  preventBodyScrolling = false,\n  shouldCloseOnEscapePress = true,\n  shouldCloseOnOverlayClick = true,\n  sideOffset = '16px',\n  title,\n  topOffset = '12vmin',\n  width = 560\n}) {\n  const sideOffsetWithUnit = Number.isInteger(sideOffset)\n    ? `${sideOffset}px`\n    : sideOffset\n  const maxWidth = `calc(100% - ${sideOffsetWithUnit} * 2)`\n\n  const topOffsetWithUnit = Number.isInteger(topOffset)\n    ? `${topOffset}px`\n    : topOffset\n  const maxHeight = `calc(100% - ${topOffsetWithUnit} * 2)`\n\n  const renderChildren = close => {\n    if (typeof children === 'function') {\n      return children({ close })\n    }\n\n    if (typeof children === 'string') {\n      return <Paragraph>{children}</Paragraph>\n    }\n\n    return children\n  }\n\n  const renderNode = (node, close) => {\n    if (typeof node === 'function') {\n      return node({ close })\n    }\n\n    return node\n  }\n\n  const renderHeader = close => {\n    if (!header && !hasHeader) {\n      return undefined\n    }\n\n    return (\n      <Pane\n        padding={16}\n        flexShrink={0}\n        borderBottom=\"muted\"\n        display=\"flex\"\n        alignItems=\"center\"\n      >\n        {header ? (\n          renderNode(header, close)\n        ) : (\n          <>\n            <Heading is=\"h4\" size={600} flex=\"1\">\n              {title}\n            </Heading>\n            {hasClose && (\n              <IconButton\n                appearance=\"minimal\"\n                icon={CrossIcon}\n                onClick={() => onCancel(close)}\n              />\n            )}\n          </>\n        )}\n      </Pane>\n    )\n  }\n\n  const renderFooter = close => {\n    if (!footer && !hasFooter) {\n      return undefined\n    }\n\n    return (\n      <Pane borderTop=\"muted\" clearfix>\n        <Pane padding={16} float=\"right\">\n          {footer ? (\n            renderNode(footer, close)\n          ) : (\n            <>\n              {/* Cancel should be first to make sure focus gets on it first. */}\n              {hasCancel && (\n                <Button tabIndex={0} onClick={() => onCancel(close)}>\n                  {cancelLabel}\n                </Button>\n              )}\n\n              <Button\n                tabIndex={0}\n                marginLeft={8}\n                appearance=\"primary\"\n                isLoading={isConfirmLoading}\n                disabled={isConfirmDisabled}\n                onClick={() => onConfirm(close)}\n                intent={intent}\n              >\n                {confirmLabel}\n              </Button>\n            </>\n          )}\n        </Pane>\n      </Pane>\n    )\n  }\n\n  return (\n    <Overlay\n      isShown={isShown}\n      shouldCloseOnClick={shouldCloseOnOverlayClick}\n      shouldCloseOnEscapePress={shouldCloseOnEscapePress}\n      onExited={onCloseComplete}\n      onEntered={onOpenComplete}\n      containerProps={{\n        display: 'flex',\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        ...overlayProps\n      }}\n      preventBodyScrolling={preventBodyScrolling}\n    >\n      {({ state, close }) => (\n        <Pane\n          role=\"dialog\"\n          backgroundColor=\"white\"\n          elevation={4}\n          borderRadius={8}\n          width={width}\n          maxWidth={maxWidth}\n          maxHeight={maxHeight}\n          marginX={sideOffsetWithUnit}\n          marginY={topOffsetWithUnit}\n          display=\"flex\"\n          flexDirection=\"column\"\n          css={animationStyles}\n          data-state={state}\n          {...containerProps}\n        >\n          {renderHeader(close)}\n\n          <Pane\n            data-state={state}\n            display=\"flex\"\n            overflow=\"auto\"\n            padding={16}\n            flexDirection=\"column\"\n            minHeight={minHeightContent}\n            {...contentContainerProps}\n          >\n            <Pane>{renderChildren(close)}</Pane>\n          </Pane>\n\n          {renderFooter(close)}\n        </Pane>\n      )}\n    </Overlay>\n  )\n})\n\nDialog.propTypes = {\n  /**\n   * Children can be a string, node or a function accepting `({ close })`.\n   * When passing a string, <Paragraph /> is used to wrap the string.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The intent of the Dialog. Used for the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * When true, the dialog is shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Title of the Dialog. Titles should use Title Case.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, the header with the title and close icon button is shown.\n   */\n  hasHeader: PropTypes.bool,\n\n  /**\n   * You can override the default header with your own custom component.\n   *\n   * This is useful if you want to provide a custom header and footer, while\n   * also enabling your Dialog's content to scroll.\n   *\n   * Header can either be a React node or a function accepting `({ close })`.\n   */\n  header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * When true, the footer with the cancel and confirm button is shown.\n   */\n  hasFooter: PropTypes.bool,\n\n  /**\n   * You can override the default footer with your own custom component.\n   *\n   * This is useful if you want to provide a custom header and footer, while\n   * also enabling your Dialog's content to scroll.\n   *\n   * Footer can either be a React node or a function accepting `({ close })`.\n   */\n  footer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * When true, the cancel button is shown.\n   */\n  hasCancel: PropTypes.bool,\n\n  /**\n   * When true, the close button is shown\n   */\n  hasClose: PropTypes.bool,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the confirm button is clicked.\n   * This does not close the Dialog. A close function will be passed\n   * as a paramater you can use to close the dialog.\n   *\n   * `onConfirm={(close) => close()}`\n   */\n  onConfirm: PropTypes.func,\n\n  /**\n   * Label of the confirm button.\n   */\n  confirmLabel: PropTypes.string,\n\n  /**\n   * When true, the confirm button is set to loading.\n   */\n  isConfirmLoading: PropTypes.bool,\n\n  /**\n   * When true, the confirm button is set to disabled.\n   */\n  isConfirmDisabled: PropTypes.bool,\n\n  /**\n   * Function that will be called when the cancel button is clicked.\n   * This closes the Dialog by default.\n   *\n   * `onCancel={(close) => close()}`\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * Label of the cancel button.\n   */\n  cancelLabel: PropTypes.string,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnOverlayClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Width of the Dialog.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space above the dialog.\n   * This offset is also used at the bottom when there is not enough vertical\n   * space available on screen — and the dialog scrolls internally.\n   */\n  topOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space on the left/right sides of the dialog when there isn't enough\n   * horizontal space available on screen.\n   */\n  sideOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The min height of the body content.\n   * Makes it less weird when only showing little content.\n   */\n  minHeightContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Props that are passed to the dialog container.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Props that are passed to the content container.\n   */\n  contentContainerProps: PropTypes.object,\n\n  /**\n   * Whether or not to prevent scrolling in the outer body\n   */\n  preventBodyScrolling: PropTypes.bool,\n\n  /**\n   * Props that are passed to the Overlay component.\n   */\n  overlayProps: PropTypes.object\n}\n\nexport default Dialog\n"]},"metadata":{},"sourceType":"module"}