{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { dimensions, spacing, position, layout } from 'ui-box';\nimport FormFieldLabel from './FormFieldLabel';\nimport FormFieldDescription from './FormFieldDescription';\nimport FormFieldValidationMessage from './FormFieldValidationMessage';\nimport FormFieldHint from './FormFieldHint';\nvar FormField = memo(forwardRef(function FormField(props, ref) {\n  var hint = props.hint,\n      label = props.label,\n      labelFor = props.labelFor,\n      children = props.children,\n      isRequired = props.isRequired,\n      _props$labelProps = props.labelProps,\n      labelProps = _props$labelProps === void 0 ? {\n    size: 400\n  } : _props$labelProps,\n      description = props.description,\n      validationMessage = props.validationMessage,\n      rest = _objectWithoutProperties(props, [\"hint\", \"label\", \"labelFor\", \"children\", \"isRequired\", \"labelProps\", \"description\", \"validationMessage\"]);\n\n  return React.createElement(Box, _extends({}, rest, {\n    ref: ref\n  }), React.createElement(FormFieldLabel, _extends({\n    htmlFor: labelFor,\n    isAstrixShown: isRequired,\n    marginBottom: description ? 0 : 4\n  }, labelProps), label), typeof description === 'string' ? React.createElement(FormFieldDescription, {\n    marginBottom: 4\n  }, description) : description, children, typeof validationMessage === 'string' ? React.createElement(FormFieldValidationMessage, {\n    marginTop: 8\n  }, validationMessage) : validationMessage, typeof hint === 'string' ? React.createElement(FormFieldHint, {\n    marginTop: 6\n  }, hint) : hint);\n}));\nFormField.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n  /**\n   * The label used above the input element.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Passed on the label as a htmlFor prop.\n   */\n  labelFor: PropTypes.string,\n\n  /**\n   * Whether or not show an asterix after the label.\n   */\n  isRequired: PropTypes.bool,\n\n  /**\n   * An optional description of the field under the label, above the input element.\n   */\n  description: PropTypes.node,\n\n  /**\n   * An optional hint under the input element.\n   */\n  hint: PropTypes.node,\n\n  /**\n   * If a validation message is passed it is shown under the input element\n   * and above the hint. This is unaffected by `isInvalid`.\n   */\n  validationMessage: PropTypes.node\n}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes);\nexport default FormField;","map":{"version":3,"sources":["../../../src/form-field/src/FormField.js"],"names":["FormField","memo","forwardRef","hint","label","labelFor","children","isRequired","labelProps","size","description","validationMessage","rest","props","ref","PropTypes","node","dimensions","spacing","position","layout"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport Box, { dimensions, spacing, position, layout } from 'ui-box'\nimport FormFieldLabel from './FormFieldLabel'\nimport FormFieldDescription from './FormFieldDescription'\nimport FormFieldValidationMessage from './FormFieldValidationMessage'\nimport FormFieldHint from './FormFieldHint'\n\nconst FormField = memo(\n  forwardRef(function FormField(props, ref) {\n    const {\n      hint,\n      label,\n      labelFor,\n      children,\n      isRequired,\n      labelProps = { size: 400 },\n      description,\n      validationMessage,\n      ...rest\n    } = props\n\n    return (\n      <Box {...rest} ref={ref}>\n        <FormFieldLabel\n          htmlFor={labelFor}\n          isAstrixShown={isRequired}\n          marginBottom={description ? 0 : 4}\n          {...labelProps}\n        >\n          {label}\n        </FormFieldLabel>\n        {typeof description === 'string' ? (\n          <FormFieldDescription marginBottom={4}>\n            {description}\n          </FormFieldDescription>\n        ) : (\n          description\n        )}\n        {children}\n        {typeof validationMessage === 'string' ? (\n          <FormFieldValidationMessage marginTop={8}>\n            {validationMessage}\n          </FormFieldValidationMessage>\n        ) : (\n          validationMessage\n        )}\n        {typeof hint === 'string' ? (\n          <FormFieldHint marginTop={6}>{hint}</FormFieldHint>\n        ) : (\n          hint\n        )}\n      </Box>\n    )\n  })\n)\n\nFormField.propTypes = {\n  /**\n   * The label used above the input element.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Passed on the label as a htmlFor prop.\n   */\n  labelFor: PropTypes.string,\n\n  /**\n   * Whether or not show an asterix after the label.\n   */\n  isRequired: PropTypes.bool,\n\n  /**\n   * An optional description of the field under the label, above the input element.\n   */\n  description: PropTypes.node,\n\n  /**\n   * An optional hint under the input element.\n   */\n  hint: PropTypes.node,\n\n  /**\n   * If a validation message is passed it is shown under the input element\n   * and above the hint. This is unaffected by `isInvalid`.\n   */\n  validationMessage: PropTypes.node,\n\n  /**\n   * Composes the dimensions spec from the Box primitive.\n   */\n  ...dimensions.propTypes,\n\n  /**\n   * Composes the spacing spec from the Box primitive.\n   */\n  ...spacing.propTypes,\n\n  /**\n   * Composes the position spec from the Box primitive.\n   */\n  ...position.propTypes,\n\n  /**\n   * Composes the layout spec from the Box primitive.\n   */\n  ...layout.propTypes\n}\n\nexport default FormField\n"]},"metadata":{},"sourceType":"module"}