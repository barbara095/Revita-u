{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '../../theme';\nimport Text from './Text';\nvar Link = memo(forwardRef(function Link(props, ref) {\n  var theme = useTheme();\n\n  var className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      restProps = _objectWithoutProperties(props, [\"className\", \"color\"]);\n\n  var themedClassName = theme.getLinkClassName(color);\n  return React.createElement(Text, _extends({\n    is: \"a\",\n    ref: ref,\n    className: cx(className, themedClassName),\n    textDecoration: \"underline\",\n    color: null\n  }, restProps));\n}));\nLink.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  /**\n   * This attribute names a relationship of the linked document to the current document.\n   * Common use case is: rel=\"noopener noreferrer\".\n   */\n  rel: PropTypes.string,\n\n  /**\n   * Specifies the URL of the linked resource. A URL might be absolute or relative.\n   */\n  href: PropTypes.string,\n\n  /**\n   * Target atrribute, common use case is target=\"_blank.\"\n   */\n  target: PropTypes.string,\n\n  /**\n   * The color (and styling) of the Link. Can be default, blue, green or neutral.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Class name passed to the link.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default Link;","map":{"version":3,"sources":["../../../src/typography/src/Link.js"],"names":["Link","memo","forwardRef","theme","useTheme","className","color","restProps","props","themedClassName","cx","Text","rel","PropTypes","href","target","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,QAAA,OAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,QAAA,QAAA,aAAA;AACA,OAAA,IAAA,MAAA,QAAA;AAEA,IAAMA,IAAI,GAAGC,IAAI,CACfC,UAAU,CAAC,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAA0B;AACnC,MAAMC,KAAK,GAAGC,QAAd,EAAA;;AADmC,MAE3BC,SAF2B,GAEoBG,KAFpB,CAAA,SAAA;AAAA,MAAA,YAAA,GAEoBA,KAFpB,CAAA,KAAA;AAAA,MAEhBF,KAFgB,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,YAAA;AAAA,MAEMC,SAFN,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,WAAA,EAAA,OAAA,CAAA,CAAA;;AAGnC,MAAME,eAAe,GAAGN,KAAK,CAALA,gBAAAA,CAAxB,KAAwBA,CAAxB;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,EAAE,EADJ,GAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,SAAS,EAAEO,EAAE,CAAA,SAAA,EAHf,eAGe,CAHf;AAIE,IAAA,cAAc,EAJhB,WAAA;AAKE,IAAA,KAAK,EAAE;AALT,GAAA,EADF,SACE,CAAA,CADF;AANJ,CACY,CADK,CAAjB;AAmBAV,IAAI,CAAJA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKW,IAAI,CADTX,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAGE;;;;AAIAY,EAAAA,GAAG,EAAEC,SAAS,CAPhBb,MAAAA;;AASE;;;AAGAc,EAAAA,IAAI,EAAED,SAAS,CAZjBb,MAAAA;;AAcE;;;AAGAe,EAAAA,MAAM,EAAEF,SAAS,CAjBnBb,MAAAA;;AAmBE;;;AAGAM,EAAAA,KAAK,EAAEO,SAAS,CAtBlBb,MAAAA;;AAwBE;;;;AAIAK,EAAAA,SAAS,EAAEQ,SAAS,CAACG;AA5BvBhB,CAAAA,CAAAA;AA+BA,eAAA,IAAA","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '../../theme'\nimport Text from './Text'\n\nconst Link = memo(\n  forwardRef(function Link(props, ref) {\n    const theme = useTheme()\n    const { className, color = 'default', ...restProps } = props\n    const themedClassName = theme.getLinkClassName(color)\n\n    return (\n      <Text\n        is=\"a\"\n        ref={ref}\n        className={cx(className, themedClassName)}\n        textDecoration=\"underline\"\n        color={null}\n        {...restProps}\n      />\n    )\n  })\n)\n\nLink.propTypes = {\n  ...Text.propTypes,\n\n  /**\n   * This attribute names a relationship of the linked document to the current document.\n   * Common use case is: rel=\"noopener noreferrer\".\n   */\n  rel: PropTypes.string,\n\n  /**\n   * Specifies the URL of the linked resource. A URL might be absolute or relative.\n   */\n  href: PropTypes.string,\n\n  /**\n   * Target atrribute, common use case is target=\"_blank.\"\n   */\n  target: PropTypes.string,\n\n  /**\n   * The color (and styling) of the Link. Can be default, blue, green or neutral.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Class name passed to the link.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default Link\n"]},"metadata":{},"sourceType":"module"}