{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, dimensions, position, layout } from 'ui-box';\nimport { useTheme } from '../../theme';\nimport { Pane } from '../../layers';\nimport { Heading, Paragraph } from '../../typography';\nimport { IconButton } from '../../buttons';\nimport { CrossIcon } from '../../icons';\nimport { getIconForIntent } from './getIconForIntent';\nvar Alert = memo(forwardRef(function Alert(props, ref) {\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      children = props.children,\n      _props$hasIcon = props.hasIcon,\n      hasIcon = _props$hasIcon === void 0 ? true : _props$hasIcon,\n      _props$hasTrim = props.hasTrim,\n      hasTrim = _props$hasTrim === void 0 ? true : _props$hasTrim,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      _props$isRemoveable = props.isRemoveable,\n      isRemoveable = _props$isRemoveable === void 0 ? false : _props$isRemoveable,\n      onRemove = props.onRemove,\n      title = props.title,\n      restProps = _objectWithoutProperties(props, [\"appearance\", \"children\", \"hasIcon\", \"hasTrim\", \"intent\", \"isRemoveable\", \"onRemove\", \"title\"]);\n\n  var theme = useTheme();\n  /**\n   * Note that Alert return a className and additional properties.\n   */\n\n  var _theme$getAlertProps = theme.getAlertProps({\n    appearance: appearance,\n    intent: intent,\n    hasTrim: hasTrim\n  }),\n      className = _theme$getAlertProps.className,\n      themeProps = _objectWithoutProperties(_theme$getAlertProps, [\"className\"]);\n\n  return React.createElement(Pane, _extends({\n    ref: ref,\n    className: className,\n    role: \"alert\",\n    backgroundColor: \"white\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    display: \"flex\",\n    paddingY: 12,\n    paddingX: 16\n  }, themeProps, restProps), hasIcon && React.createElement(Pane, {\n    marginRight: 10,\n    marginLeft: 2,\n    height: 20,\n    display: \"flex\",\n    alignItems: \"center\"\n  }, getIconForIntent(intent, {\n    size: 14\n  })), React.createElement(Pane, {\n    display: \"flex\",\n    width: \"100%\"\n  }, React.createElement(Pane, {\n    flex: 1\n  }, React.createElement(Heading, {\n    is: \"h4\",\n    fontWeight: 600,\n    size: 400,\n    marginTop: 0,\n    marginBottom: 0\n  }, title), typeof children === 'string' ? React.createElement(Paragraph, {\n    size: 400,\n    color: \"muted\"\n  }, children) : children), isRemoveable && React.createElement(Pane, {\n    marginLeft: 24,\n    flexShrink: 0,\n    marginBottom: -2,\n    marginTop: -2,\n    marginRight: -2\n  }, React.createElement(IconButton, {\n    icon: CrossIcon,\n    appearance: \"minimal\",\n    height: 24,\n    onClick: onRemove\n  }))));\n}));\nAlert.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The content of the alert. When a string is passed it is wrapped in a `<Text size={400} />` component.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The title of the alert.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, show a border on the left matching the type.\n   */\n  hasTrim: PropTypes.bool,\n\n  /**\n   * When true, show a icon on the left matching the type,\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * When true, show a remove icon button.\n   */\n  isRemoveable: PropTypes.bool,\n\n  /**\n   * Function called when the remove button is clicked.\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * The appearance of the alert.\n   */\n  appearance: PropTypes.oneOf(['default', 'card'])\n});\nexport default Alert;","map":{"version":3,"sources":["../../../src/alert/src/Alert.js"],"names":["Alert","memo","forwardRef","appearance","children","hasIcon","hasTrim","intent","isRemoveable","onRemove","title","restProps","props","theme","useTheme","className","themeProps","getIconForIntent","size","spacing","position","layout","dimensions","PropTypes"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { spacing, dimensions, position, layout } from 'ui-box'\nimport { useTheme } from '../../theme'\nimport { Pane } from '../../layers'\nimport { Heading, Paragraph } from '../../typography'\nimport { IconButton } from '../../buttons'\nimport { CrossIcon } from '../../icons'\nimport { getIconForIntent } from './getIconForIntent'\n\nconst Alert = memo(\n  forwardRef(function Alert(props, ref) {\n    const {\n      appearance = 'default',\n      children,\n      hasIcon = true,\n      hasTrim = true,\n      intent = 'none',\n      isRemoveable = false,\n      onRemove,\n      title,\n      ...restProps\n    } = props\n\n    const theme = useTheme()\n\n    /**\n     * Note that Alert return a className and additional properties.\n     */\n    const { className, ...themeProps } = theme.getAlertProps({\n      appearance,\n      intent,\n      hasTrim\n    })\n\n    return (\n      <Pane\n        ref={ref}\n        className={className}\n        role=\"alert\"\n        backgroundColor=\"white\"\n        overflow=\"hidden\"\n        position=\"relative\"\n        display=\"flex\"\n        paddingY={12}\n        paddingX={16}\n        {...themeProps}\n        {...restProps}\n      >\n        {hasIcon && (\n          <Pane\n            marginRight={10}\n            marginLeft={2}\n            height={20}\n            display=\"flex\"\n            alignItems=\"center\"\n          >\n            {getIconForIntent(intent, { size: 14 })}\n          </Pane>\n        )}\n        <Pane display=\"flex\" width=\"100%\">\n          <Pane flex={1}>\n            <Heading\n              is=\"h4\"\n              fontWeight={600}\n              size={400}\n              marginTop={0}\n              marginBottom={0}\n            >\n              {title}\n            </Heading>\n            {typeof children === 'string' ? (\n              <Paragraph size={400} color=\"muted\">\n                {children}\n              </Paragraph>\n            ) : (\n              children\n            )}\n          </Pane>\n          {isRemoveable && (\n            <Pane\n              marginLeft={24}\n              flexShrink={0}\n              marginBottom={-2}\n              marginTop={-2}\n              marginRight={-2}\n            >\n              <IconButton\n                icon={CrossIcon}\n                appearance=\"minimal\"\n                height={24}\n                onClick={onRemove}\n              />\n            </Pane>\n          )}\n        </Pane>\n      </Pane>\n    )\n  })\n)\n\nAlert.propTypes = {\n  /**\n   * Composes some Box APIs.\n   */\n  ...spacing.propTypes,\n  ...position.propTypes,\n  ...layout.propTypes,\n  ...dimensions.propTypes,\n\n  /**\n   * The content of the alert. When a string is passed it is wrapped in a `<Text size={400} />` component.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The title of the alert.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, show a border on the left matching the type.\n   */\n  hasTrim: PropTypes.bool,\n\n  /**\n   * When true, show a icon on the left matching the type,\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * When true, show a remove icon button.\n   */\n  isRemoveable: PropTypes.bool,\n\n  /**\n   * Function called when the remove button is clicked.\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * The appearance of the alert.\n   */\n  appearance: PropTypes.oneOf(['default', 'card'])\n}\n\nexport default Alert\n"]},"metadata":{},"sourceType":"module"}