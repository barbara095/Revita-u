{"ast":null,"code":"(function () {\n  var Query, coreChars, countDir, getCharCodes, getExtension, opt_char_re, truncatedUpperCase, _ref;\n\n  _ref = require(\"./pathScorer\"), countDir = _ref.countDir, getExtension = _ref.getExtension;\n\n  module.exports = Query = function () {\n    function Query(query, _arg) {\n      var optCharRegEx, pathSeparator, _ref1;\n\n      _ref1 = _arg != null ? _arg : {}, optCharRegEx = _ref1.optCharRegEx, pathSeparator = _ref1.pathSeparator;\n\n      if (!(query && query.length)) {\n        return null;\n      }\n\n      this.query = query;\n      this.query_lw = query.toLowerCase();\n      this.core = coreChars(query, optCharRegEx);\n      this.core_lw = this.core.toLowerCase();\n      this.core_up = truncatedUpperCase(this.core);\n      this.depth = countDir(query, query.length, pathSeparator);\n      this.ext = getExtension(this.query_lw);\n      this.charCodes = getCharCodes(this.query_lw);\n    }\n\n    return Query;\n  }();\n\n  opt_char_re = /[ _\\-:\\/\\\\]/g;\n\n  coreChars = function (query, optCharRegEx) {\n    if (optCharRegEx == null) {\n      optCharRegEx = opt_char_re;\n    }\n\n    return query.replace(optCharRegEx, '');\n  };\n\n  truncatedUpperCase = function (str) {\n    var char, upper, _i, _len;\n\n    upper = \"\";\n\n    for (_i = 0, _len = str.length; _i < _len; _i++) {\n      char = str[_i];\n      upper += char.toUpperCase()[0];\n    }\n\n    return upper;\n  };\n\n  getCharCodes = function (str) {\n    var charCodes, i, len;\n    len = str.length;\n    i = -1;\n    charCodes = [];\n\n    while (++i < len) {\n      charCodes[str.charCodeAt(i)] = true;\n    }\n\n    return charCodes;\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/barbpotiriadis/revita-u/client/node_modules/fuzzaldrin-plus/lib/query.js"],"names":["Query","coreChars","countDir","getCharCodes","getExtension","opt_char_re","truncatedUpperCase","_ref","require","module","exports","query","_arg","optCharRegEx","pathSeparator","_ref1","length","query_lw","toLowerCase","core","core_lw","core_up","depth","ext","charCodes","replace","str","char","upper","_i","_len","toUpperCase","i","len","charCodeAt","call"],"mappings":"AAAA,CAAC,YAAW;AACV,MAAIA,KAAJ,EAAWC,SAAX,EAAsBC,QAAtB,EAAgCC,YAAhC,EAA8CC,YAA9C,EAA4DC,WAA5D,EAAyEC,kBAAzE,EAA6FC,IAA7F;;AAEAA,EAAAA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAd,EAAgCN,QAAQ,GAAGK,IAAI,CAACL,QAAhD,EAA0DE,YAAY,GAAGG,IAAI,CAACH,YAA9E;;AAEAK,EAAAA,MAAM,CAACC,OAAP,GAAiBV,KAAK,GAAI,YAAW;AACnC,aAASA,KAAT,CAAeW,KAAf,EAAsBC,IAAtB,EAA4B;AAC1B,UAAIC,YAAJ,EAAkBC,aAAlB,EAAiCC,KAAjC;;AACAA,MAAAA,KAAK,GAAGH,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsB,EAA9B,EAAkCC,YAAY,GAAGE,KAAK,CAACF,YAAvD,EAAqEC,aAAa,GAAGC,KAAK,CAACD,aAA3F;;AACA,UAAI,EAAEH,KAAK,IAAIA,KAAK,CAACK,MAAjB,CAAJ,EAA8B;AAC5B,eAAO,IAAP;AACD;;AACD,WAAKL,KAAL,GAAaA,KAAb;AACA,WAAKM,QAAL,GAAgBN,KAAK,CAACO,WAAN,EAAhB;AACA,WAAKC,IAAL,GAAYlB,SAAS,CAACU,KAAD,EAAQE,YAAR,CAArB;AACA,WAAKO,OAAL,GAAe,KAAKD,IAAL,CAAUD,WAAV,EAAf;AACA,WAAKG,OAAL,GAAef,kBAAkB,CAAC,KAAKa,IAAN,CAAjC;AACA,WAAKG,KAAL,GAAapB,QAAQ,CAACS,KAAD,EAAQA,KAAK,CAACK,MAAd,EAAsBF,aAAtB,CAArB;AACA,WAAKS,GAAL,GAAWnB,YAAY,CAAC,KAAKa,QAAN,CAAvB;AACA,WAAKO,SAAL,GAAiBrB,YAAY,CAAC,KAAKc,QAAN,CAA7B;AACD;;AAED,WAAOjB,KAAP;AAED,GAnBwB,EAAzB;;AAqBAK,EAAAA,WAAW,GAAG,cAAd;;AAEAJ,EAAAA,SAAS,GAAG,UAASU,KAAT,EAAgBE,YAAhB,EAA8B;AACxC,QAAIA,YAAY,IAAI,IAApB,EAA0B;AACxBA,MAAAA,YAAY,GAAGR,WAAf;AACD;;AACD,WAAOM,KAAK,CAACc,OAAN,CAAcZ,YAAd,EAA4B,EAA5B,CAAP;AACD,GALD;;AAOAP,EAAAA,kBAAkB,GAAG,UAASoB,GAAT,EAAc;AACjC,QAAIC,IAAJ,EAAUC,KAAV,EAAiBC,EAAjB,EAAqBC,IAArB;;AACAF,IAAAA,KAAK,GAAG,EAAR;;AACA,SAAKC,EAAE,GAAG,CAAL,EAAQC,IAAI,GAAGJ,GAAG,CAACV,MAAxB,EAAgCa,EAAE,GAAGC,IAArC,EAA2CD,EAAE,EAA7C,EAAiD;AAC/CF,MAAAA,IAAI,GAAGD,GAAG,CAACG,EAAD,CAAV;AACAD,MAAAA,KAAK,IAAID,IAAI,CAACI,WAAL,GAAmB,CAAnB,CAAT;AACD;;AACD,WAAOH,KAAP;AACD,GARD;;AAUAzB,EAAAA,YAAY,GAAG,UAASuB,GAAT,EAAc;AAC3B,QAAIF,SAAJ,EAAeQ,CAAf,EAAkBC,GAAlB;AACAA,IAAAA,GAAG,GAAGP,GAAG,CAACV,MAAV;AACAgB,IAAAA,CAAC,GAAG,CAAC,CAAL;AACAR,IAAAA,SAAS,GAAG,EAAZ;;AACA,WAAO,EAAEQ,CAAF,GAAMC,GAAb,EAAkB;AAChBT,MAAAA,SAAS,CAACE,GAAG,CAACQ,UAAJ,CAAeF,CAAf,CAAD,CAAT,GAA+B,IAA/B;AACD;;AACD,WAAOR,SAAP;AACD,GATD;AAWD,CAxDD,EAwDGW,IAxDH,CAwDQ,IAxDR","sourcesContent":["(function() {\n  var Query, coreChars, countDir, getCharCodes, getExtension, opt_char_re, truncatedUpperCase, _ref;\n\n  _ref = require(\"./pathScorer\"), countDir = _ref.countDir, getExtension = _ref.getExtension;\n\n  module.exports = Query = (function() {\n    function Query(query, _arg) {\n      var optCharRegEx, pathSeparator, _ref1;\n      _ref1 = _arg != null ? _arg : {}, optCharRegEx = _ref1.optCharRegEx, pathSeparator = _ref1.pathSeparator;\n      if (!(query && query.length)) {\n        return null;\n      }\n      this.query = query;\n      this.query_lw = query.toLowerCase();\n      this.core = coreChars(query, optCharRegEx);\n      this.core_lw = this.core.toLowerCase();\n      this.core_up = truncatedUpperCase(this.core);\n      this.depth = countDir(query, query.length, pathSeparator);\n      this.ext = getExtension(this.query_lw);\n      this.charCodes = getCharCodes(this.query_lw);\n    }\n\n    return Query;\n\n  })();\n\n  opt_char_re = /[ _\\-:\\/\\\\]/g;\n\n  coreChars = function(query, optCharRegEx) {\n    if (optCharRegEx == null) {\n      optCharRegEx = opt_char_re;\n    }\n    return query.replace(optCharRegEx, '');\n  };\n\n  truncatedUpperCase = function(str) {\n    var char, upper, _i, _len;\n    upper = \"\";\n    for (_i = 0, _len = str.length; _i < _len; _i++) {\n      char = str[_i];\n      upper += char.toUpperCase()[0];\n    }\n    return upper;\n  };\n\n  getCharCodes = function(str) {\n    var charCodes, i, len;\n    len = str.length;\n    i = -1;\n    charCodes = [];\n    while (++i < len) {\n      charCodes[str.charCodeAt(i)] = true;\n    }\n    return charCodes;\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}