{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { memo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport { TickIcon } from '../../icons';\nimport { useTheme } from '../../theme';\n\nvar noop = function noop() {};\n\nvar MenuOption = memo(function MenuOption(props) {\n  var id = props.id,\n      children = props.children,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,\n      secondaryText = props.secondaryText,\n      _props$isSelected = props.isSelected,\n      isSelected = _props$isSelected === void 0 ? false : _props$isSelected;\n  var handleClick = useCallback(function (e) {\n    return onSelect(e);\n  }, [onSelect]);\n  var handleKeyPress = useCallback(function (e) {\n    if (e.key === 'Enter' || e.key === ' ') {\n      onSelect(e);\n      e.preventDefault();\n    }\n  }, [onSelect]);\n  var theme = useTheme();\n  var themedClassName = theme.getMenuItemClassName(appearance, 'none');\n  var textProps = isSelected ? {\n    color: 'selected',\n    fontWeight: 500,\n    marginLeft: 16\n  } : {\n    marginLeft: 44\n  };\n  return React.createElement(Pane, {\n    id: id,\n    role: \"menuitemradio\",\n    tabIndex: 0,\n    className: themedClassName,\n    onClick: handleClick,\n    onKeyPress: handleKeyPress,\n    \"data-isselectable\": \"true\",\n    \"aria-checked\": isSelected,\n    height: 40,\n    display: \"flex\",\n    alignItems: \"center\"\n  }, isSelected && React.createElement(TickIcon, {\n    \"aria-hidden\": true,\n    color: \"selected\",\n    marginLeft: 16,\n    marginRight: -4,\n    size: 16,\n    flexShrink: 0\n  }), React.createElement(Text, _extends({}, textProps, {\n    marginRight: 16,\n    flex: 1\n  }), children), secondaryText && React.createElement(Text, {\n    marginRight: 16,\n    color: \"muted\"\n  }, secondaryText));\n});\nMenuOption.propTypes = {\n  /**\n   * The id attribute of the menu option.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * The icon before the label.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * The children of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Secondary text shown on the right.\n   */\n  secondaryText: PropTypes.node,\n\n  /**\n   * The default theme only supports one default appearance.\n   */\n  appearance: PropTypes.string\n};\nexport default MenuOption;","map":{"version":3,"sources":["../../../src/menu/src/MenuOption.js"],"names":["noop","MenuOption","memo","id","children","appearance","onSelect","secondaryText","isSelected","props","handleClick","useCallback","handleKeyPress","e","theme","useTheme","themedClassName","textProps","color","fontWeight","marginLeft","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { Pane } from '../../layers'\nimport { Text } from '../../typography'\nimport { TickIcon } from '../../icons'\nimport { useTheme } from '../../theme'\n\nconst noop = () => {}\n\nconst MenuOption = memo(function MenuOption(props) {\n  const {\n    id,\n    children,\n    appearance = 'default',\n    onSelect = noop,\n    secondaryText,\n    isSelected = false\n  } = props\n\n  const handleClick = useCallback(e => onSelect(e), [onSelect])\n\n  const handleKeyPress = useCallback(\n    e => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        onSelect(e)\n        e.preventDefault()\n      }\n    },\n    [onSelect]\n  )\n\n  const theme = useTheme()\n  const themedClassName = theme.getMenuItemClassName(appearance, 'none')\n\n  const textProps = isSelected\n    ? {\n        color: 'selected',\n        fontWeight: 500,\n        marginLeft: 16\n      }\n    : { marginLeft: 44 }\n\n  return (\n    <Pane\n      id={id}\n      role=\"menuitemradio\"\n      tabIndex={0}\n      className={themedClassName}\n      onClick={handleClick}\n      onKeyPress={handleKeyPress}\n      data-isselectable=\"true\"\n      aria-checked={isSelected}\n      height={40}\n      display=\"flex\"\n      alignItems=\"center\"\n    >\n      {isSelected && (\n        <TickIcon\n          aria-hidden\n          color=\"selected\"\n          marginLeft={16}\n          marginRight={-4}\n          size={16}\n          flexShrink={0}\n        />\n      )}\n      <Text {...textProps} marginRight={16} flex={1}>\n        {children}\n      </Text>\n      {secondaryText && (\n        <Text marginRight={16} color=\"muted\">\n          {secondaryText}\n        </Text>\n      )}\n    </Pane>\n  )\n})\n\nMenuOption.propTypes = {\n  /**\n   * The id attribute of the menu option.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * The icon before the label.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * The children of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Secondary text shown on the right.\n   */\n  secondaryText: PropTypes.node,\n\n  /**\n   * The default theme only supports one default appearance.\n   */\n  appearance: PropTypes.string\n}\n\nexport default MenuOption\n"]},"metadata":{},"sourceType":"module"}