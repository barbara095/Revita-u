{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React, { memo, forwardRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport cx from 'classnames';\nimport { Text } from '../../typography';\nimport { useTheme } from '../../theme';\nimport { majorScale } from '../../scales';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { useId } from '../../hooks';\nimport Tag from './Tag';\nvar GET_KEY_FOR_TAG_DELIMITER = {\n  enter: 'Enter',\n  space: ' '\n};\nvar emptyProps = {};\nvar emptyArray = [];\nvar TagInput = memo(forwardRef(function TagInput(props, ref) {\n  var _props$addOnBlur = props.addOnBlur,\n      addOnBlur = _props$addOnBlur === void 0 ? false : _props$addOnBlur,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      _props$separator = props.separator,\n      separator = _props$separator === void 0 ? /[,\\n\\r]/ : _props$separator,\n      _props$values = props.values,\n      values = _props$values === void 0 ? emptyArray : _props$values,\n      _props$tagSubmitKey = props.tagSubmitKey,\n      tagSubmitKey = _props$tagSubmitKey === void 0 ? 'enter' : _props$tagSubmitKey,\n      _props$tagProps = props.tagProps,\n      tagProps = _props$tagProps === void 0 ? emptyProps : _props$tagProps,\n      onAdd = props.onAdd,\n      onChange = props.onChange,\n      onRemove = props.onRemove,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      onInputChange = props.onInputChange,\n      className = props.className,\n      _props$inputProps = props.inputProps,\n      inputProps = _props$inputProps === void 0 ? {} : _props$inputProps,\n      inputRef = props.inputRef,\n      rest = _objectWithoutProperties(props, [\"addOnBlur\", \"disabled\", \"height\", \"separator\", \"values\", \"tagSubmitKey\", \"tagProps\", \"onAdd\", \"onChange\", \"onRemove\", \"onBlur\", \"onFocus\", \"onInputChange\", \"className\", \"inputProps\", \"inputRef\"]);\n\n  var theme = useTheme();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFocused = _useState4[0],\n      setIsFocused = _useState4[1];\n\n  var id = useId('TagInput');\n\n  var getValues = function getValues() {\n    var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return separator ? inputValue.split(separator).map(function (v) {\n      return v.trim();\n    }).filter(function (v) {\n      return v.length > 0;\n    }) : [inputValue];\n  };\n\n  var addTags = function addTags() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var newValues = getValues(value);\n    var shouldClearInput = safeInvoke(onAdd, newValues);\n\n    if (typeof onChange === 'function') {\n      shouldClearInput = shouldClearInput || onChange(values.concat(newValues));\n    }\n\n    if (shouldClearInput !== false) {\n      setInputValue('');\n    }\n  };\n\n  var removeTagAtIndex = function removeTagAtIndex(index) {\n    safeInvoke(onRemove, values[index], index); // Remove item at index as a new array\n\n    var newValues = values.filter(function (_, i) {\n      return i !== index;\n    });\n    safeInvoke(onChange, newValues);\n  };\n\n  var handleBackspaceToRemove = function handleBackspaceToRemove() {\n    removeTagAtIndex(values.length - 1);\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var container = event.target;\n    requestAnimationFrame(function () {\n      if (!container.contains(document.activeElement)) {\n        if (addOnBlur && inputValue) {\n          addTags(inputValue);\n        }\n\n        setIsFocused(false);\n      }\n    });\n    safeInvoke(onBlur, event);\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    setInputValue(event.target.value);\n    safeInvoke(onInputChange, event);\n  };\n\n  var handleInputFocus = function handleInputFocus(event) {\n    setIsFocused(true);\n    safeInvoke(onFocus, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var _event$target = event.target,\n        selectionEnd = _event$target.selectionEnd,\n        value = _event$target.value;\n    var key = GET_KEY_FOR_TAG_DELIMITER[tagSubmitKey];\n\n    if (event.key === key) {\n      event.preventDefault();\n      addTags(value);\n    } else if (event.key === 'Backspace' && selectionEnd === 0) {\n      handleBackspaceToRemove(event);\n    }\n  };\n\n  var handleRemoveTag = function handleRemoveTag(event) {\n    // Using data attribute to simplify callback logic -- one handler for all children\n    var index = Number(event.currentTarget.parentElement.getAttribute('data-tag-index'));\n    removeTagAtIndex(index);\n  };\n\n  var maybeRenderTag = function maybeRenderTag(tag, index) {\n    if (!tag) {\n      return null;\n    }\n\n    var propsForElement = safeInvoke(tagProps, tag, index) || tagProps;\n    return React.createElement(Tag, _extends({\n      key: \"\".concat(tag, \":\").concat(index),\n      \"data-tag-index\": index,\n      marginRight: majorScale(1),\n      marginY: \"6px\",\n      onRemove: disabled ? null : handleRemoveTag,\n      isRemovable: !disabled\n    }, propsForElement), tag);\n  };\n\n  var themedContainerClassName = theme.getTagInputClassName('default');\n  var textSize = theme.getTextSizeForControlHeight(height);\n  var borderRadius = theme.getBorderRadiusForControlHeight(height);\n  var themedInputClassName = cx(theme.getTextInputClassName('none'), inputProps.className);\n  return React.createElement(Box, _extends({\n    \"aria-disabled\": disabled || undefined,\n    \"aria-activedescendant\": isFocused ? id : undefined,\n    borderRadius: borderRadius,\n    className: cx(themedContainerClassName, className),\n    paddingLeft: Math.round(height / 3.2),\n    paddingRight: Math.round(height / 3.2),\n    paddingY: \"2px\",\n    ref: ref\n  }, rest, {\n    onBlur: handleBlur\n  }), values.map(maybeRenderTag), React.createElement(Text, _extends({\n    is: \"input\",\n    id: id,\n    color: disabled ? 'muted' : undefined,\n    disabled: disabled,\n    flexGrow: \"1\",\n    height: height - 4,\n    size: textSize,\n    type: \"text\",\n    value: inputValue\n  }, inputProps, {\n    className: themedInputClassName,\n    ref: inputRef,\n    onChange: handleInputChange,\n    onFocus: handleInputFocus,\n    onKeyDown: handleKeyDown\n  })));\n}));\nTagInput.propTypes = {\n  /** Whether or not the inputValue should be added to the tags when the input blurs. */\n  addOnBlur: PropTypes.bool,\n\n  /** The class name to apply to the container component. */\n  className: PropTypes.string,\n\n  /** Whether or not the input should be disabled. */\n  disabled: PropTypes.bool,\n\n  /** The vertical size of the input */\n  height: PropTypes.number,\n\n  /** Props to pass to the input component. Note that `ref` and `key` are not supported. See `inputRef`. */\n  inputProps: PropTypes.object,\n\n  /**\n   * Ref handler for the input element.\n   * (input: HTMLInputElement | null) => void\n   */\n  inputRef: PropTypes.func,\n\n  /**\n   * Callback invoked when new tags are added.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onAdd: PropTypes.func,\n\n  /**\n   * Callback invoked when focus on the input blurs.\n   * (event) => void\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback invoked when the tag values change.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback invoked when the input receives focus.\n   * (event) => void\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback invoked when the value of the input is changed. Shorthand for `inputProps={{ onChange }}`.\n   * (event) => void\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback invoked when a tag is removed.\n   * Receives value and index of removed tag.\n   * (value: string | node, index: number) => void\n   */\n  onRemove: PropTypes.func,\n\n  /** Value or RegExp to split on pasted text or on enter keypress */\n  separator: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([false])]),\n\n  /** Provide props to tag component (actually `Badge`, for now). */\n  tagProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /** Key to press in order to submit a new tag while typing.  */\n  tagSubmitKey: PropTypes.oneOf(['enter', 'space']),\n\n  /** Controlled tag values. Each value is rendered inside a tag. */\n  values: PropTypes.arrayOf(PropTypes.node)\n};\nexport default TagInput;","map":{"version":3,"sources":["../../../src/tag-input/src/TagInput.js"],"names":["GET_KEY_FOR_TAG_DELIMITER","enter","space","emptyProps","emptyArray","TagInput","memo","forwardRef","addOnBlur","disabled","height","separator","values","tagSubmitKey","tagProps","onAdd","onChange","onRemove","onBlur","onFocus","onInputChange","className","inputProps","inputRef","rest","props","theme","useTheme","inputValue","setInputValue","useState","isFocused","setIsFocused","id","useId","getValues","v","addTags","value","newValues","shouldClearInput","safeInvoke","removeTagAtIndex","i","handleBackspaceToRemove","handleBlur","container","event","requestAnimationFrame","document","handleInputChange","handleInputFocus","handleKeyDown","selectionEnd","key","handleRemoveTag","index","Number","maybeRenderTag","propsForElement","majorScale","themedContainerClassName","textSize","borderRadius","themedInputClassName","cx","Math","ref","PropTypes"],"mappings":"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","sourcesContent":["/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React, { memo, forwardRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport cx from 'classnames'\nimport { Text } from '../../typography'\nimport { useTheme } from '../../theme'\nimport { majorScale } from '../../scales'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { useId } from '../../hooks'\nimport Tag from './Tag'\n\nconst GET_KEY_FOR_TAG_DELIMITER = {\n  enter: 'Enter',\n  space: ' '\n}\n\nconst emptyProps = {}\nconst emptyArray = []\n\nconst TagInput = memo(\n  forwardRef(function TagInput(props, ref) {\n    const {\n      addOnBlur = false,\n      disabled = false,\n      height = 32,\n      separator = /[,\\n\\r]/,\n      values = emptyArray,\n      tagSubmitKey = 'enter',\n      tagProps = emptyProps,\n      onAdd,\n      onChange,\n      onRemove,\n      onBlur,\n      onFocus,\n      onInputChange,\n      className,\n      inputProps = {},\n      inputRef,\n      ...rest\n    } = props\n    const theme = useTheme()\n\n    const [inputValue, setInputValue] = useState('')\n    const [isFocused, setIsFocused] = useState(false)\n    const id = useId('TagInput')\n\n    const getValues = (inputValue = '') =>\n      separator\n        ? inputValue\n            .split(separator)\n            .map(v => v.trim())\n            .filter(v => v.length > 0)\n        : [inputValue]\n\n    const addTags = (value = '') => {\n      const newValues = getValues(value)\n      let shouldClearInput = safeInvoke(onAdd, newValues)\n\n      if (typeof onChange === 'function') {\n        shouldClearInput =\n          shouldClearInput || onChange(values.concat(newValues))\n      }\n\n      if (shouldClearInput !== false) {\n        setInputValue('')\n      }\n    }\n\n    const removeTagAtIndex = index => {\n      safeInvoke(onRemove, values[index], index)\n\n      // Remove item at index as a new array\n      const newValues = values.filter((_, i) => i !== index)\n      safeInvoke(onChange, newValues)\n    }\n\n    const handleBackspaceToRemove = () => {\n      removeTagAtIndex(values.length - 1)\n    }\n\n    const handleBlur = event => {\n      const container = event.target\n\n      requestAnimationFrame(() => {\n        if (!container.contains(document.activeElement)) {\n          if (addOnBlur && inputValue) {\n            addTags(inputValue)\n          }\n\n          setIsFocused(false)\n        }\n      })\n\n      safeInvoke(onBlur, event)\n    }\n\n    const handleInputChange = event => {\n      setInputValue(event.target.value)\n      safeInvoke(onInputChange, event)\n    }\n\n    const handleInputFocus = event => {\n      setIsFocused(true)\n      safeInvoke(onFocus, event)\n    }\n\n    const handleKeyDown = event => {\n      const { selectionEnd, value } = event.target\n      const key = GET_KEY_FOR_TAG_DELIMITER[tagSubmitKey]\n\n      if (event.key === key) {\n        event.preventDefault()\n        addTags(value)\n      } else if (event.key === 'Backspace' && selectionEnd === 0) {\n        handleBackspaceToRemove(event)\n      }\n    }\n\n    const handleRemoveTag = event => {\n      // Using data attribute to simplify callback logic -- one handler for all children\n      const index = Number(\n        event.currentTarget.parentElement.getAttribute('data-tag-index')\n      )\n      removeTagAtIndex(index)\n    }\n\n    const maybeRenderTag = (tag, index) => {\n      if (!tag) {\n        return null\n      }\n\n      const propsForElement = safeInvoke(tagProps, tag, index) || tagProps\n\n      return (\n        <Tag\n          key={`${tag}:${index}`}\n          data-tag-index={index}\n          marginRight={majorScale(1)}\n          marginY=\"6px\"\n          onRemove={disabled ? null : handleRemoveTag}\n          isRemovable={!disabled}\n          {...propsForElement}\n        >\n          {tag}\n        </Tag>\n      )\n    }\n\n    const themedContainerClassName = theme.getTagInputClassName('default')\n    const textSize = theme.getTextSizeForControlHeight(height)\n    const borderRadius = theme.getBorderRadiusForControlHeight(height)\n    const themedInputClassName = cx(theme.getTextInputClassName('none'), inputProps.className)\n\n    return (\n      <Box\n        aria-disabled={disabled || undefined}\n        aria-activedescendant={isFocused ? id : undefined}\n        borderRadius={borderRadius}\n        className={cx(themedContainerClassName, className)}\n        paddingLeft={Math.round(height / 3.2)}\n        paddingRight={Math.round(height / 3.2)}\n        paddingY=\"2px\"\n        ref={ref}\n        {...rest}\n        onBlur={handleBlur}\n      >\n        {values.map(maybeRenderTag)}\n        <Text\n          is=\"input\"\n          id={id}\n          color={disabled ? 'muted' : undefined}\n          disabled={disabled}\n          flexGrow=\"1\"\n          height={height - 4}\n          size={textSize}\n          type=\"text\"\n          value={inputValue}\n          {...inputProps}\n          className={themedInputClassName}\n          ref={inputRef}\n          onChange={handleInputChange}\n          onFocus={handleInputFocus}\n          onKeyDown={handleKeyDown}\n        />\n      </Box>\n    )\n  })\n)\n\nTagInput.propTypes = {\n  /** Whether or not the inputValue should be added to the tags when the input blurs. */\n  addOnBlur: PropTypes.bool,\n  /** The class name to apply to the container component. */\n  className: PropTypes.string,\n  /** Whether or not the input should be disabled. */\n  disabled: PropTypes.bool,\n  /** The vertical size of the input */\n  height: PropTypes.number,\n  /** Props to pass to the input component. Note that `ref` and `key` are not supported. See `inputRef`. */\n  inputProps: PropTypes.object,\n  /**\n   * Ref handler for the input element.\n   * (input: HTMLInputElement | null) => void\n   */\n  inputRef: PropTypes.func,\n  /**\n   * Callback invoked when new tags are added.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onAdd: PropTypes.func,\n  /**\n   * Callback invoked when focus on the input blurs.\n   * (event) => void\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback invoked when the tag values change.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback invoked when the input receives focus.\n   * (event) => void\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Callback invoked when the value of the input is changed. Shorthand for `inputProps={{ onChange }}`.\n   * (event) => void\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback invoked when a tag is removed.\n   * Receives value and index of removed tag.\n   * (value: string | node, index: number) => void\n   */\n  onRemove: PropTypes.func,\n  /** Value or RegExp to split on pasted text or on enter keypress */\n  separator: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.instanceOf(RegExp),\n    PropTypes.oneOf([false])\n  ]),\n  /** Provide props to tag component (actually `Badge`, for now). */\n  tagProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /** Key to press in order to submit a new tag while typing.  */\n  tagSubmitKey: PropTypes.oneOf(['enter', 'space']),\n  /** Controlled tag values. Each value is rendered inside a tag. */\n  values: PropTypes.arrayOf(PropTypes.node)\n}\n\nexport default TagInput\n"]},"metadata":{},"sourceType":"module"}