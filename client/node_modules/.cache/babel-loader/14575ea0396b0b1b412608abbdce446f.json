{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { memo, useState, useEffect, useRef } from 'react';\nimport cx from 'classnames';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport Box from 'ui-box';\nimport { Portal } from '../../portal';\nimport { Stack } from '../../stack';\nimport { StackingOrder } from '../../constants';\nimport { useTheme } from '../../theme';\nimport safeInvoke from '../../lib/safe-invoke';\nimport preventBodyScroll from '../../lib/prevent-body-scroll';\n\nvar noop = function noop() {};\n\nvar emptyProps = {};\nvar animationEasing = {\n  standard: \"cubic-bezier(0.4, 0.0, 0.2, 1)\",\n  deceleration: \"cubic-bezier(0.0, 0.0, 0.2, 1)\",\n  acceleration: \"cubic-bezier(0.4, 0.0, 1, 1)\",\n  sharp: \"cubic-bezier(0.4, 0.0, 0.6, 1)\",\n  spring: \"cubic-bezier(0.175, 0.885, 0.320, 1.175)\"\n};\nvar ANIMATION_DURATION = 240;\nvar fadeInAnimation = css.keyframes('fadeInAnimation', {\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar fadeOutAnimation = css.keyframes('fadeOutAnimation', {\n  from: {\n    opacity: 1\n  },\n  to: {\n    opacity: 0\n  }\n});\n\nvar animationStyles = function animationStyles(backgroundColor) {\n  return {\n    '&::before': {\n      backgroundColor: backgroundColor,\n      left: 0,\n      top: 0,\n      position: 'fixed',\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      content: '\" \"'\n    },\n    '&[data-state=\"entering\"]::before, &[data-state=\"entered\"]::before': {\n      animation: \"\".concat(fadeInAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration, \" both\")\n    },\n    '&[data-state=\"exiting\"]::before, &[data-state=\"exited\"]::before': {\n      animation: \"\".concat(fadeOutAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.acceleration, \" both\")\n    }\n  };\n};\n/**\n * Overlay is essentially a wrapper around react-transition-group/Transition\n */\n\n\nvar Overlay = memo(function Overlay(_ref) {\n  var children = _ref.children,\n      _ref$containerProps = _ref.containerProps,\n      containerProps = _ref$containerProps === void 0 ? emptyProps : _ref$containerProps,\n      _ref$preventBodyScrol = _ref.preventBodyScrolling,\n      preventBodyScrolling = _ref$preventBodyScrol === void 0 ? false : _ref$preventBodyScrol,\n      _ref$shouldCloseOnCli = _ref.shouldCloseOnClick,\n      shouldCloseOnClick = _ref$shouldCloseOnCli === void 0 ? true : _ref$shouldCloseOnCli,\n      _ref$shouldCloseOnEsc = _ref.shouldCloseOnEscapePress,\n      shouldCloseOnEscapePress = _ref$shouldCloseOnEsc === void 0 ? true : _ref$shouldCloseOnEsc,\n      onBeforeClose = _ref.onBeforeClose,\n      _ref$onExit = _ref.onExit,\n      onExit = _ref$onExit === void 0 ? noop : _ref$onExit,\n      _ref$onExiting = _ref.onExiting,\n      onExiting = _ref$onExiting === void 0 ? noop : _ref$onExiting,\n      _ref$onExited = _ref.onExited,\n      onExited = _ref$onExited === void 0 ? noop : _ref$onExited,\n      _ref$onEnter = _ref.onEnter,\n      onEnter = _ref$onEnter === void 0 ? noop : _ref$onEnter,\n      _ref$onEntering = _ref.onEntering,\n      onEntering = _ref$onEntering === void 0 ? noop : _ref$onEntering,\n      _ref$onEntered = _ref.onEntered,\n      onEntered = _ref$onEntered === void 0 ? noop : _ref$onEntered,\n      isShown = _ref.isShown,\n      props = _objectWithoutProperties(_ref, [\"children\", \"containerProps\", \"preventBodyScrolling\", \"shouldCloseOnClick\", \"shouldCloseOnEscapePress\", \"onBeforeClose\", \"onExit\", \"onExiting\", \"onExited\", \"onEnter\", \"onEntering\", \"onEntered\", \"isShown\"]);\n\n  var theme = useTheme();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      previousActiveElement = _useState2[0],\n      setPreviousActiveElement = _useState2[1];\n\n  var _useState3 = useState(isShown ? 'entering' : 'exited'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var containerRef = useRef();\n  useEffect(function () {\n    if (isShown) {\n      setStatus('entering');\n    }\n  }, [isShown]);\n\n  var close = function close() {\n    var shouldClose = safeInvoke(props.onBeforeClose);\n\n    if (shouldClose !== false) {\n      setStatus('exiting');\n    }\n  };\n\n  var onEsc = function onEsc(event) {\n    if (event.key === 'Escape' && shouldCloseOnEscapePress) {\n      close();\n    }\n  };\n\n  useEffect(function () {\n    if (status === 'entered') {\n      setPreviousActiveElement(document.activeElement);\n      bringFocusInsideOverlay();\n    }\n\n    if (status === 'entering') {\n      document.body.addEventListener('keydown', onEsc, false);\n    }\n\n    if (status === 'exiting') {\n      document.body.removeEventListener('keydown', onEsc, false);\n      bringFocusBackToTarget();\n    }\n  }, [status]); // ComponentWillUnmount\n\n  useEffect(function () {\n    return function () {\n      handleBodyScroll(false);\n      document.body.removeEventListener('keydown', onEsc, false);\n    };\n  }, []);\n  /**\n   * Methods borrowed from BlueprintJS\n   * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx\n   */\n\n  var bringFocusInsideOverlay = function bringFocusInsideOverlay() {\n    // Always delay focus manipulation to just before repaint to prevent scroll jumping\n    return requestAnimationFrame(function () {\n      // Container ref may be undefined between component mounting and Portal rendering\n      // activeElement may be undefined in some rare cases in IE\n      if (containerRef.current == null || // eslint-disable-line eqeqeq, no-eq-null\n      document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null\n      !isShown) {\n        return;\n      }\n\n      var isFocusOutsideModal = !containerRef.current.contains(document.activeElement);\n\n      if (isFocusOutsideModal) {\n        // Element marked autofocus has higher priority than the other clowns\n        var autofocusElement = containerRef.current.querySelector('[autofocus]');\n        var wrapperElement = containerRef.current.querySelector('[tabindex]');\n        var buttonElement = containerRef.current.querySelector('button');\n\n        if (autofocusElement) {\n          autofocusElement.focus();\n        } else if (wrapperElement) {\n          wrapperElement.focus();\n        } else if (buttonElement) {\n          buttonElement.focus();\n        }\n      }\n    });\n  };\n\n  var bringFocusBackToTarget = function bringFocusBackToTarget() {\n    return requestAnimationFrame(function () {\n      if (previousActiveElement == null || // eslint-disable-line eqeqeq, no-eq-null\n      containerRef.current == null || // eslint-disable-line eqeqeq, no-eq-null\n      document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null\n      ) {\n          return;\n        } // Bring back focus on the target.\n\n\n      var isFocusInsideModal = containerRef.current.contains(document.activeElement);\n\n      if (document.activeElement === document.body || isFocusInsideModal) {\n        previousActiveElement.focus();\n      }\n    });\n  };\n\n  var handleBodyScroll = function handleBodyScroll(preventScroll) {\n    if (preventBodyScrolling) {\n      preventBodyScroll(preventScroll);\n    }\n  };\n\n  var handleEnter = function handleEnter(node, isAppearing) {\n    handleBodyScroll(true);\n    safeInvoke(onEnter, node, isAppearing);\n  };\n\n  var handleEntering = function handleEntering(node, isAppearing) {\n    setStatus('entering');\n    safeInvoke(onEntering, node, isAppearing);\n  };\n\n  var handleEntered = function handleEntered(node, isAppearing) {\n    setStatus('entered');\n    safeInvoke(onEntered, node, isAppearing);\n  };\n\n  var handleExit = function handleExit(node) {\n    handleBodyScroll(false);\n    safeInvoke(onExit, node);\n  };\n\n  var handleExiting = function handleExiting(node) {\n    setStatus('exiting');\n    safeInvoke(onExiting, node);\n  };\n\n  var handleExited = function handleExited(node) {\n    setStatus('exited');\n    safeInvoke(onExited, node);\n  };\n\n  var handleBackdropClick = function handleBackdropClick(event) {\n    if (event.target !== event.currentTarget || !shouldCloseOnClick) {\n      return;\n    }\n\n    close();\n  };\n\n  if (status === 'exited') {\n    return null;\n  }\n\n  return React.createElement(Stack, {\n    value: StackingOrder.OVERLAY\n  }, function (zIndex) {\n    return React.createElement(Portal, null, React.createElement(Transition, {\n      appear: true,\n      unmountOnExit: true,\n      timeout: ANIMATION_DURATION,\n      \"in\": isShown && status !== 'exiting',\n      onExit: handleExit,\n      onExiting: handleExiting,\n      onExited: handleExited,\n      onEnter: handleEnter,\n      onEntering: handleEntering,\n      onEntered: handleEntered\n    }, function (state) {\n      return React.createElement(Box, _extends({\n        onClick: handleBackdropClick,\n        ref: containerRef,\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: zIndex,\n        \"data-state\": state\n      }, containerProps, {\n        className: cx(containerProps.className, css(animationStyles(theme.overlayBackgroundColor)).toString())\n      }), typeof children === 'function' ? children({\n        state: state,\n        close: close\n      }) : children);\n    }));\n  });\n});\nOverlay.propTypes = {\n  /**\n   * Children can be a node or a function accepting `close: func`\n   * and `state: ENTERING | ENTERED | EXITING | EXITED`.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Props to be passed through on the inner Box.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Whether or not to prevent body scrolling outside the context of the overlay\n   */\n  preventBodyScrolling: PropTypes.bool,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Function called when overlay is about to close.\n   * Return `false` to prevent the sheet from closing.\n   * type: `Function -> Boolean`\n   */\n  onBeforeClose: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   * type: `Function(node: HtmlElement) -> void`\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   * type: `Function(node: HtmlElement) -> void`\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   * type: `Function(exitState: Any?, node: HtmlElement) -> void`\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEntered: PropTypes.func\n};\nexport default Overlay;","map":{"version":3,"sources":["../../../src/overlay/src/Overlay.js"],"names":["noop","emptyProps","animationEasing","standard","deceleration","acceleration","sharp","spring","ANIMATION_DURATION","fadeInAnimation","from","opacity","to","fadeOutAnimation","animationStyles","backgroundColor","left","top","position","display","width","height","content","animation","Overlay","memo","children","containerProps","preventBodyScrolling","shouldCloseOnClick","shouldCloseOnEscapePress","onBeforeClose","onExit","onExiting","onExited","onEnter","onEntering","onEntered","isShown","props","theme","useTheme","previousActiveElement","setPreviousActiveElement","useState","status","setStatus","containerRef","useRef","useEffect","close","shouldClose","safeInvoke","onEsc","event","document","bringFocusInsideOverlay","bringFocusBackToTarget","handleBodyScroll","requestAnimationFrame","isFocusOutsideModal","autofocusElement","wrapperElement","buttonElement","isFocusInsideModal","preventBodyScroll","handleEnter","handleEntering","handleEntered","handleExit","handleExiting","handleExited","handleBackdropClick","StackingOrder","OVERLAY","state","cx","css","PropTypes","func"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect, useRef } from 'react'\nimport cx from 'classnames'\nimport { css } from 'glamor'\nimport PropTypes from 'prop-types'\nimport { Transition } from 'react-transition-group'\nimport Box from 'ui-box'\nimport { Portal } from '../../portal'\nimport { Stack } from '../../stack'\nimport { StackingOrder } from '../../constants'\nimport { useTheme } from '../../theme'\nimport safeInvoke from '../../lib/safe-invoke'\nimport preventBodyScroll from '../../lib/prevent-body-scroll'\n\nconst noop = () => {}\nconst emptyProps = {}\n\nconst animationEasing = {\n  standard: `cubic-bezier(0.4, 0.0, 0.2, 1)`,\n  deceleration: `cubic-bezier(0.0, 0.0, 0.2, 1)`,\n  acceleration: `cubic-bezier(0.4, 0.0, 1, 1)`,\n  sharp: `cubic-bezier(0.4, 0.0, 0.6, 1)`,\n  spring: `cubic-bezier(0.175, 0.885, 0.320, 1.175)`\n}\n\nconst ANIMATION_DURATION = 240\n\nconst fadeInAnimation = css.keyframes('fadeInAnimation', {\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n})\n\nconst fadeOutAnimation = css.keyframes('fadeOutAnimation', {\n  from: {\n    opacity: 1\n  },\n  to: {\n    opacity: 0\n  }\n})\n\nconst animationStyles = backgroundColor => ({\n  '&::before': {\n    backgroundColor,\n    left: 0,\n    top: 0,\n    position: 'fixed',\n    display: 'block',\n    width: '100%',\n    height: '100%',\n    content: '\" \"'\n  },\n  '&[data-state=\"entering\"]::before, &[data-state=\"entered\"]::before': {\n    animation: `${fadeInAnimation} ${ANIMATION_DURATION}ms ${animationEasing.deceleration} both`\n  },\n  '&[data-state=\"exiting\"]::before, &[data-state=\"exited\"]::before': {\n    animation: `${fadeOutAnimation} ${ANIMATION_DURATION}ms ${animationEasing.acceleration} both`\n  }\n})\n\n/**\n * Overlay is essentially a wrapper around react-transition-group/Transition\n */\nconst Overlay = memo(function Overlay({\n  children,\n  containerProps = emptyProps,\n  preventBodyScrolling = false,\n  shouldCloseOnClick = true,\n  shouldCloseOnEscapePress = true,\n  onBeforeClose,\n  onExit = noop,\n  onExiting = noop,\n  onExited = noop,\n  onEnter = noop,\n  onEntering = noop,\n  onEntered = noop,\n  isShown,\n  ...props\n}) {\n  const theme = useTheme()\n  const [previousActiveElement, setPreviousActiveElement] = useState(null)\n  const [status, setStatus] = useState(isShown ? 'entering' : 'exited')\n  const containerRef = useRef()\n\n  useEffect(() => {\n    if (isShown) {\n      setStatus('entering')\n    }\n  }, [isShown])\n\n  const close = () => {\n    const shouldClose = safeInvoke(props.onBeforeClose)\n    if (shouldClose !== false) {\n      setStatus('exiting')\n    }\n  }\n\n  const onEsc = event => {\n    if (event.key === 'Escape' && shouldCloseOnEscapePress) {\n      close()\n    }\n  }\n\n  useEffect(() => {\n    if (status === 'entered') {\n      setPreviousActiveElement(document.activeElement)\n      bringFocusInsideOverlay()\n    }\n\n    if (status === 'entering') {\n      document.body.addEventListener('keydown', onEsc, false)\n    }\n\n    if (status === 'exiting') {\n      document.body.removeEventListener('keydown', onEsc, false)\n      bringFocusBackToTarget()\n    }\n  }, [status])\n\n  // ComponentWillUnmount\n  useEffect(\n    () => () => {\n      handleBodyScroll(false)\n      document.body.removeEventListener('keydown', onEsc, false)\n    },\n    []\n  )\n\n  /**\n   * Methods borrowed from BlueprintJS\n   * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx\n   */\n  const bringFocusInsideOverlay = () => {\n    // Always delay focus manipulation to just before repaint to prevent scroll jumping\n    return requestAnimationFrame(() => {\n      // Container ref may be undefined between component mounting and Portal rendering\n      // activeElement may be undefined in some rare cases in IE\n\n      if (\n        containerRef.current == null || // eslint-disable-line eqeqeq, no-eq-null\n        document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null\n        !isShown\n      ) {\n        return\n      }\n\n      const isFocusOutsideModal = !containerRef.current.contains(\n        document.activeElement\n      )\n      if (isFocusOutsideModal) {\n        // Element marked autofocus has higher priority than the other clowns\n        const autofocusElement = containerRef.current.querySelector(\n          '[autofocus]'\n        )\n        const wrapperElement = containerRef.current.querySelector('[tabindex]')\n        const buttonElement = containerRef.current.querySelector('button')\n\n        if (autofocusElement) {\n          autofocusElement.focus()\n        } else if (wrapperElement) {\n          wrapperElement.focus()\n        } else if (buttonElement) {\n          buttonElement.focus()\n        }\n      }\n    })\n  }\n\n  const bringFocusBackToTarget = () => {\n    return requestAnimationFrame(() => {\n      if (\n        previousActiveElement == null || // eslint-disable-line eqeqeq, no-eq-null\n        containerRef.current == null || // eslint-disable-line eqeqeq, no-eq-null\n        document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null\n      ) {\n        return\n      }\n\n      // Bring back focus on the target.\n      const isFocusInsideModal = containerRef.current.contains(\n        document.activeElement\n      )\n      if (document.activeElement === document.body || isFocusInsideModal) {\n        previousActiveElement.focus()\n      }\n    })\n  }\n\n  const handleBodyScroll = preventScroll => {\n    if (preventBodyScrolling) {\n      preventBodyScroll(preventScroll)\n    }\n  }\n\n  const handleEnter = (node, isAppearing) => {\n    handleBodyScroll(true)\n    safeInvoke(onEnter, node, isAppearing)\n  }\n\n  const handleEntering = (node, isAppearing) => {\n    setStatus('entering')\n    safeInvoke(onEntering, node, isAppearing)\n  }\n\n  const handleEntered = (node, isAppearing) => {\n    setStatus('entered')\n    safeInvoke(onEntered, node, isAppearing)\n  }\n\n  const handleExit = node => {\n    handleBodyScroll(false)\n    safeInvoke(onExit, node)\n  }\n\n  const handleExiting = node => {\n    setStatus('exiting')\n    safeInvoke(onExiting, node)\n  }\n\n  const handleExited = node => {\n    setStatus('exited')\n    safeInvoke(onExited, node)\n  }\n\n  const handleBackdropClick = event => {\n    if (event.target !== event.currentTarget || !shouldCloseOnClick) {\n      return\n    }\n\n    close()\n  }\n\n  if (status === 'exited') {\n    return null\n  }\n\n  return (\n    <Stack value={StackingOrder.OVERLAY}>\n      {zIndex => (\n        <Portal>\n          <Transition\n            appear\n            unmountOnExit\n            timeout={ANIMATION_DURATION}\n            in={isShown && status !== 'exiting'}\n            onExit={handleExit}\n            onExiting={handleExiting}\n            onExited={handleExited}\n            onEnter={handleEnter}\n            onEntering={handleEntering}\n            onEntered={handleEntered}\n          >\n            {state => (\n              <Box\n                onClick={handleBackdropClick}\n                ref={containerRef}\n                position=\"fixed\"\n                top={0}\n                left={0}\n                right={0}\n                bottom={0}\n                zIndex={zIndex}\n                data-state={state}\n                {...containerProps}\n                className={cx(\n                  containerProps.className,\n                  css(animationStyles(theme.overlayBackgroundColor)).toString()\n                )}\n              >\n                {typeof children === 'function'\n                  ? children({ state, close })\n                  : children}\n              </Box>\n            )}\n          </Transition>\n        </Portal>\n      )}\n    </Stack>\n  )\n})\n\nOverlay.propTypes = {\n  /**\n   * Children can be a node or a function accepting `close: func`\n   * and `state: ENTERING | ENTERED | EXITING | EXITED`.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Props to be passed through on the inner Box.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Whether or not to prevent body scrolling outside the context of the overlay\n   */\n  preventBodyScrolling: PropTypes.bool,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Function called when overlay is about to close.\n   * Return `false` to prevent the sheet from closing.\n   * type: `Function -> Boolean`\n   */\n  onBeforeClose: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   * type: `Function(node: HtmlElement) -> void`\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   * type: `Function(node: HtmlElement) -> void`\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   * type: `Function(exitState: Any?, node: HtmlElement) -> void`\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEntered: PropTypes.func\n}\n\nexport default Overlay\n"]},"metadata":{},"sourceType":"module"}