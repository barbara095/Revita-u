{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box, { splitBoxProps } from 'ui-box';\nimport { SearchIcon } from '../../icons';\nimport { TextInput } from '../../text-input';\nimport { useTheme } from '../../theme';\nimport { StackingOrder } from '../../constants';\nvar SearchInput = memo(forwardRef(function SearchInput(props, ref) {\n  var theme = useTheme();\n\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      disabled = props.disabled,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      restProps = _objectWithoutProperties(props, [\"appearance\", \"disabled\", \"height\"]);\n\n  var _splitBoxProps = splitBoxProps(restProps),\n      matchedProps = _splitBoxProps.matchedProps,\n      remainingProps = _splitBoxProps.remainingProps;\n\n  var width = matchedProps.width;\n  var iconSize = theme.getIconSizeForInput(height);\n  return React.createElement(Box, _extends({\n    position: \"relative\",\n    display: \"inline-flex\",\n    height: height,\n    ref: ref\n  }, matchedProps), React.createElement(Box, {\n    height: height,\n    width: height,\n    pointerEvents: \"none\",\n    position: \"absolute\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, React.createElement(SearchIcon, {\n    color: \"default\",\n    zIndex: StackingOrder.FOCUSED + 1,\n    size: iconSize\n  })), React.createElement(TextInput, _extends({\n    height: height,\n    paddingLeft: height,\n    appearance: appearance,\n    disabled: disabled,\n    width: width,\n    type: \"search\"\n  }, remainingProps)));\n}));\nSearchInput.propTypes = _objectSpread({}, TextInput.propTypes);\nexport default SearchInput;","map":{"version":3,"sources":["../../../src/search-input/src/SearchInput.js"],"names":["SearchInput","memo","forwardRef","theme","useTheme","appearance","disabled","height","restProps","props","matchedProps","remainingProps","splitBoxProps","width","iconSize","ref","StackingOrder","TextInput"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA,IAAA,aAAA,QAAA,QAAA;AACA,SAAA,UAAA,QAAA,aAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AACA,SAAA,QAAA,QAAA,aAAA;AACA,SAAA,aAAA,QAAA,iBAAA;AAEA,IAAMA,WAAW,GAAGC,IAAI,CACtBC,UAAU,CAAC,SAAA,WAAA,CAAA,KAAA,EAAA,GAAA,EAAiC;AAC1C,MAAMC,KAAK,GAAGC,QAAd,EAAA;;AAD0C,MAAA,iBAAA,GAOtCK,KAPsC,CAAA,UAAA;AAAA,MAGxCJ,UAHwC,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,iBAAA;AAAA,MAIxCC,QAJwC,GAOtCG,KAPsC,CAAA,QAAA;AAAA,MAAA,aAAA,GAOtCA,KAPsC,CAAA,MAAA;AAAA,MAKxCF,MALwC,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,aAAA;AAAA,MAMrCC,SANqC,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,YAAA,EAAA,UAAA,EAAA,QAAA,CAAA,CAAA;;AAAA,MAAA,cAAA,GAQDI,aAAa,CARZ,SAQY,CARZ;AAAA,MAQlCF,YARkC,GAAA,cAAA,CAAA,YAAA;AAAA,MAQpBC,cARoB,GAAA,cAAA,CAAA,cAAA;;AAAA,MASlCE,KATkC,GASxBH,YATwB,CAAA,KAAA;AAU1C,MAAMI,QAAQ,GAAGX,KAAK,CAALA,mBAAAA,CAAjB,MAAiBA,CAAjB;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,QAAQ,EADV,UAAA;AAEE,IAAA,OAAO,EAFT,aAAA;AAGE,IAAA,MAAM,EAHR,MAAA;AAIE,IAAA,GAAG,EAAEY;AAJP,GAAA,EAAA,YAAA,CAAA,EAOE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,IAAA,MAAM,EADR,MAAA;AAEE,IAAA,KAAK,EAFP,MAAA;AAGE,IAAA,aAAa,EAHf,MAAA;AAIE,IAAA,QAAQ,EAJV,UAAA;AAKE,IAAA,OAAO,EALT,MAAA;AAME,IAAA,cAAc,EANhB,QAAA;AAOE,IAAA,UAAU,EAAC;AAPb,GAAA,EASE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,IAAA,KAAK,EADP,SAAA;AAEE,IAAA,MAAM,EAAEC,aAAa,CAAbA,OAAAA,GAFV,CAAA;AAGE,IAAA,IAAI,EAAEF;AAHR,GAAA,CATF,CAPF,EAsBE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,IAAA,MAAM,EADR,MAAA;AAEE,IAAA,WAAW,EAFb,MAAA;AAGE,IAAA,UAAU,EAHZ,UAAA;AAIE,IAAA,QAAQ,EAJV,QAAA;AAKE,IAAA,KAAK,EALP,KAAA;AAME,IAAA,IAAI,EAAC;AANP,GAAA,EAvBJ,cAuBI,CAAA,CAtBF,CADF;AAbJ,CACY,CADY,CAAxB;AAkDAd,WAAW,CAAXA,SAAAA,GAAAA,aAAAA,CAAAA,EAAAA,EAIKiB,SAAS,CAJdjB,SAAAA,CAAAA;AAOA,eAAA,WAAA","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport Box, { splitBoxProps } from 'ui-box'\nimport { SearchIcon } from '../../icons'\nimport { TextInput } from '../../text-input'\nimport { useTheme } from '../../theme'\nimport { StackingOrder } from '../../constants'\n\nconst SearchInput = memo(\n  forwardRef(function SearchInput(props, ref) {\n    const theme = useTheme()\n    const {\n      appearance = 'default',\n      disabled,\n      height = 32,\n      ...restProps\n    } = props\n    const { matchedProps, remainingProps } = splitBoxProps(restProps)\n    const { width } = matchedProps\n    const iconSize = theme.getIconSizeForInput(height)\n\n    return (\n      <Box\n        position=\"relative\"\n        display=\"inline-flex\"\n        height={height}\n        ref={ref}\n        {...matchedProps}\n      >\n        <Box\n          height={height}\n          width={height}\n          pointerEvents=\"none\"\n          position=\"absolute\"\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <SearchIcon\n            color=\"default\"\n            zIndex={StackingOrder.FOCUSED + 1}\n            size={iconSize}\n          />\n        </Box>\n        <TextInput\n          height={height}\n          paddingLeft={height}\n          appearance={appearance}\n          disabled={disabled}\n          width={width}\n          type=\"search\"\n          {...remainingProps}\n        />\n      </Box>\n    )\n  })\n)\n\nSearchInput.propTypes = {\n  /**\n   * Composes the TextInput component as the base.\n   */\n  ...TextInput.propTypes\n}\n\nexport default SearchInput\n"]},"metadata":{},"sourceType":"module"}