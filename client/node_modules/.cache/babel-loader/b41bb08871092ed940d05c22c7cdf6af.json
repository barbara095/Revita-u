{"ast":null,"code":"/**\n * Helper function for theming.\n * @param {Object} object - an object with theme presets.\n * @param {Object} keyOrValue - the key for the object, or an actual value.\n * @return {*} the value of the object, or the `keyOrValue` itself.\n */\nvar themedProperty = function themedProperty(object, keyOrValue) {\n  // Check if there is a preset in the collection for the property.\n  if (Object.prototype.hasOwnProperty.call(object, keyOrValue)) {\n    return object[keyOrValue];\n  } // If there is no preset, simply return the property as is.\n\n\n  return keyOrValue;\n};\n\nexport default themedProperty;","map":{"version":3,"sources":["../../../../../src/theme/src/default-theme/utils/themedProperty.js"],"names":["themedProperty","Object","object"],"mappings":"AAAA;;;;;;AAMA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAA,MAAA,EAAA,UAAA,EAAwB;AAC7C;AACA,MAAIC,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAJ,UAAIA,CAAJ,EAA8D;AAC5D,WAAOC,MAAM,CAAb,UAAa,CAAb;AAH2C,GAAA,CAM7C;;;AACA,SAAA,UAAA;AAPF,CAAA;;AAUA,eAAA,cAAA","sourcesContent":["/**\n * Helper function for theming.\n * @param {Object} object - an object with theme presets.\n * @param {Object} keyOrValue - the key for the object, or an actual value.\n * @return {*} the value of the object, or the `keyOrValue` itself.\n */\nconst themedProperty = (object, keyOrValue) => {\n  // Check if there is a preset in the collection for the property.\n  if (Object.prototype.hasOwnProperty.call(object, keyOrValue)) {\n    return object[keyOrValue]\n  }\n\n  // If there is no preset, simply return the property as is.\n  return keyOrValue\n}\n\nexport default themedProperty\n"]},"metadata":{},"sourceType":"module"}