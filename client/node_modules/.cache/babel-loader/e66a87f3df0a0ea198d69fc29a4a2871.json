{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { useTheme } from '../../theme';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport Button from './Button';\nvar IconButton = memo(forwardRef(function IconButton(props, ref) {\n  var theme = useTheme();\n\n  var icon = props.icon,\n      iconSize = props.iconSize,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      restProps = _objectWithoutProperties(props, [\"icon\", \"iconSize\", \"height\", \"intent\"]);\n\n  return React.createElement(Button, _extends({\n    ref: ref,\n    intent: intent,\n    height: height,\n    width: height,\n    paddingLeft: 0,\n    paddingRight: 0,\n    display: \"flex\",\n    justifyContent: \"center\"\n  }, restProps), React.createElement(IconWrapper, {\n    icon: icon,\n    color: intent === 'none' ? 'default' : 'currentColor',\n    size: iconSize || theme.getIconSizeForIconButton(height)\n  }));\n}));\nIconButton.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * The Evergreen icon or custom icon to render\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Specifies an explicit icon size instead of the default value\n   */\n  iconSize: PropTypes.number,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default IconButton;","map":{"version":3,"sources":["../../../src/buttons/src/IconButton.js"],"names":["IconButton","memo","forwardRef","theme","useTheme","icon","iconSize","height","intent","restProps","props","dimensions","spacing","position","layout","PropTypes","appearance","isActive","disabled","className","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { useTheme } from '../../theme'\nimport { IconWrapper } from '../../icons/src/IconWrapper'\nimport Button from './Button'\n\nconst IconButton = memo(\n  forwardRef(function IconButton(props, ref) {\n    const theme = useTheme()\n    const { icon, iconSize, height = 32, intent = 'none', ...restProps } = props\n\n    return (\n      <Button\n        ref={ref}\n        intent={intent}\n        height={height}\n        width={height}\n        paddingLeft={0}\n        paddingRight={0}\n        display=\"flex\"\n        justifyContent=\"center\"\n        {...restProps}\n      >\n        <IconWrapper\n          icon={icon}\n          color={intent === 'none' ? 'default' : 'currentColor'}\n          size={iconSize || theme.getIconSizeForIconButton(height)}\n        />\n      </Button>\n    )\n  })\n)\n\nIconButton.propTypes = {\n  /**\n   * Composes the dimensions spec from the Box primitive.\n   */\n  ...dimensions.propTypes,\n\n  /**\n   * Composes the spacing spec from the Box primitive.\n   */\n  ...spacing.propTypes,\n\n  /**\n   * Composes the position spec from the Box primitive.\n   */\n  ...position.propTypes,\n\n  /**\n   * Composes the layout spec from the Box primitive.\n   */\n  ...layout.propTypes,\n\n  /**\n   * The Evergreen icon or custom icon to render\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Specifies an explicit icon size instead of the default value\n   */\n  iconSize: PropTypes.number,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default IconButton\n"]},"metadata":{},"sourceType":"module"}