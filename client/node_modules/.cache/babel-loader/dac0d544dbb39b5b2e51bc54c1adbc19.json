{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport removeUndefined from '../../lib/remove-undefined';\nvar UnorderedList = memo(forwardRef(function UnorderedList(props, ref) {\n  var children = props.children,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 400 : _props$size,\n      icon = props.icon,\n      iconColor = props.iconColor,\n      rest = _objectWithoutProperties(props, [\"children\", \"size\", \"icon\", \"iconColor\"]);\n\n  var enrichedChildren = React.Children.map(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return child;\n    }\n\n    return React.cloneElement(child, removeUndefined(_objectSpread({\n      icon: icon,\n      size: size,\n      iconColor: iconColor\n    }, child.props)));\n  });\n  var marginLeft;\n  if (size === 300) marginLeft = 16;\n  if (size === 400) marginLeft = 18;\n  if (size === 500) marginLeft = 18;\n  if (size === 600) marginLeft = 20;\n  return React.createElement(Box, _extends({\n    is: \"ul\",\n    listStyle: \"disc\",\n    padding: 0,\n    margin: 0,\n    marginLeft: marginLeft\n  }, rest, {\n    ref: ref\n  }), enrichedChildren);\n}));\nUnorderedList.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {\n  /**\n   * Size of the text used in a list item.\n   * Can be: 300, 400, 500, 600.\n   */\n  size: PropTypes.oneOf([300, 400, 500, 600]),\n\n  /**\n   * When passed, adds a icon before each list item in the list\n   * You can override this on a individual list item.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * The color of the icon in each list item in the list.\n   */\n  iconColor: PropTypes.string\n});\nexport default UnorderedList;","map":{"version":3,"sources":["../../../src/typography/src/UnorderedList.js"],"names":["UnorderedList","memo","forwardRef","children","size","icon","iconColor","rest","props","enrichedChildren","React","removeUndefined","child","marginLeft","ref","Box","PropTypes","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,GAAA,MAAA,QAAA;AACA,OAAA,eAAA,MAAA,4BAAA;AAEA,IAAMA,aAAa,GAAGC,IAAI,CACxBC,UAAU,CAAC,SAAA,aAAA,CAAA,KAAA,EAAA,GAAA,EAAmC;AAAA,MACpCC,QADoC,GACeK,KADf,CAAA,QAAA;AAAA,MAAA,WAAA,GACeA,KADf,CAAA,IAAA;AAAA,MAC1BJ,IAD0B,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,WAAA;AAAA,MACdC,IADc,GACeG,KADf,CAAA,IAAA;AAAA,MACRF,SADQ,GACeE,KADf,CAAA,SAAA;AAAA,MACMD,IADN,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAA,WAAA,CAAA,CAAA;;AAG5C,MAAME,gBAAgB,GAAG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA6B,UAAA,KAAA,EAAS;AAC7D,QAAI,CAACC,KAAK,CAALA,cAAAA,CAAL,KAAKA,CAAL,EAAkC;AAChC,aAAA,KAAA;AACD;;AAED,WAAOA,KAAK,CAALA,YAAAA,CAAAA,KAAAA,EAELC,eAAe,CAAA,aAAA,CAAA;AACbN,MAAAA,IAAI,EADS,IAAA;AAEbD,MAAAA,IAAI,EAFS,IAAA;AAGbE,MAAAA,SAAS,EAATA;AAHa,KAAA,EAKVM,KAAK,CAPZ,KAEiB,CAAA,CAFVF,CAAP;AALF,GAAyB,CAAzB;AAiBA,MAAA,UAAA;AACA,MAAIN,IAAI,KAAR,GAAA,EAAkBS,UAAU,GAAVA,EAAAA;AAClB,MAAIT,IAAI,KAAR,GAAA,EAAkBS,UAAU,GAAVA,EAAAA;AAClB,MAAIT,IAAI,KAAR,GAAA,EAAkBS,UAAU,GAAVA,EAAAA;AAClB,MAAIT,IAAI,KAAR,GAAA,EAAkBS,UAAU,GAAVA,EAAAA;AAElB,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,EAAE,EADJ,IAAA;AAEE,IAAA,SAAS,EAFX,MAAA;AAGE,IAAA,OAAO,EAHT,CAAA;AAIE,IAAA,MAAM,EAJR,CAAA;AAKE,IAAA,UAAU,EAAEA;AALd,GAAA,EAAA,IAAA,EAAA;AAOE,IAAA,GAAG,EAAEC;AAPP,GAAA,CAAA,EADF,gBACE,CADF;AA3BJ,CACY,CADc,CAA1B;AA2CAd,aAAa,CAAbA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKe,GAAG,CADRf,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAGE;;;;AAIAI,EAAAA,IAAI,EAAEY,SAAS,CAATA,KAAAA,CAAgB,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAPxBhB,GAOwB,CAAhBgB,CAPRhB;;AASE;;;;AAIAK,EAAAA,IAAI,EAAEW,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,WAAA,EAAwBA,SAAS,CAb7DhB,OAa4B,CAApBgB,CAbRhB;;AAeE;;;AAGAM,EAAAA,SAAS,EAAEU,SAAS,CAACC;AAlBvBjB,CAAAA,CAAAA;AAqBA,eAAA,aAAA","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport removeUndefined from '../../lib/remove-undefined'\n\nconst UnorderedList = memo(\n  forwardRef(function UnorderedList(props, ref) {\n    const { children, size = 400, icon, iconColor, ...rest } = props\n\n    const enrichedChildren = React.Children.map(children, child => {\n      if (!React.isValidElement(child)) {\n        return child\n      }\n\n      return React.cloneElement(\n        child,\n        removeUndefined({\n          icon,\n          size,\n          iconColor,\n          // Prefer more granularly defined props if present\n          ...child.props\n        })\n      )\n    })\n\n    let marginLeft\n    if (size === 300) marginLeft = 16\n    if (size === 400) marginLeft = 18\n    if (size === 500) marginLeft = 18\n    if (size === 600) marginLeft = 20\n\n    return (\n      <Box\n        is=\"ul\"\n        listStyle=\"disc\"\n        padding={0}\n        margin={0}\n        marginLeft={marginLeft}\n        {...rest}\n        ref={ref}\n      >\n        {enrichedChildren}\n      </Box>\n    )\n  })\n)\n\nUnorderedList.propTypes = {\n  ...Box.propTypes,\n\n  /**\n   * Size of the text used in a list item.\n   * Can be: 300, 400, 500, 600.\n   */\n  size: PropTypes.oneOf([300, 400, 500, 600]),\n\n  /**\n   * When passed, adds a icon before each list item in the list\n   * You can override this on a individual list item.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * The color of the icon in each list item in the list.\n   */\n  iconColor: PropTypes.string\n}\n\nexport default UnorderedList\n"]},"metadata":{},"sourceType":"module"}