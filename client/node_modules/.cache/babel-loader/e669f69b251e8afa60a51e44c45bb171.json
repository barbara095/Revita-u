{"ast":null,"code":"import tinycolor from 'tinycolor2';\nimport { Themer } from '../../../../themer';\nimport memoizeClassName from '../utils/memoizeClassName';\nimport palette from '../foundational-styles/palette';\n/**\n * The link appearance unlike the Button is based on the color property.\n * Currently the Link does not support the Intent or the appearance interface.\n * @param {string} color\n * @return {Object} appearance of the link.\n */\n\nvar getLinkAppearance = function getLinkAppearance(color) {\n  switch (color) {\n    case 'neutral':\n      return Themer.createLinkAppearance({\n        base: {\n          color: palette.neutral.base\n        },\n        hover: {\n          color: tinycolor(palette.neutral.base).lighten(10).toString()\n        },\n        active: {\n          color: tinycolor(palette.neutral.base).darken(10).toString()\n        },\n        focus: {\n          boxShadow: \"0 0 0 2px \".concat(tinycolor(palette.neutral.base).setAlpha(0.4).toString())\n        }\n      });\n\n    case 'green':\n      return Themer.createLinkAppearance({\n        base: {\n          color: palette.green.base\n        },\n        hover: {\n          color: tinycolor(palette.green.base).lighten(10).toString()\n        },\n        active: {\n          color: tinycolor(palette.green.base).darken(10).toString()\n        },\n        focus: {\n          boxShadow: \"0 0 0 2px \".concat(tinycolor(palette.green.base).setAlpha(0.4).toString())\n        }\n      });\n\n    case 'default':\n    case 'blue':\n    default:\n      return Themer.createLinkAppearance({\n        base: {\n          color: palette.blue.base\n        },\n        hover: {\n          color: tinycolor(palette.blue.base).lighten(10).toString()\n        },\n        active: {\n          color: tinycolor(palette.blue.base).darken(10).toString()\n        },\n        focus: {\n          boxShadow: \"0 0 0 2px \".concat(tinycolor(palette.blue.base).setAlpha(0.4).toString())\n        }\n      });\n  }\n};\n/**\n * Get the className of a `Link` component.\n * @param {string} color\n * @return {string} the appearance class name.\n */\n\n\nexport default memoizeClassName(getLinkAppearance);","map":{"version":3,"sources":["../../../../../src/theme/src/default-theme/component-specific/getLinkClassName.js"],"names":["getLinkAppearance","base","color","palette","hover","tinycolor","active","focus","boxShadow","memoizeClassName"],"mappings":"AAAA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,MAAA,QAAA,oBAAA;AACA,OAAA,gBAAA,MAAA,2BAAA;AACA,OAAA,OAAA,MAAA,gCAAA;AAEA;;;;;;;AAMA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAAS;AACjC,UAAA,KAAA;AACE,SAAA,SAAA;AACE,aAAO,MAAM,CAAN,oBAAA,CAA4B;AACjCC,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAEC,OAAO,CAAPA,OAAAA,CAAgBF;AADnB,SAD2B;AAIjCG,QAAAA,KAAK,EAAE;AACLF,UAAAA,KAAK,EAAEG,SAAS,CAACF,OAAO,CAAPA,OAAAA,CAAVE,IAAS,CAATA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,QAAAA;AADF,SAJ0B;AASjCC,QAAAA,MAAM,EAAE;AACNJ,UAAAA,KAAK,EAAEG,SAAS,CAACF,OAAO,CAAPA,OAAAA,CAAVE,IAAS,CAATA,CAAAA,MAAAA,CAAAA,EAAAA,EAAAA,QAAAA;AADD,SATyB;AAcjCE,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAA,aAAA,MAAA,CAAeH,SAAS,CAACF,OAAO,CAAPA,OAAAA,CAAVE,IAAS,CAATA,CAAAA,QAAAA,CAAAA,GAAAA,EAAf,QAAeA,EAAf;AADJ;AAd0B,OAA5B,CAAP;;AAoBF,SAAA,OAAA;AACE,aAAO,MAAM,CAAN,oBAAA,CAA4B;AACjCJ,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAEC,OAAO,CAAPA,KAAAA,CAAcF;AADjB,SAD2B;AAIjCG,QAAAA,KAAK,EAAE;AACLF,UAAAA,KAAK,EAAEG,SAAS,CAACF,OAAO,CAAPA,KAAAA,CAAVE,IAAS,CAATA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,QAAAA;AADF,SAJ0B;AASjCC,QAAAA,MAAM,EAAE;AACNJ,UAAAA,KAAK,EAAEG,SAAS,CAACF,OAAO,CAAPA,KAAAA,CAAVE,IAAS,CAATA,CAAAA,MAAAA,CAAAA,EAAAA,EAAAA,QAAAA;AADD,SATyB;AAcjCE,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAA,aAAA,MAAA,CAAeH,SAAS,CAACF,OAAO,CAAPA,KAAAA,CAAVE,IAAS,CAATA,CAAAA,QAAAA,CAAAA,GAAAA,EAAf,QAAeA,EAAf;AADJ;AAd0B,OAA5B,CAAP;;AAoBF,SAAA,SAAA;AACA,SAAA,MAAA;AACA;AACE,aAAO,MAAM,CAAN,oBAAA,CAA4B;AACjCJ,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAEC,OAAO,CAAPA,IAAAA,CAAaF;AADhB,SAD2B;AAIjCG,QAAAA,KAAK,EAAE;AACLF,UAAAA,KAAK,EAAEG,SAAS,CAACF,OAAO,CAAPA,IAAAA,CAAVE,IAAS,CAATA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,QAAAA;AADF,SAJ0B;AASjCC,QAAAA,MAAM,EAAE;AACNJ,UAAAA,KAAK,EAAEG,SAAS,CAACF,OAAO,CAAPA,IAAAA,CAAVE,IAAS,CAATA,CAAAA,MAAAA,CAAAA,EAAAA,EAAAA,QAAAA;AADD,SATyB;AAcjCE,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAA,aAAA,MAAA,CAAeH,SAAS,CAACF,OAAO,CAAPA,IAAAA,CAAVE,IAAS,CAATA,CAAAA,QAAAA,CAAAA,GAAAA,EAAf,QAAeA,EAAf;AADJ;AAd0B,OAA5B,CAAP;AA9CJ;AADF,CAAA;AAsEA;;;;;;;AAKA,eAAeI,gBAAgB,CAA/B,iBAA+B,CAA/B","sourcesContent":["import tinycolor from 'tinycolor2'\nimport { Themer } from '../../../../themer'\nimport memoizeClassName from '../utils/memoizeClassName'\nimport palette from '../foundational-styles/palette'\n\n/**\n * The link appearance unlike the Button is based on the color property.\n * Currently the Link does not support the Intent or the appearance interface.\n * @param {string} color\n * @return {Object} appearance of the link.\n */\nconst getLinkAppearance = color => {\n  switch (color) {\n    case 'neutral':\n      return Themer.createLinkAppearance({\n        base: {\n          color: palette.neutral.base\n        },\n        hover: {\n          color: tinycolor(palette.neutral.base)\n            .lighten(10)\n            .toString()\n        },\n        active: {\n          color: tinycolor(palette.neutral.base)\n            .darken(10)\n            .toString()\n        },\n        focus: {\n          boxShadow: `0 0 0 2px ${tinycolor(palette.neutral.base)\n            .setAlpha(0.4)\n            .toString()}`\n        }\n      })\n    case 'green':\n      return Themer.createLinkAppearance({\n        base: {\n          color: palette.green.base\n        },\n        hover: {\n          color: tinycolor(palette.green.base)\n            .lighten(10)\n            .toString()\n        },\n        active: {\n          color: tinycolor(palette.green.base)\n            .darken(10)\n            .toString()\n        },\n        focus: {\n          boxShadow: `0 0 0 2px ${tinycolor(palette.green.base)\n            .setAlpha(0.4)\n            .toString()}`\n        }\n      })\n    case 'default':\n    case 'blue':\n    default:\n      return Themer.createLinkAppearance({\n        base: {\n          color: palette.blue.base\n        },\n        hover: {\n          color: tinycolor(palette.blue.base)\n            .lighten(10)\n            .toString()\n        },\n        active: {\n          color: tinycolor(palette.blue.base)\n            .darken(10)\n            .toString()\n        },\n        focus: {\n          boxShadow: `0 0 0 2px ${tinycolor(palette.blue.base)\n            .setAlpha(0.4)\n            .toString()}`\n        }\n      })\n  }\n}\n\n/**\n * Get the className of a `Link` component.\n * @param {string} color\n * @return {string} the appearance class name.\n */\nexport default memoizeClassName(getLinkAppearance)\n"]},"metadata":{},"sourceType":"module"}