{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { splitBoxProps } from 'ui-box';\nimport { FormField } from '../../form-field';\nimport { useId } from '../../hooks';\nimport { majorScale } from '../../scales';\nimport TextInput from './TextInput';\nvar TextInputField = memo(forwardRef(function TextInputField(props, ref) {\n  var id = useId('TextInputField', props.id);\n\n  var unusedId = props.id,\n      hint = props.hint,\n      label = props.label,\n      description = props.description,\n      validationMessage = props.validationMessage,\n      disabled = props.disabled,\n      required = props.required,\n      isInvalid = props.isInvalid,\n      appearance = props.appearance,\n      placeholder = props.placeholder,\n      spellCheck = props.spellCheck,\n      _props$inputHeight = props.inputHeight,\n      inputHeight = _props$inputHeight === void 0 ? majorScale(4) : _props$inputHeight,\n      _props$inputWidth = props.inputWidth,\n      inputWidth = _props$inputWidth === void 0 ? '100%' : _props$inputWidth,\n      restProps = _objectWithoutProperties(props, [\"id\", \"hint\", \"label\", \"description\", \"validationMessage\", \"disabled\", \"required\", \"isInvalid\", \"appearance\", \"placeholder\", \"spellCheck\", \"inputHeight\", \"inputWidth\"]);\n  /**\n   * Split the wrapper props from the input props.\n   */\n\n\n  var _splitBoxProps = splitBoxProps(restProps),\n      matchedProps = _splitBoxProps.matchedProps,\n      remainingProps = _splitBoxProps.remainingProps;\n\n  return React.createElement(FormField, _extends({\n    marginBottom: 24,\n    label: label,\n    isRequired: required,\n    hint: hint,\n    description: description,\n    validationMessage: validationMessage,\n    labelFor: id\n  }, matchedProps), React.createElement(TextInput, _extends({\n    id: id,\n    width: inputWidth,\n    height: inputHeight,\n    disabled: disabled,\n    required: required,\n    isInvalid: isInvalid,\n    appearance: appearance,\n    placeholder: placeholder,\n    spellCheck: spellCheck,\n    ref: ref\n  }, remainingProps)));\n}));\nTextInputField.propTypes = _objectSpread(_objectSpread(_objectSpread({}, TextInput.propTypes), FormField.propTypes), {}, {\n  /**\n   * The label used above the input element.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Passed on the label as a htmlFor prop.\n   */\n  labelFor: PropTypes.string,\n\n  /**\n   * Whether or not to show an asterix after the label.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * An optional description of the field under the label, above the input element.\n   */\n  description: PropTypes.node,\n\n  /**\n   * An optional hint under the input element.\n   */\n  hint: PropTypes.node,\n\n  /**\n   * If a validation message is passed it is shown under the input element\n   * and above the hint. This is unaffected by `isInvalid`.\n   */\n  validationMessage: PropTypes.node,\n\n  /**\n   * The height of the input element.\n   */\n  inputHeight: PropTypes.number,\n\n  /**\n   * The width of the input width.\n   */\n  inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n});\nexport default TextInputField;","map":{"version":3,"sources":["../../../src/text-input/src/TextInputField.js"],"names":["TextInputField","memo","forwardRef","id","useId","props","unusedId","hint","label","description","validationMessage","disabled","required","isInvalid","appearance","placeholder","spellCheck","inputHeight","majorScale","inputWidth","restProps","matchedProps","remainingProps","splitBoxProps","ref","TextInput","FormField","PropTypes","labelFor"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { splitBoxProps } from 'ui-box'\nimport { FormField } from '../../form-field'\nimport { useId } from '../../hooks'\nimport { majorScale } from '../../scales'\nimport TextInput from './TextInput'\n\nconst TextInputField = memo(\n  forwardRef(function TextInputField(props, ref) {\n    const id = useId('TextInputField', props.id)\n\n    const {\n      // We are using the id from the state\n      id: unusedId,\n\n      // FormField props\n      hint,\n      label,\n      description,\n      validationMessage,\n\n      // TextInput props\n      disabled,\n      required,\n      isInvalid,\n      appearance,\n      placeholder,\n      spellCheck,\n      inputHeight = majorScale(4),\n      inputWidth = '100%',\n\n      // Rest props are spread on the FormField\n      ...restProps\n    } = props\n\n    /**\n     * Split the wrapper props from the input props.\n     */\n    const { matchedProps, remainingProps } = splitBoxProps(restProps)\n\n    return (\n      <FormField\n        marginBottom={24}\n        label={label}\n        isRequired={required}\n        hint={hint}\n        description={description}\n        validationMessage={validationMessage}\n        labelFor={id}\n        {...matchedProps}\n      >\n        <TextInput\n          id={id}\n          width={inputWidth}\n          height={inputHeight}\n          disabled={disabled}\n          required={required}\n          isInvalid={isInvalid}\n          appearance={appearance}\n          placeholder={placeholder}\n          spellCheck={spellCheck}\n          ref={ref}\n          {...remainingProps}\n        />\n      </FormField>\n    )\n  })\n)\n\nTextInputField.propTypes = {\n  /**\n   * Composes the TextInput component as the base.\n   */\n  ...TextInput.propTypes,\n  ...FormField.propTypes,\n\n  /**\n   * The label used above the input element.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Passed on the label as a htmlFor prop.\n   */\n  labelFor: PropTypes.string,\n\n  /**\n   * Whether or not to show an asterix after the label.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * An optional description of the field under the label, above the input element.\n   */\n  description: PropTypes.node,\n\n  /**\n   * An optional hint under the input element.\n   */\n  hint: PropTypes.node,\n\n  /**\n   * If a validation message is passed it is shown under the input element\n   * and above the hint. This is unaffected by `isInvalid`.\n   */\n  validationMessage: PropTypes.node,\n\n  /**\n   * The height of the input element.\n   */\n  inputHeight: PropTypes.number,\n\n  /**\n   * The width of the input width.\n   */\n  inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n}\n\nexport default TextInputField\n"]},"metadata":{},"sourceType":"module"}