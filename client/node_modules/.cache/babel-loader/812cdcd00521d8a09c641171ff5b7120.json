{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Pane } from '../../layers';\nimport { useTheme } from '../../theme';\nimport { useMergedRef } from '../../hooks';\nimport { TableRowProvider } from './TableRowContext';\nimport manageTableRowFocusInteraction from './manageTableRowFocusInteraction';\n\nvar noop = function noop() {};\n\nvar TableRow = memo(forwardRef(function TableRow(props, forwardedRef) {\n  var className = props.className,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 48 : _props$height,\n      children = props.children,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,\n      onClick = props.onClick,\n      _props$onKeyPress = props.onKeyPress,\n      onKeyPress = _props$onKeyPress === void 0 ? noop : _props$onKeyPress,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,\n      _props$onDeselect = props.onDeselect,\n      onDeselect = _props$onDeselect === void 0 ? noop : _props$onDeselect,\n      isHighlighted = props.isHighlighted,\n      isSelectable = props.isSelectable,\n      isSelected = props.isSelected,\n      rest = _objectWithoutProperties(props, [\"className\", \"height\", \"children\", \"intent\", \"appearance\", \"tabIndex\", \"onClick\", \"onKeyPress\", \"onSelect\", \"onDeselect\", \"isHighlighted\", \"isSelectable\", \"isSelected\"]);\n\n  var theme = useTheme();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      mainRef = _useState2[0],\n      setMainRef = _useState2[1];\n\n  var onRef = useMergedRef(setMainRef, forwardedRef);\n\n  var handleClick = function handleClick(e) {\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n\n    if (isSelectable) {\n      if (isSelected) {\n        onDeselect();\n      } else {\n        onSelect();\n      }\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (isSelectable) {\n      var key = e.key;\n\n      if (key === 'Enter' || key === ' ') {\n        onSelect();\n        e.preventDefault();\n      } else if (key === 'ArrowUp' || key === 'ArrowDown') {\n        try {\n          manageTableRowFocusInteraction(key, mainRef);\n        } catch (_) {}\n      } else if (key === 'Escape') {\n        if (mainRef && mainRef instanceof Node) mainRef.blur();\n      }\n    }\n\n    onKeyPress(e);\n  };\n\n  var themedClassName = theme.getRowClassName(appearance, intent);\n  return React.createElement(TableRowProvider, {\n    height: height\n  }, React.createElement(Pane, _extends({\n    ref: onRef,\n    className: cx(themedClassName, className),\n    display: \"flex\",\n    \"aria-selected\": isHighlighted,\n    \"aria-current\": isSelected,\n    \"data-isselectable\": isSelectable,\n    tabIndex: isSelectable ? tabIndex : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    height: height,\n    borderBottom: \"muted\"\n  }, rest), children));\n}));\nTableRow.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * The height of the row. Remember to add paddings when using \"auto\".\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * Makes the TableRow selectable.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * Makes the TableRow selected.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Manually set the TableRow to be highlighted.\n   */\n  isHighlighted: PropTypes.bool,\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * Class name passed to the table row.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default TableRow;","map":{"version":3,"sources":["../../../src/table/src/TableRow.js"],"names":["noop","TableRow","memo","forwardRef","className","height","children","intent","appearance","tabIndex","onClick","onKeyPress","onSelect","onDeselect","isHighlighted","isSelectable","isSelected","rest","props","theme","useTheme","mainRef","setMainRef","useState","onRef","useMergedRef","handleClick","handleKeyDown","key","e","manageTableRowFocusInteraction","themedClassName","cx","Pane","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { Pane } from '../../layers'\nimport { useTheme } from '../../theme'\nimport { useMergedRef } from '../../hooks'\nimport { TableRowProvider } from './TableRowContext'\nimport manageTableRowFocusInteraction from './manageTableRowFocusInteraction'\n\nconst noop = () => {}\n\nconst TableRow = memo(\n  forwardRef(function TableRow(props, forwardedRef) {\n    const {\n      className,\n      height = 48,\n      children,\n      intent = 'none',\n      appearance = 'default',\n      tabIndex = -1,\n\n      // Filter out\n      onClick,\n      onKeyPress = noop,\n      onSelect = noop,\n      onDeselect = noop,\n\n      isHighlighted,\n      isSelectable,\n      isSelected,\n      ...rest\n    } = props\n\n    const theme = useTheme()\n    const [mainRef, setMainRef] = useState()\n    const onRef = useMergedRef(setMainRef, forwardedRef)\n\n    const handleClick = e => {\n      if (typeof onClick === 'function') {\n        onClick(e)\n      }\n\n      if (isSelectable) {\n        if (isSelected) {\n          onDeselect()\n        } else {\n          onSelect()\n        }\n      }\n    }\n\n    const handleKeyDown = e => {\n      if (isSelectable) {\n        const { key } = e\n        if (key === 'Enter' || key === ' ') {\n          onSelect()\n          e.preventDefault()\n        } else if (key === 'ArrowUp' || key === 'ArrowDown') {\n          try {\n            manageTableRowFocusInteraction(key, mainRef)\n          } catch (_) {}\n        } else if (key === 'Escape') {\n          if (mainRef && mainRef instanceof Node) mainRef.blur()\n        }\n      }\n\n      onKeyPress(e)\n    }\n\n    const themedClassName = theme.getRowClassName(appearance, intent)\n\n    return (\n      <TableRowProvider height={height}>\n        <Pane\n          ref={onRef}\n          className={cx(themedClassName, className)}\n          display=\"flex\"\n          aria-selected={isHighlighted}\n          aria-current={isSelected}\n          data-isselectable={isSelectable}\n          tabIndex={isSelectable ? tabIndex : undefined}\n          onClick={handleClick}\n          onKeyDown={handleKeyDown}\n          height={height}\n          borderBottom=\"muted\"\n          {...rest}\n        >\n          {children}\n        </Pane>\n      </TableRowProvider>\n    )\n  })\n)\n\nTableRow.propTypes = {\n  /**\n   * Composes the Pane component as the base.\n   */\n  ...Pane.propTypes,\n\n  /**\n   * The height of the row. Remember to add paddings when using \"auto\".\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * Makes the TableRow selectable.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * Makes the TableRow selected.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Manually set the TableRow to be highlighted.\n   */\n  isHighlighted: PropTypes.bool,\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * Class name passed to the table row.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default TableRow\n"]},"metadata":{},"sourceType":"module"}