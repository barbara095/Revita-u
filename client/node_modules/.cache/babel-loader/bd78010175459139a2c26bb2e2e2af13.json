{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useRef, useState, useEffect, useImperativeHandle, useCallback, useMemo } from 'react';\nimport cx from 'classnames';\nimport { css as glamorCss } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { Positioner } from '../../positioner';\nimport { Tooltip } from '../../tooltip';\nimport { Position } from '../../constants';\nimport { useMergedRef } from '../../hooks';\nimport PopoverStateless from './PopoverStateless';\n\nvar noop = function noop() {};\n\nvar emptyProps = {};\nvar Popover = memo(forwardRef(function Popover(_ref, forwardedRef) {\n  var _ref$animationDuratio = _ref.animationDuration,\n      animationDuration = _ref$animationDuratio === void 0 ? 300 : _ref$animationDuratio,\n      _ref$bringFocusInside = _ref.bringFocusInside,\n      shouldBringFocusInside = _ref$bringFocusInside === void 0 ? false : _ref$bringFocusInside,\n      children = _ref.children,\n      content = _ref.content,\n      display = _ref.display,\n      _ref$minHeight = _ref.minHeight,\n      minHeight = _ref$minHeight === void 0 ? 40 : _ref$minHeight,\n      _ref$minWidth = _ref.minWidth,\n      minWidth = _ref$minWidth === void 0 ? 200 : _ref$minWidth,\n      _ref$onBodyClick = _ref.onBodyClick,\n      onBodyClick = _ref$onBodyClick === void 0 ? noop : _ref$onBodyClick,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? noop : _ref$onClose,\n      _ref$onCloseComplete = _ref.onCloseComplete,\n      onCloseComplete = _ref$onCloseComplete === void 0 ? noop : _ref$onCloseComplete,\n      _ref$onOpen = _ref.onOpen,\n      onOpen = _ref$onOpen === void 0 ? noop : _ref$onOpen,\n      _ref$onOpenComplete = _ref.onOpenComplete,\n      onOpenComplete = _ref$onOpenComplete === void 0 ? noop : _ref$onOpenComplete,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? Position.BOTTOM : _ref$position,\n      _ref$shouldCloseOnExt = _ref.shouldCloseOnExternalClick,\n      shouldCloseOnExternalClick = _ref$shouldCloseOnExt === void 0 ? true : _ref$shouldCloseOnExt,\n      _ref$statelessProps = _ref.statelessProps,\n      statelessProps = _ref$statelessProps === void 0 ? emptyProps : _ref$statelessProps,\n      _ref$trigger = _ref.trigger,\n      trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,\n      props = _objectWithoutProperties(_ref, [\"animationDuration\", \"bringFocusInside\", \"children\", \"content\", \"display\", \"minHeight\", \"minWidth\", \"onBodyClick\", \"onClose\", \"onCloseComplete\", \"onOpen\", \"onOpenComplete\", \"position\", \"shouldCloseOnExternalClick\", \"statelessProps\", \"trigger\"]);\n\n  var _useState = useState(props.isShown),\n      _useState2 = _slicedToArray(_useState, 2),\n      isShown = _useState2[0],\n      setIsShown = _useState2[1];\n\n  var popoverNode = useRef();\n  var setPopoverNode = useMergedRef(popoverNode);\n  var targetRef = useRef();\n  var setTargetRef = useMergedRef(targetRef);\n  useImperativeHandle(forwardedRef, function () {\n    return {\n      open: open,\n      close: close\n    };\n  }, [popoverNode.current]);\n  /**\n   * Methods borrowed from BlueprintJS\n   * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx\n   */\n\n  var bringFocusInside = useCallback(function (e) {\n    if (isShown && e) {\n      e.preventDefault();\n    } // Always delay focus manipulation to just before repaint to prevent scroll jumping\n\n\n    return requestAnimationFrame(function () {\n      // Container ref may be undefined between component mounting and Portal rendering\n      // ActiveElement may be undefined in some rare cases in IE\n      if (popoverNode.current == null || // eslint-disable-line eqeqeq, no-eq-null\n      document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null\n      !isShown) {\n        return;\n      }\n\n      var isFocusOutsideModal = !popoverNode.current.contains(document.activeElement);\n\n      if (isFocusOutsideModal) {\n        // Element marked autofocus has higher priority than the other elements\n        var autofocusElement = popoverNode.current.querySelector('[autofocus]:not([disabled])');\n\n        if (autofocusElement) {\n          // Return early to avoid unnecessary dom queries\n          return autofocusElement.focus();\n        }\n\n        var wrapperElement = popoverNode.current.querySelector('[tabindex]:not([disabled])');\n\n        if (wrapperElement) {\n          return wrapperElement.focus();\n        }\n\n        var buttonElements = popoverNode.current.querySelectorAll('button:not([disabled]), a:not([disabled]), [role=\"menuitem\"]:not([disabled]), [role=\"menuitemradio\"]:not([disabled])');\n\n        if (buttonElements.length > 0) {\n          return buttonElements[0].focus();\n        }\n      }\n    });\n  }, [isShown, popoverNode.current]);\n  var bringFocusBackToTarget = useCallback(function () {\n    return requestAnimationFrame(function () {\n      if (targetRef.current == null || // eslint-disable-line eqeqeq, no-eq-null\n      popoverNode.current == null || // eslint-disable-line eqeqeq, no-eq-null\n      document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null\n      ) {\n          return;\n        }\n\n      var isFocusInsideModal = popoverNode.current.contains(document.activeElement); // Bring back focus on the target.\n\n      if (document.activeElement === document.body || isFocusInsideModal) {\n        targetRef.current.focus();\n      }\n    });\n  }, [popoverNode.current, targetRef.current]);\n  var open = useCallback(function () {\n    if (isShown) {\n      return;\n    }\n\n    setIsShown(true);\n    onOpen();\n  }, [setIsShown, onOpen, isShown]);\n  var close = useCallback(function () {\n    if (!isShown) {\n      return;\n    }\n\n    setIsShown(false);\n    bringFocusBackToTarget();\n    onClose();\n  }, [setIsShown, bringFocusBackToTarget, onClose, isShown]); // If `props.isShown` is a boolean, treat as a controlled component\n  // `open` and `close` should be applied when it changes\n\n  useEffect(function () {\n    if (typeof props.isShown !== 'boolean' || props.isShown === isShown) {\n      return;\n    }\n\n    if (props.isShown) {\n      open();\n    } else {\n      close();\n    }\n  }, [props.isShown, isShown]);\n  var toggle = useCallback(function () {\n    return isShown ? close() : open();\n  }, [isShown, close, open]);\n  var handleOpenHover = useMemo(function () {\n    return trigger === 'hover' ? open : undefined;\n  }, [trigger, open]);\n  var handleCloseHover = useMemo(function () {\n    return trigger === 'hover' ? close : undefined;\n  }, [trigger, close]);\n  var handleKeyDown = useCallback(function (event) {\n    return event.key === 'ArrowDown' ? bringFocusInside(event) : undefined;\n  }, [bringFocusInside]);\n  var onEsc = useCallback(function (event) {\n    return event.key === 'Escape' ? close() : undefined;\n  }, [close]);\n  var handleBodyClick = useCallback(function (event) {\n    // Ignore clicks on the popover or button\n    if (targetRef.current && targetRef.current.contains(event.target)) {\n      return;\n    }\n\n    if (popoverNode.current && popoverNode.current.contains(event.target)) {\n      return;\n    } // Notify body click\n\n\n    onBodyClick(event);\n\n    if (shouldCloseOnExternalClick !== false) {\n      close();\n    }\n  }, [onBodyClick, shouldCloseOnExternalClick, close, targetRef.current, popoverNode.current]);\n  var handleOpenComplete = useCallback(function () {\n    if (shouldBringFocusInside) bringFocusInside();\n    onOpenComplete();\n  }, [shouldBringFocusInside, bringFocusInside, onOpenComplete]);\n  useEffect(function () {\n    if (isShown) {\n      document.body.addEventListener('click', handleBodyClick, false);\n      document.body.addEventListener('keydown', onEsc, false);\n    } else {\n      document.body.removeEventListener('click', handleBodyClick, false);\n      document.body.removeEventListener('keydown', onEsc, false);\n    }\n\n    return function () {\n      document.body.removeEventListener('click', handleBodyClick, false);\n      document.body.removeEventListener('keydown', onEsc, false);\n    };\n  }, [isShown, handleBodyClick, onEsc]);\n  var renderTarget = useCallback(function (_ref2) {\n    var getRef = _ref2.getRef,\n        isShown = _ref2.isShown;\n    var isTooltipInside = children && children.type === Tooltip;\n\n    var getTargetRef = function getTargetRef(ref) {\n      setTargetRef(ref);\n      getRef(ref);\n    };\n    /**\n     * When a function is passed, you can control the Popover manually.\n     */\n\n\n    if (typeof children === 'function') {\n      return children({\n        getRef: getTargetRef,\n        isShown: isShown,\n        toggle: toggle\n      });\n    }\n\n    var popoverTargetProps = {\n      onClick: toggle,\n      onMouseEnter: handleOpenHover,\n      onKeyDown: handleKeyDown,\n      role: 'button',\n      'aria-expanded': isShown,\n      'aria-haspopup': true\n    };\n    /**\n     * Tooltips can be used within a Popover (not the other way around)\n     * In this case the children is the Tooltip instead of a button.\n     * Pass the properties to the Tooltip and let the Tooltip\n     * add the properties to the target.\n     */\n\n    if (isTooltipInside) {\n      return React.cloneElement(children, {\n        popoverProps: _objectSpread({\n          getTargetRef: getTargetRef,\n          isShown: isShown\n        }, popoverTargetProps)\n      });\n    }\n    /**\n     * With normal usage only popover props end up on the target.\n     */\n\n\n    return React.cloneElement(children, _objectSpread({\n      ref: getTargetRef\n    }, popoverTargetProps));\n  }, [children, setTargetRef, toggle, handleOpenHover, handleKeyDown]); // If `props.isShown` is a boolean, popover is controlled manually, not via mouse events\n\n  var shown = typeof props.isShown === 'boolean' ? props.isShown : isShown;\n  var contentToRender = useMemo(function () {\n    return typeof content === 'function' ? content({\n      close: close\n    }) : content;\n  }, [content, close]);\n  return React.createElement(Positioner, {\n    target: renderTarget,\n    isShown: shown,\n    position: position,\n    animationDuration: animationDuration,\n    onOpenComplete: handleOpenComplete,\n    onCloseComplete: onCloseComplete\n  }, function (_ref3) {\n    var css = _ref3.css,\n        style = _ref3.style,\n        state = _ref3.state,\n        getRef = _ref3.getRef;\n    return React.createElement(PopoverStateless, _extends({\n      ref: function ref(_ref4) {\n        setPopoverNode(_ref4);\n        getRef(_ref4);\n      },\n      \"data-state\": state,\n      display: display,\n      minWidth: minWidth,\n      minHeight: minHeight\n    }, statelessProps, {\n      className: cx(statelessProps.className, glamorCss(css, style, statelessProps.style).toString()) // Overwrite `statelessProps.style` since we are including it via className\n      ,\n      style: undefined,\n      onMouseLeave: handleCloseHover\n    }), contentToRender);\n  });\n}));\nPopover.propTypes = {\n  /**\n   * The position the Popover is on. Smart positioning might override this.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT, Position.LEFT, Position.RIGHT]),\n\n  /**\n   * When true, the Popover is manually shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Open the Popover based on click or hover. Default is click.\n   */\n  trigger: PropTypes.oneOf(['click', 'hover']),\n\n  /**\n   * The content of the Popover.\n   */\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The target button of the Popover.\n   * When a function the following arguments are passed:\n   * ({ toggle: Function -> Void, getRef: Function -> Ref, isShown: Bool })\n   */\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,\n\n  /**\n   * The display property passed to the Popover card.\n   */\n  display: PropTypes.string,\n\n  /**\n   * The min width of the Popover card.\n   */\n  minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The min height of the Popover card.\n   */\n  minHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Properties passed through to the Popover card.\n   */\n  statelessProps: PropTypes.shape(PopoverStateless.propTypes),\n\n  /**\n   * Duration of the animation.\n   */\n  animationDuration: PropTypes.number,\n\n  /**\n   * Function called when the Popover opens.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Function fired when Popover closes.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the body is clicked.\n   */\n  onBodyClick: PropTypes.func,\n\n  /**\n   * When true, bring focus inside of the Popover on open.\n   */\n  bringFocusInside: PropTypes.bool,\n\n  /**\n   * Boolean indicating if clicking outside the dialog should close the dialog.\n   */\n  shouldCloseOnExternalClick: PropTypes.bool\n};\nexport default Popover;","map":{"version":3,"sources":["../../../src/popover/src/Popover.js"],"names":["css","noop","emptyProps","Popover","memo","forwardRef","animationDuration","bringFocusInside","shouldBringFocusInside","children","content","display","minHeight","minWidth","onBodyClick","onClose","onCloseComplete","onOpen","onOpenComplete","position","Position","BOTTOM","shouldCloseOnExternalClick","statelessProps","trigger","props","isShown","setIsShown","useState","popoverNode","useRef","setPopoverNode","useMergedRef","targetRef","setTargetRef","useImperativeHandle","open","close","useCallback","e","requestAnimationFrame","document","isFocusOutsideModal","autofocusElement","wrapperElement","buttonElements","bringFocusBackToTarget","isFocusInsideModal","useEffect","toggle","handleOpenHover","useMemo","handleCloseHover","handleKeyDown","event","onEsc","handleBodyClick","handleOpenComplete","renderTarget","getRef","isTooltipInside","getTargetRef","popoverTargetProps","onClick","onMouseEnter","onKeyDown","role","popoverProps","ref","shown","contentToRender","style","state","cx","glamorCss","PropTypes","PopoverStateless","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,EAAA,MAAA,EAAA,QAAA,EAAA,SAAA,EAAA,mBAAA,EAAA,WAAA,EAAA,OAAA,QAAA,OAAA;AAUA,OAAA,EAAA,MAAA,YAAA;AACA,SAASA,GAAG,IAAZ,SAAA,QAAA,QAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,UAAA,QAAA,kBAAA;AACA,SAAA,OAAA,QAAA,eAAA;AACA,SAAA,QAAA,QAAA,iBAAA;AACA,SAAA,YAAA,QAAA,aAAA;AACA,OAAA,gBAAA,MAAA,oBAAA;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAnB,CAAA;;AACA,IAAMC,UAAU,GAAhB,EAAA;AAEA,IAAMC,OAAO,GAAGC,IAAI,CAClBC,UAAU,CAAC,SAAA,OAAA,CAAA,IAAA,EAAA,YAAA,EAqBT;AAAA,MAAA,qBAAA,GAAA,IAAA,CAnBEC,iBAmBF;AAAA,MAnBEA,iBAmBF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAnBsB,GAmBtB,GAAA,qBAAA;AAAA,MAAA,qBAAA,GAAA,IAAA,CAlBEC,gBAkBF;AAAA,MAlBoBC,sBAkBpB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAlB6C,KAkB7C,GAAA,qBAAA;AAAA,MAjBEC,QAiBF,GAAA,IAAA,CAjBEA,QAiBF;AAAA,MAhBEC,OAgBF,GAAA,IAAA,CAhBEA,OAgBF;AAAA,MAfEC,OAeF,GAAA,IAAA,CAfEA,OAeF;AAAA,MAAA,cAAA,GAAA,IAAA,CAdEC,SAcF;AAAA,MAdEA,SAcF,GAAA,cAAA,KAAA,KAAA,CAAA,GAdc,EAcd,GAAA,cAAA;AAAA,MAAA,aAAA,GAAA,IAAA,CAbEC,QAaF;AAAA,MAbEA,QAaF,GAAA,aAAA,KAAA,KAAA,CAAA,GAba,GAab,GAAA,aAAA;AAAA,MAAA,gBAAA,GAAA,IAAA,CAZEC,WAYF;AAAA,MAZEA,WAYF,GAAA,gBAAA,KAAA,KAAA,CAAA,GAZgBb,IAYhB,GAAA,gBAAA;AAAA,MAAA,YAAA,GAAA,IAAA,CAXEc,OAWF;AAAA,MAXEA,OAWF,GAAA,YAAA,KAAA,KAAA,CAAA,GAXYd,IAWZ,GAAA,YAAA;AAAA,MAAA,oBAAA,GAAA,IAAA,CAVEe,eAUF;AAAA,MAVEA,eAUF,GAAA,oBAAA,KAAA,KAAA,CAAA,GAVoBf,IAUpB,GAAA,oBAAA;AAAA,MAAA,WAAA,GAAA,IAAA,CATEgB,MASF;AAAA,MATEA,MASF,GAAA,WAAA,KAAA,KAAA,CAAA,GATWhB,IASX,GAAA,WAAA;AAAA,MAAA,mBAAA,GAAA,IAAA,CAREiB,cAQF;AAAA,MAREA,cAQF,GAAA,mBAAA,KAAA,KAAA,CAAA,GARmBjB,IAQnB,GAAA,mBAAA;AAAA,MAAA,aAAA,GAAA,IAAA,CAPEkB,QAOF;AAAA,MAPEA,QAOF,GAAA,aAAA,KAAA,KAAA,CAAA,GAPaC,QAAQ,CAACC,MAOtB,GAAA,aAAA;AAAA,MAAA,qBAAA,GAAA,IAAA,CANEC,0BAMF;AAAA,MANEA,0BAMF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAN+B,IAM/B,GAAA,qBAAA;AAAA,MAAA,mBAAA,GAAA,IAAA,CALEC,cAKF;AAAA,MALEA,cAKF,GAAA,mBAAA,KAAA,KAAA,CAAA,GALmBrB,UAKnB,GAAA,mBAAA;AAAA,MAAA,YAAA,GAAA,IAAA,CAJEsB,OAIF;AAAA,MAJEA,OAIF,GAAA,YAAA,KAAA,KAAA,CAAA,GAJY,OAIZ,GAAA,YAAA;AAAA,MAHKC,KAGL,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,mBAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,SAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,4BAAA,EAAA,gBAAA,EAAA,SAAA,CAAA,CAAA;;AAAA,MAAA,SAAA,GAC8BG,QAAQ,CAACH,KAAK,CAD5C,OACsC,CADtC;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MACOC,OADP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MACgBC,UADhB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAEA,MAAME,WAAW,GAAGC,MAApB,EAAA;AACA,MAAMC,cAAc,GAAGC,YAAY,CAAnC,WAAmC,CAAnC;AACA,MAAMC,SAAS,GAAGH,MAAlB,EAAA;AACA,MAAMI,YAAY,GAAGF,YAAY,CAAjC,SAAiC,CAAjC;AAEAG,EAAAA,mBAAmB,CAAA,YAAA,EAEjB,YAAA;AAAA,WAAO;AACLC,MAAAA,IAAI,EADC,IAAA;AAELC,MAAAA,KAAK,EAALA;AAFK,KAAP;AAFiB,GAAA,EAMjB,CAACR,WAAW,CANdM,OAME,CANiB,CAAnBA;AASA;;;;;AAIA,MAAM5B,gBAAgB,GAAG+B,WAAW,CAAC,UAAA,CAAA,EAAO;AAC1C,QAAGZ,OAAO,IAAV,CAAA,EAAiB;AACfa,MAAAA,CAAC,CAADA,cAAAA;AAFwC,KAAA,CAI1C;;;AAEA,WAAOC,qBAAqB,CAAC,YAAM;AACjC;AAEA;AAEA,UACEX,WAAW,CAAXA,OAAAA,IAAAA,IAAAA,IAA+B;AAC/BY,MAAAA,QAAQ,CAARA,aAAAA,IADAZ,IAAAA,IACkC;AAClC,OAHF,OAAA,EAIE;AACA;AACD;;AAED,UAAMa,mBAAmB,GAAG,CAACb,WAAW,CAAXA,OAAAA,CAAAA,QAAAA,CAC3BY,QAAQ,CADV,aAA6BZ,CAA7B;;AAGA,UAAA,mBAAA,EAAyB;AACvB;AACA,YAAMc,gBAAgB,GAAGd,WAAW,CAAXA,OAAAA,CAAAA,aAAAA,CAAzB,6BAAyBA,CAAzB;;AAGA,YAAA,gBAAA,EAAsB;AACpB;AACA,iBAAOc,gBAAgB,CAAvB,KAAOA,EAAP;AACD;;AAED,YAAMC,cAAc,GAAGf,WAAW,CAAXA,OAAAA,CAAAA,aAAAA,CAAvB,4BAAuBA,CAAvB;;AACA,YAAA,cAAA,EAAoB;AAClB,iBAAOe,cAAc,CAArB,KAAOA,EAAP;AACD;;AAED,YAAMC,cAAc,GAAGhB,WAAW,CAAXA,OAAAA,CAAAA,gBAAAA,CAAvB,sHAAuBA,CAAvB;;AAGA,YAAIgB,cAAc,CAAdA,MAAAA,GAAJ,CAAA,EAA+B;AAC7B,iBAAOA,cAAc,CAAdA,CAAc,CAAdA,CAAP,KAAOA,EAAP;AACD;AAEF;AAtCH,KAA4B,CAA5B;AANkC,GAAA,EA8CjC,CAAA,OAAA,EAAUhB,WAAW,CA9CxB,OA8CG,CA9CiC,CAApC;AAgDA,MAAMiB,sBAAsB,GAAGR,WAAW,CAAC,YAAM;AAC/C,WAAOE,qBAAqB,CAAC,YAAM;AACjC,UACEP,SAAS,CAATA,OAAAA,IAAAA,IAAAA,IAA6B;AAC7BJ,MAAAA,WAAW,CAAXA,OAAAA,IADAI,IAAAA,IAC+B;AAC/BQ,MAAAA,QAAQ,CAARA,aAAAA,IAHF,IAAA,CAGiC;AAHjC,QAIE;AACA;AACD;;AAED,UAAMM,kBAAkB,GAAGlB,WAAW,CAAXA,OAAAA,CAAAA,QAAAA,CACzBY,QAAQ,CAVuB,aASNZ,CAA3B,CATiC,CAajC;;AACA,UAAIY,QAAQ,CAARA,aAAAA,KAA2BA,QAAQ,CAAnCA,IAAAA,IAAJ,kBAAA,EAAoE;AAClER,QAAAA,SAAS,CAATA,OAAAA,CAAAA,KAAAA;AACD;AAhBH,KAA4B,CAA5B;AADwC,GAAA,EAmBvC,CAACJ,WAAW,CAAZ,OAAA,EAAsBI,SAAS,CAnBlC,OAmBG,CAnBuC,CAA1C;AAqBA,MAAMG,IAAI,GAAGE,WAAW,CAAC,YAAM;AAC7B,QAAA,OAAA,EAAa;AACX;AACD;;AAEDX,IAAAA,UAAU,CAAVA,IAAU,CAAVA;AACAV,IAAAA,MAAM;AANgB,GAAA,EAOrB,CAAA,UAAA,EAAA,MAAA,EAPH,OAOG,CAPqB,CAAxB;AASA,MAAMoB,KAAK,GAAGC,WAAW,CAAC,YAAM;AAC9B,QAAI,CAAJ,OAAA,EAAc;AACZ;AACD;;AAEDX,IAAAA,UAAU,CAAVA,KAAU,CAAVA;AACAmB,IAAAA,sBAAsB;AACtB/B,IAAAA,OAAO;AAPgB,GAAA,EAQtB,CAAA,UAAA,EAAA,sBAAA,EAAA,OAAA,EA1GH,OA0GG,CARsB,CAAzB,CAlGA,CA4GA;AACA;;AACAiC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,OAAOvB,KAAK,CAAZ,OAAA,KAAA,SAAA,IAAsCA,KAAK,CAALA,OAAAA,KAA1C,OAAA,EAAqE;AACnE;AACD;;AAED,QAAIA,KAAK,CAAT,OAAA,EAAmB;AACjBW,MAAAA,IAAI;AADN,KAAA,MAEO;AACLC,MAAAA,KAAK;AACN;AATM,GAAA,EAUN,CAACZ,KAAK,CAAN,OAAA,EAVHuB,OAUG,CAVM,CAATA;AAYA,MAAMC,MAAM,GAAGX,WAAW,CAAC,YAAM;AAC/B,WAAOZ,OAAO,GAAGW,KAAH,EAAA,GAAaD,IAA3B,EAAA;AADwB,GAAA,EAEvB,CAAA,OAAA,EAAA,KAAA,EAFH,IAEG,CAFuB,CAA1B;AAIA,MAAMc,eAAe,GAAGC,OAAO,CAAC,YAAM;AACpC,WAAO3B,OAAO,KAAPA,OAAAA,GAAAA,IAAAA,GAAP,SAAA;AAD6B,GAAA,EAE5B,CAAA,OAAA,EAFH,IAEG,CAF4B,CAA/B;AAIA,MAAM4B,gBAAgB,GAAGD,OAAO,CAAC,YAAM;AACrC,WAAO3B,OAAO,KAAPA,OAAAA,GAAAA,KAAAA,GAAP,SAAA;AAD8B,GAAA,EAE7B,CAAA,OAAA,EAFH,KAEG,CAF6B,CAAhC;AAIA,MAAM6B,aAAa,GAAGf,WAAW,CAAC,UAAA,KAAA,EAAW;AAC3C,WAAOgB,KAAK,CAALA,GAAAA,KAAAA,WAAAA,GAA4B/C,gBAAgB,CAA5C+C,KAA4C,CAA5CA,GAAP,SAAA;AAD+B,GAAA,EAE9B,CAFH,gBAEG,CAF8B,CAAjC;AAIA,MAAMC,KAAK,GAAGjB,WAAW,CAAC,UAAA,KAAA,EAAW;AACnC,WAAOgB,KAAK,CAALA,GAAAA,KAAAA,QAAAA,GAAyBjB,KAAzBiB,EAAAA,GAAP,SAAA;AADuB,GAAA,EAEtB,CAFH,KAEG,CAFsB,CAAzB;AAIA,MAAME,eAAe,GAAGlB,WAAW,CAAC,UAAA,KAAA,EAAW;AAC7C;AACA,QAAIL,SAAS,CAATA,OAAAA,IAAqBA,SAAS,CAATA,OAAAA,CAAAA,QAAAA,CAA2BqB,KAAK,CAAzD,MAAyBrB,CAAzB,EAAmE;AACjE;AACD;;AAED,QAAIJ,WAAW,CAAXA,OAAAA,IAAuBA,WAAW,CAAXA,OAAAA,CAAAA,QAAAA,CAA6ByB,KAAK,CAA7D,MAA2BzB,CAA3B,EAAuE;AACrE;AAP2C,KAAA,CAU7C;;;AACAf,IAAAA,WAAW,CAAXA,KAAW,CAAXA;;AAEA,QAAIQ,0BAA0B,KAA9B,KAAA,EAA0C;AACxCe,MAAAA,KAAK;AACN;AAfgC,GAAA,EAgBhC,CAAA,WAAA,EAAA,0BAAA,EAAA,KAAA,EAAiDJ,SAAS,CAA1D,OAAA,EAAoEJ,WAAW,CAhBlF,OAgBG,CAhBgC,CAAnC;AAkBA,MAAM4B,kBAAkB,GAAGnB,WAAW,CAAC,YAAM;AAC3C,QAAA,sBAAA,EAA4B/B,gBAAgB;AAC5CW,IAAAA,cAAc;AAFsB,GAAA,EAGnC,CAAA,sBAAA,EAAA,gBAAA,EAHH,cAGG,CAHmC,CAAtC;AAKA8B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAA,OAAA,EAAa;AACXP,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAAA,eAAAA,EAAAA,KAAAA;AACAA,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,gBAAAA,CAAAA,SAAAA,EAAAA,KAAAA,EAAAA,KAAAA;AAFF,KAAA,MAGO;AACLA,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EAAAA,eAAAA,EAAAA,KAAAA;AACAA,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,mBAAAA,CAAAA,SAAAA,EAAAA,KAAAA,EAAAA,KAAAA;AACD;;AAED,WAAO,YAAM;AACXA,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EAAAA,eAAAA,EAAAA,KAAAA;AACAA,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,mBAAAA,CAAAA,SAAAA,EAAAA,KAAAA,EAAAA,KAAAA;AAFF,KAAA;AATO,GAAA,EAaN,CAAA,OAAA,EAAA,eAAA,EAbHO,KAaG,CAbM,CAATA;AAeA,MAAMU,YAAY,GAAGpB,WAAW,CAAC,UAAA,KAAA,EAAyB;AAAA,QAAtBqB,MAAsB,GAAA,KAAA,CAAtBA,MAAsB;AAAA,QAAdjC,OAAc,GAAA,KAAA,CAAdA,OAAc;AACxD,QAAMkC,eAAe,GAAGnD,QAAQ,IAAIA,QAAQ,CAARA,IAAAA,KAApC,OAAA;;AAEA,QAAMoD,YAAY,GAAG,SAAfA,YAAe,CAAA,GAAA,EAAO;AAC1B3B,MAAAA,YAAY,CAAZA,GAAY,CAAZA;AACAyB,MAAAA,MAAM,CAANA,GAAM,CAANA;AAFF,KAAA;AAKA;;;;;AAGA,QAAI,OAAA,QAAA,KAAJ,UAAA,EAAoC;AAClC,aAAOlD,QAAQ,CAAC;AACdkD,QAAAA,MAAM,EADQ,YAAA;AAEdjC,QAAAA,OAAO,EAFO,OAAA;AAGduB,QAAAA,MAAM,EAANA;AAHc,OAAD,CAAf;AAKD;;AAED,QAAMa,kBAAkB,GAAG;AACzBC,MAAAA,OAAO,EADkB,MAAA;AAEzBC,MAAAA,YAAY,EAFa,eAAA;AAGzBC,MAAAA,SAAS,EAHgB,aAAA;AAIzBC,MAAAA,IAAI,EAJqB,QAAA;AAKzB,uBALyB,OAAA;AAMzB,uBAAiB;AANQ,KAA3B;AASA;;;;;;;AAMA,QAAA,eAAA,EAAqB;AACnB,aAAO,KAAK,CAAL,YAAA,CAAA,QAAA,EAA6B;AAClCC,QAAAA,YAAY,EAAA,aAAA,CAAA;AACVN,UAAAA,YAAY,EADF,YAAA;AAEVnC,UAAAA,OAAO,EAAPA;AAFU,SAAA,EAAA,kBAAA;AADsB,OAA7B,CAAP;AAUD;AAED;;;;;AAGA,WAAO,KAAK,CAAL,YAAA,CAAA,QAAA,EAAA,aAAA,CAAA;AACL0C,MAAAA,GAAG,EAAEP;AADA,KAAA,EAAP,kBAAO,CAAA,CAAP;AAlD8B,GAAA,EAsD7B,CAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA,eAAA,EA1OH,aA0OG,CAtD6B,CAAhC,CApLA,CA4OA;;AACA,MAAMQ,KAAK,GAAG,OAAO5C,KAAK,CAAZ,OAAA,KAAA,SAAA,GAAqCA,KAAK,CAA1C,OAAA,GAAd,OAAA;AAEA,MAAM6C,eAAe,GAAGnB,OAAO,CAAC,YAAM;AACpC,WAAO,OAAA,OAAA,KAAA,UAAA,GAAgCzC,OAAO,CAAC;AAAE2B,MAAAA,KAAK,EAALA;AAAF,KAAD,CAAvC,GAAP,OAAA;AAD6B,GAAA,EAE5B,CAAA,OAAA,EAFH,KAEG,CAF4B,CAA/B;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,IAAA,MAAM,EADR,YAAA;AAEE,IAAA,OAAO,EAFT,KAAA;AAGE,IAAA,QAAQ,EAHV,QAAA;AAIE,IAAA,iBAAiB,EAJnB,iBAAA;AAKE,IAAA,cAAc,EALhB,kBAAA;AAME,IAAA,eAAe,EAAErB;AANnB,GAAA,EAQG,UAAA,KAAA,EAAA;AAAA,QAAGhB,GAAH,GAAA,KAAA,CAAA,GAAA;AAAA,QAAQuE,KAAR,GAAA,KAAA,CAAA,KAAA;AAAA,QAAeC,KAAf,GAAA,KAAA,CAAA,KAAA;AAAA,QAAsBb,MAAtB,GAAA,KAAA,CAAA,MAAA;AAAA,WACC,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA;AACE,MAAA,GAAG,EAAE,SAAA,GAAA,CAAA,KAAA,EAAO;AACV5B,QAAAA,cAAc,CAAdA,KAAc,CAAdA;AACA4B,QAAAA,MAAM,CAANA,KAAM,CAANA;AAHJ,OAAA;AAKE,oBALF,KAAA;AAME,MAAA,OAAO,EANT,OAAA;AAOE,MAAA,QAAQ,EAPV,QAAA;AAQE,MAAA,SAAS,EAAE/C;AARb,KAAA,EAAA,cAAA,EAAA;AAUE,MAAA,SAAS,EAAE6D,EAAE,CACXlD,cAAc,CADH,SAAA,EAEXmD,SAAS,CAAA,GAAA,EAAA,KAAA,EAAanD,cAAc,CAApCmD,KAAS,CAATA,CAZJ,QAYIA,EAFW,CAVf,CAcE;AAdF;AAeE,MAAA,KAAK,EAfP,SAAA;AAgBE,MAAA,YAAY,EAAEtB;AAhBhB,KAAA,CAAA,EADD,eACC,CADD;AATL,GACE,CADF;AAzQJ,CACY,CADQ,CAApB;AA6SAjD,OAAO,CAAPA,SAAAA,GAAoB;AAClB;;;AAGAgB,EAAAA,QAAQ,EAAEwD,SAAS,CAATA,KAAAA,CAAgB,CACxBvD,QAAQ,CADgB,GAAA,EAExBA,QAAQ,CAFgB,QAAA,EAGxBA,QAAQ,CAHgB,SAAA,EAIxBA,QAAQ,CAJgB,MAAA,EAKxBA,QAAQ,CALgB,WAAA,EAMxBA,QAAQ,CANgB,YAAA,EAOxBA,QAAQ,CAPgB,IAAA,EAQxBA,QAAQ,CAZQ,KAIQ,CAAhBuD,CAJQ;;AAelB;;;AAGAjD,EAAAA,OAAO,EAAEiD,SAAS,CAlBA,IAAA;;AAmBlB;;;AAGAnD,EAAAA,OAAO,EAAEmD,SAAS,CAATA,KAAAA,CAAgB,CAAA,OAAA,EAtBP,OAsBO,CAAhBA,CAtBS;;AAwBlB;;;AAGAjE,EAAAA,OAAO,EAAEiE,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CAA9CA,IAAoB,CAApBA,EA3BS,UAAA;;AA6BlB;;;;;AAKAlE,EAAAA,QAAQ,EAAEkE,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,OAAA,EAAoBA,SAAS,CAAjDA,IAAoB,CAApBA,EAlCQ,UAAA;;AAoClB;;;AAGAhE,EAAAA,OAAO,EAAEgE,SAAS,CAvCA,MAAA;;AAyClB;;;AAGA9D,EAAAA,QAAQ,EAAE8D,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CA5CxC,MA4CY,CAApBA,CA5CQ;;AA8ClB;;;AAGA/D,EAAAA,SAAS,EAAE+D,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAjDzC,MAiDa,CAApBA,CAjDO;;AAmDlB;;;AAGApD,EAAAA,cAAc,EAAEoD,SAAS,CAATA,KAAAA,CAAgBC,gBAAgB,CAtD9B,SAsDFD,CAtDE;;AAwDlB;;;AAGArE,EAAAA,iBAAiB,EAAEqE,SAAS,CA3DV,MAAA;;AA6DlB;;;AAGA1D,EAAAA,MAAM,EAAE0D,SAAS,CAhEC,IAAA;;AAkElB;;;AAGA5D,EAAAA,OAAO,EAAE4D,SAAS,CArEA,IAAA;;AAuElB;;;AAGAzD,EAAAA,cAAc,EAAEyD,SAAS,CA1EP,IAAA;;AA4ElB;;;AAGA3D,EAAAA,eAAe,EAAE2D,SAAS,CA/ER,IAAA;;AAiFlB;;;AAGA7D,EAAAA,WAAW,EAAE6D,SAAS,CApFJ,IAAA;;AAsFlB;;;AAGApE,EAAAA,gBAAgB,EAAEoE,SAAS,CAzFT,IAAA;;AA2FlB;;;AAGArD,EAAAA,0BAA0B,EAAEqD,SAAS,CAACE;AA9FpB,CAApB1E;AAiGA,eAAA,OAAA","sourcesContent":["import React, {\n  memo,\n  forwardRef,\n  useRef,\n  useState,\n  useEffect,\n  useImperativeHandle,\n  useCallback,\n  useMemo\n} from 'react'\nimport cx from 'classnames'\nimport { css as glamorCss } from 'glamor'\nimport PropTypes from 'prop-types'\nimport { Positioner } from '../../positioner'\nimport { Tooltip } from '../../tooltip'\nimport { Position } from '../../constants'\nimport { useMergedRef } from '../../hooks'\nimport PopoverStateless from './PopoverStateless'\n\nconst noop = () => {}\nconst emptyProps = {}\n\nconst Popover = memo(\n  forwardRef(function Popover(\n    {\n      animationDuration = 300,\n      bringFocusInside: shouldBringFocusInside = false,\n      children,\n      content,\n      display,\n      minHeight = 40,\n      minWidth = 200,\n      onBodyClick = noop,\n      onClose = noop,\n      onCloseComplete = noop,\n      onOpen = noop,\n      onOpenComplete = noop,\n      position = Position.BOTTOM,\n      shouldCloseOnExternalClick = true,\n      statelessProps = emptyProps,\n      trigger = 'click',\n      ...props\n    },\n    forwardedRef\n  ) {\n    const [isShown, setIsShown] = useState(props.isShown)\n    const popoverNode = useRef()\n    const setPopoverNode = useMergedRef(popoverNode)\n    const targetRef = useRef()\n    const setTargetRef = useMergedRef(targetRef)\n\n    useImperativeHandle(\n      forwardedRef,\n      () => ({\n        open,\n        close\n      }),\n      [popoverNode.current]\n    )\n\n    /**\n     * Methods borrowed from BlueprintJS\n     * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx\n     */\n    const bringFocusInside = useCallback((e) => {\n      if(isShown && e) {\n        e.preventDefault()\n      }\n      // Always delay focus manipulation to just before repaint to prevent scroll jumping\n\n      return requestAnimationFrame(() => {\n        // Container ref may be undefined between component mounting and Portal rendering\n\n        // ActiveElement may be undefined in some rare cases in IE\n\n        if (\n          popoverNode.current == null || // eslint-disable-line eqeqeq, no-eq-null\n          document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null\n          !isShown\n        ) {\n          return\n        }\n\n        const isFocusOutsideModal = !popoverNode.current.contains(\n          document.activeElement\n        )\n        if (isFocusOutsideModal) {\n          // Element marked autofocus has higher priority than the other elements\n          const autofocusElement = popoverNode.current.querySelector(\n            '[autofocus]:not([disabled])'\n          )\n          if (autofocusElement) {\n            // Return early to avoid unnecessary dom queries\n            return autofocusElement.focus()\n          }\n\n          const wrapperElement = popoverNode.current.querySelector('[tabindex]:not([disabled])')\n          if (wrapperElement) {\n            return wrapperElement.focus()\n          }\n\n          const buttonElements = popoverNode.current.querySelectorAll(\n            'button:not([disabled]), a:not([disabled]), [role=\"menuitem\"]:not([disabled]), [role=\"menuitemradio\"]:not([disabled])'\n          )\n          if (buttonElements.length > 0) {\n            return buttonElements[0].focus()\n          }\n\n        }\n      })\n    }, [isShown, popoverNode.current])\n\n    const bringFocusBackToTarget = useCallback(() => {\n      return requestAnimationFrame(() => {\n        if (\n          targetRef.current == null || // eslint-disable-line eqeqeq, no-eq-null\n          popoverNode.current == null || // eslint-disable-line eqeqeq, no-eq-null\n          document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null\n        ) {\n          return\n        }\n\n        const isFocusInsideModal = popoverNode.current.contains(\n          document.activeElement\n        )\n\n        // Bring back focus on the target.\n        if (document.activeElement === document.body || isFocusInsideModal) {\n          targetRef.current.focus()\n        }\n      })\n    }, [popoverNode.current, targetRef.current])\n\n    const open = useCallback(() => {\n      if (isShown) {\n        return\n      }\n\n      setIsShown(true)\n      onOpen()\n    }, [setIsShown, onOpen, isShown])\n\n    const close = useCallback(() => {\n      if (!isShown) {\n        return\n      }\n\n      setIsShown(false)\n      bringFocusBackToTarget()\n      onClose()\n    }, [setIsShown, bringFocusBackToTarget, onClose, isShown])\n\n    // If `props.isShown` is a boolean, treat as a controlled component\n    // `open` and `close` should be applied when it changes\n    useEffect(() => {\n      if (typeof props.isShown !== 'boolean' || props.isShown === isShown) {\n        return\n      }\n\n      if (props.isShown) {\n        open()\n      } else {\n        close()\n      }\n    }, [props.isShown, isShown])\n\n    const toggle = useCallback(() => {\n      return isShown ? close() : open()\n    }, [isShown, close, open])\n\n    const handleOpenHover = useMemo(() => {\n      return trigger === 'hover' ? open : undefined\n    }, [trigger, open])\n\n    const handleCloseHover = useMemo(() => {\n      return trigger === 'hover' ? close : undefined\n    }, [trigger, close])\n\n    const handleKeyDown = useCallback((event) => {\n      return event.key === 'ArrowDown' ? bringFocusInside(event) : undefined\n    }, [bringFocusInside])\n\n    const onEsc = useCallback((event) => {\n      return event.key === 'Escape' ? close() : undefined\n    }, [close])\n\n    const handleBodyClick = useCallback((event) => {\n      // Ignore clicks on the popover or button\n      if (targetRef.current && targetRef.current.contains(event.target)) {\n        return\n      }\n\n      if (popoverNode.current && popoverNode.current.contains(event.target)) {\n        return\n      }\n\n      // Notify body click\n      onBodyClick(event)\n\n      if (shouldCloseOnExternalClick !== false) {\n        close()\n      }\n    }, [onBodyClick, shouldCloseOnExternalClick, close, targetRef.current, popoverNode.current])\n\n    const handleOpenComplete = useCallback(() => {\n      if (shouldBringFocusInside) bringFocusInside()\n      onOpenComplete()\n    }, [shouldBringFocusInside, bringFocusInside, onOpenComplete])\n\n    useEffect(() => {\n      if (isShown) {\n        document.body.addEventListener('click', handleBodyClick, false)\n        document.body.addEventListener('keydown', onEsc, false)\n      } else {\n        document.body.removeEventListener('click', handleBodyClick, false)\n        document.body.removeEventListener('keydown', onEsc, false)\n      }\n\n      return () => {\n        document.body.removeEventListener('click', handleBodyClick, false)\n        document.body.removeEventListener('keydown', onEsc, false)\n      }\n    }, [isShown, handleBodyClick, onEsc])\n\n    const renderTarget = useCallback(({ getRef, isShown }) => {\n      const isTooltipInside = children && children.type === Tooltip\n\n      const getTargetRef = ref => {\n        setTargetRef(ref)\n        getRef(ref)\n      }\n\n      /**\n       * When a function is passed, you can control the Popover manually.\n       */\n      if (typeof children === 'function') {\n        return children({\n          getRef: getTargetRef,\n          isShown,\n          toggle\n        })\n      }\n\n      const popoverTargetProps = {\n        onClick: toggle,\n        onMouseEnter: handleOpenHover,\n        onKeyDown: handleKeyDown,\n        role: 'button',\n        'aria-expanded': isShown,\n        'aria-haspopup': true\n      }\n\n      /**\n       * Tooltips can be used within a Popover (not the other way around)\n       * In this case the children is the Tooltip instead of a button.\n       * Pass the properties to the Tooltip and let the Tooltip\n       * add the properties to the target.\n       */\n      if (isTooltipInside) {\n        return React.cloneElement(children, {\n          popoverProps: {\n            getTargetRef,\n            isShown,\n\n            // These propeties will be spread as `popoverTargetProps`\n            // in the Tooltip component.\n            ...popoverTargetProps\n          }\n        })\n      }\n\n      /**\n       * With normal usage only popover props end up on the target.\n       */\n      return React.cloneElement(children, {\n        ref: getTargetRef,\n        ...popoverTargetProps\n      })\n    }, [children, setTargetRef, toggle, handleOpenHover, handleKeyDown])\n\n    // If `props.isShown` is a boolean, popover is controlled manually, not via mouse events\n    const shown = typeof props.isShown === 'boolean' ? props.isShown : isShown\n\n    const contentToRender = useMemo(() => {\n      return typeof content === 'function' ? content({ close }) : content\n    }, [content, close])\n\n    return (\n      <Positioner\n        target={renderTarget}\n        isShown={shown}\n        position={position}\n        animationDuration={animationDuration}\n        onOpenComplete={handleOpenComplete}\n        onCloseComplete={onCloseComplete}\n      >\n        {({ css, style, state, getRef }) => (\n          <PopoverStateless\n            ref={ref => {\n              setPopoverNode(ref)\n              getRef(ref)\n            }}\n            data-state={state}\n            display={display}\n            minWidth={minWidth}\n            minHeight={minHeight}\n            {...statelessProps}\n            className={cx(\n              statelessProps.className,\n              glamorCss(css, style, statelessProps.style).toString()\n            )}\n            // Overwrite `statelessProps.style` since we are including it via className\n            style={undefined}\n            onMouseLeave={handleCloseHover}\n          >\n            {contentToRender}\n          </PopoverStateless>\n        )}\n      </Positioner>\n    )\n  })\n)\n\nPopover.propTypes = {\n  /**\n   * The position the Popover is on. Smart positioning might override this.\n   */\n  position: PropTypes.oneOf([\n    Position.TOP,\n    Position.TOP_LEFT,\n    Position.TOP_RIGHT,\n    Position.BOTTOM,\n    Position.BOTTOM_LEFT,\n    Position.BOTTOM_RIGHT,\n    Position.LEFT,\n    Position.RIGHT\n  ]),\n\n  /**\n   * When true, the Popover is manually shown.\n   */\n  isShown: PropTypes.bool,\n  /**\n   * Open the Popover based on click or hover. Default is click.\n   */\n  trigger: PropTypes.oneOf(['click', 'hover']),\n\n  /**\n   * The content of the Popover.\n   */\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The target button of the Popover.\n   * When a function the following arguments are passed:\n   * ({ toggle: Function -> Void, getRef: Function -> Ref, isShown: Bool })\n   */\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,\n\n  /**\n   * The display property passed to the Popover card.\n   */\n  display: PropTypes.string,\n\n  /**\n   * The min width of the Popover card.\n   */\n  minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The min height of the Popover card.\n   */\n  minHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Properties passed through to the Popover card.\n   */\n  statelessProps: PropTypes.shape(PopoverStateless.propTypes),\n\n  /**\n   * Duration of the animation.\n   */\n  animationDuration: PropTypes.number,\n\n  /**\n   * Function called when the Popover opens.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Function fired when Popover closes.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the body is clicked.\n   */\n  onBodyClick: PropTypes.func,\n\n  /**\n   * When true, bring focus inside of the Popover on open.\n   */\n  bringFocusInside: PropTypes.bool,\n\n  /**\n   * Boolean indicating if clicking outside the dialog should close the dialog.\n   */\n  shouldCloseOnExternalClick: PropTypes.bool\n}\n\nexport default Popover\n"]},"metadata":{},"sourceType":"module"}