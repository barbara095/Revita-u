{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { spacing, position, layout, dimensions } from 'ui-box';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { useId } from '../../hooks';\nimport SegmentedControlRadio from './SegmentedControlRadio';\nvar SegmentedControl = memo(forwardRef(function SegmentedControl(props, ref) {\n  var value = props.value,\n      name = props.name,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      options = props.options,\n      onChange = props.onChange,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      rest = _objectWithoutProperties(props, [\"value\", \"name\", \"height\", \"options\", \"onChange\", \"defaultValue\", \"disabled\"]);\n\n  var groupName = useId('SegmentedControl');\n\n  var isControlled = function isControlled() {\n    return typeof value !== 'undefined' && value !== null;\n  };\n\n  var getDefaultValue = function getDefaultValue() {\n    if (isControlled()) {\n      return value;\n    }\n\n    return typeof defaultValue !== 'undefined' && defaultValue !== null ? defaultValue : options[0].value;\n  };\n\n  var _useState = useState(getDefaultValue()),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeValue = _useState2[0],\n      setActiveValue = _useState2[1];\n\n  useEffect(function () {\n    if (isControlled() && value !== activeValue) {\n      setActiveValue(value);\n    }\n  }, [value]);\n\n  var handleChange = function handleChange(newValue) {\n    // Save a render cycle when it's a controlled input\n    if (!isControlled()) {\n      setActiveValue(newValue);\n    }\n\n    safeInvoke(onChange, newValue);\n  };\n\n  return React.createElement(Box, _extends({\n    display: \"flex\",\n    marginRight: -1,\n    height: height,\n    ref: ref\n  }, rest), options.map(function (option, index) {\n    return React.createElement(SegmentedControlRadio, {\n      key: option.value,\n      id: groupName + index,\n      name: name || groupName,\n      label: option.label,\n      value: String(option.value),\n      height: height,\n      checked: activeValue === option.value,\n      onChange: handleChange.bind(null, option.value),\n      appearance: \"default\",\n      isFirstItem: index === 0,\n      isLastItem: index === options.length - 1,\n      disabled: disabled\n    });\n  }));\n}));\nSegmentedControl.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The options for the radios of the Segmented Control.\n   */\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node.isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]).isRequired\n  })).isRequired,\n\n  /**\n   * The current value of the Segmented Control when controlled.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n\n  /**\n   * The default value of the Segmented Control when uncontrolled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n\n  /**\n   * Function called when the value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The name of the radio group.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The height of the Segmented Control.\n   */\n  height: PropTypes.number,\n\n  /**\n   * When true, the Segmented Control is disabled.\n   */\n  disabled: PropTypes.bool\n});\nexport default SegmentedControl;","map":{"version":3,"sources":["../../../src/segmented-control/src/SegmentedControl.js"],"names":["SegmentedControl","memo","forwardRef","value","name","height","options","onChange","defaultValue","disabled","rest","props","groupName","useId","isControlled","getDefaultValue","activeValue","setActiveValue","useState","useEffect","handleChange","safeInvoke","ref","option","String","index","spacing","position","layout","dimensions","label","PropTypes","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport Box, { spacing, position, layout, dimensions } from 'ui-box'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { useId } from '../../hooks'\nimport SegmentedControlRadio from './SegmentedControlRadio'\n\nconst SegmentedControl = memo(\n  forwardRef(function SegmentedControl(props, ref) {\n    const {\n      value,\n      name,\n      height = 32,\n      options,\n      onChange,\n      defaultValue,\n      disabled,\n      ...rest\n    } = props\n\n    const groupName = useId('SegmentedControl')\n\n    const isControlled = () => {\n      return typeof value !== 'undefined' && value !== null\n    }\n\n    const getDefaultValue = () => {\n      if (isControlled()) {\n        return value\n      }\n\n      return typeof defaultValue !== 'undefined' && defaultValue !== null\n        ? defaultValue\n        : options[0].value\n    }\n\n    const [activeValue, setActiveValue] = useState(getDefaultValue())\n\n    useEffect(() => {\n      if (isControlled() && value !== activeValue) {\n        setActiveValue(value)\n      }\n    }, [value])\n\n    const handleChange = newValue => {\n      // Save a render cycle when it's a controlled input\n      if (!isControlled()) {\n        setActiveValue(newValue)\n      }\n\n      safeInvoke(onChange, newValue)\n    }\n\n    return (\n      <Box display=\"flex\" marginRight={-1} height={height} ref={ref} {...rest}>\n        {options.map((option, index) => (\n          <SegmentedControlRadio\n            key={option.value}\n            id={groupName + index}\n            name={name || groupName}\n            label={option.label}\n            value={String(option.value)}\n            height={height}\n            checked={activeValue === option.value}\n            onChange={handleChange.bind(null, option.value)}\n            appearance=\"default\"\n            isFirstItem={index === 0}\n            isLastItem={index === options.length - 1}\n            disabled={disabled}\n          />\n        ))}\n      </Box>\n    )\n  })\n)\n\nSegmentedControl.propTypes = {\n  /**\n   * Composes some Box APIs.\n   */\n  ...spacing.propTypes,\n  ...position.propTypes,\n  ...layout.propTypes,\n  ...dimensions.propTypes,\n\n  /**\n   * The options for the radios of the Segmented Control.\n   */\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.node.isRequired,\n      value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.bool\n      ]).isRequired\n    })\n  ).isRequired,\n\n  /**\n   * The current value of the Segmented Control when controlled.\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.bool\n  ]),\n\n  /**\n   * The default value of the Segmented Control when uncontrolled.\n   */\n  defaultValue: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.bool\n  ]),\n\n  /**\n   * Function called when the value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The name of the radio group.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The height of the Segmented Control.\n   */\n  height: PropTypes.number,\n\n  /**\n   * When true, the Segmented Control is disabled.\n   */\n  disabled: PropTypes.bool\n}\n\nexport default SegmentedControl\n"]},"metadata":{},"sourceType":"module"}