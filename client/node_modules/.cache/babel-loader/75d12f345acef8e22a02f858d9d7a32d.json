{"ast":null,"code":"import tinycolor from 'tinycolor2';\nimport { Intent } from '../../../constants';\nimport colors from './foundational-styles/colors';\n/**\n * @param {String} top - color.\n * @param {String} bottom - color.\n * @return {String} CSS background propery.\n */\n\nvar linearGradient = function linearGradient(top, bottom) {\n  return \"linear-gradient(to bottom, \".concat(top, \", \").concat(bottom, \")\");\n};\n/**\n * @param {Intent} intent\n * @return {String} color\n */\n\n\nvar getTextColorForIntent = function getTextColorForIntent(intent, defaultColor) {\n  switch (intent) {\n    case Intent.SUCCESS:\n      return colors.text.success;\n\n    case Intent.DANGER:\n      return colors.text.danger;\n\n    case Intent.WARNING:\n      return colors.text.warning;\n\n    default:\n      return defaultColor || colors.text[\"default\"];\n  }\n};\n/**\n * @param {String} startColor\n * @param {String} endColor\n * @param {Number} intensityMultiplier - Some colors need more darkening.\n */\n\n\nvar getLinearGradientWithStates = function getLinearGradientWithStates(startColor, endColor) {\n  var intensityMultiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return {\n    base: linearGradient(startColor, endColor),\n    hover: linearGradient(tinycolor(startColor).darken(5 * intensityMultiplier).toString(), tinycolor(endColor).darken(5 * intensityMultiplier).toString()),\n    active: linearGradient(tinycolor(endColor).darken(5 * intensityMultiplier).toString(), tinycolor(endColor).darken(5 * intensityMultiplier).toString())\n  };\n};\n/**\n * Gradients in the default theme have a intentional hue shift.\n * @param {Intent} intent - intent of the gradient.\n * @return {Object} { base, hover, active }\n */\n\n\nvar getPrimaryButtonStylesForIntent = function getPrimaryButtonStylesForIntent(intent) {\n  switch (intent) {\n    case Intent.SUCCESS:\n      {\n        var startColor = '#23C277';\n        var endColor = '#399D6C';\n        return {\n          linearGradient: getLinearGradientWithStates(startColor, endColor),\n          focusColor: tinycolor(startColor).setAlpha(0.4).toString()\n        };\n      }\n\n    case Intent.WARNING:\n      {\n        var _startColor = '#EE9913';\n        var _endColor = '#D9822B';\n        return {\n          linearGradient: getLinearGradientWithStates(_startColor, _endColor),\n          focusColor: tinycolor(_startColor).setAlpha(0.4).toString()\n        };\n      }\n\n    case Intent.DANGER:\n      {\n        var _startColor2 = '#EC4C47';\n        var _endColor2 = '#D64540';\n        return {\n          linearGradient: getLinearGradientWithStates(_startColor2, _endColor2),\n          focusColor: tinycolor(_startColor2).setAlpha(0.4).toString()\n        };\n      }\n\n    default:\n      {\n        var _startColor3 = '#0788DE';\n        var _endColor3 = '#116AB8';\n        return {\n          linearGradient: getLinearGradientWithStates(_startColor3, _endColor3),\n          focusColor: tinycolor(_startColor3).setAlpha(0.4).toString()\n        };\n      }\n  }\n};\n\nexport { linearGradient, getTextColorForIntent, getLinearGradientWithStates, getPrimaryButtonStylesForIntent };","map":{"version":3,"sources":["../../../../src/theme/src/default-theme/helpers.js"],"names":["linearGradient","getTextColorForIntent","Intent","colors","defaultColor","getLinearGradientWithStates","intensityMultiplier","base","hover","tinycolor","active","getPrimaryButtonStylesForIntent","startColor","endColor","focusColor"],"mappings":"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","sourcesContent":["import tinycolor from 'tinycolor2'\nimport { Intent } from '../../../constants'\nimport colors from './foundational-styles/colors'\n\n/**\n * @param {String} top - color.\n * @param {String} bottom - color.\n * @return {String} CSS background propery.\n */\nconst linearGradient = (top, bottom) => {\n  return `linear-gradient(to bottom, ${top}, ${bottom})`\n}\n\n/**\n * @param {Intent} intent\n * @return {String} color\n */\nconst getTextColorForIntent = (intent, defaultColor) => {\n  switch (intent) {\n    case Intent.SUCCESS:\n      return colors.text.success\n    case Intent.DANGER:\n      return colors.text.danger\n    case Intent.WARNING:\n      return colors.text.warning\n    default:\n      return defaultColor || colors.text.default\n  }\n}\n\n/**\n * @param {String} startColor\n * @param {String} endColor\n * @param {Number} intensityMultiplier - Some colors need more darkening.\n */\nconst getLinearGradientWithStates = (\n  startColor,\n  endColor,\n  intensityMultiplier = 1\n) => {\n  return {\n    base: linearGradient(startColor, endColor),\n    hover: linearGradient(\n      tinycolor(startColor)\n        .darken(5 * intensityMultiplier)\n        .toString(),\n      tinycolor(endColor)\n        .darken(5 * intensityMultiplier)\n        .toString()\n    ),\n    active: linearGradient(\n      tinycolor(endColor)\n        .darken(5 * intensityMultiplier)\n        .toString(),\n      tinycolor(endColor)\n        .darken(5 * intensityMultiplier)\n        .toString()\n    )\n  }\n}\n\n/**\n * Gradients in the default theme have a intentional hue shift.\n * @param {Intent} intent - intent of the gradient.\n * @return {Object} { base, hover, active }\n */\nconst getPrimaryButtonStylesForIntent = intent => {\n  switch (intent) {\n    case Intent.SUCCESS: {\n      const startColor = '#23C277'\n      const endColor = '#399D6C'\n      return {\n        linearGradient: getLinearGradientWithStates(startColor, endColor),\n        focusColor: tinycolor(startColor)\n          .setAlpha(0.4)\n          .toString()\n      }\n    }\n\n    case Intent.WARNING: {\n      const startColor = '#EE9913'\n      const endColor = '#D9822B'\n      return {\n        linearGradient: getLinearGradientWithStates(startColor, endColor),\n        focusColor: tinycolor(startColor)\n          .setAlpha(0.4)\n          .toString()\n      }\n    }\n\n    case Intent.DANGER: {\n      const startColor = '#EC4C47'\n      const endColor = '#D64540'\n      return {\n        linearGradient: getLinearGradientWithStates(startColor, endColor),\n        focusColor: tinycolor(startColor)\n          .setAlpha(0.4)\n          .toString()\n      }\n    }\n\n    default: {\n      const startColor = '#0788DE'\n      const endColor = '#116AB8'\n      return {\n        linearGradient: getLinearGradientWithStates(startColor, endColor),\n        focusColor: tinycolor(startColor)\n          .setAlpha(0.4)\n          .toString()\n      }\n    }\n  }\n}\n\nexport {\n  linearGradient,\n  getTextColorForIntent,\n  getLinearGradientWithStates,\n  getPrimaryButtonStylesForIntent\n}\n"]},"metadata":{},"sourceType":"module"}